[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\n\n/* Package-scope variables */\nvar moment;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/momentjs_moment/moment.js                                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n//! moment.js                                                                                                          // 1\n//! version : 2.14.1                                                                                                   // 2\n//! authors : Tim Wood, Iskren Chernev, Moment.js contributors                                                         // 3\n//! license : MIT                                                                                                      // 4\n//! momentjs.com                                                                                                       // 5\n                                                                                                                       // 6\n;(function (global, factory) {                                                                                         // 7\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :                        // 8\n    typeof define === 'function' && define.amd ? define(factory) :                                                     // 9\n    global.moment = factory()                                                                                          // 10\n}(this, function () { 'use strict';                                                                                    // 11\n                                                                                                                       // 12\n    var hookCallback;                                                                                                  // 13\n                                                                                                                       // 14\n    function utils_hooks__hooks () {                                                                                   // 15\n        return hookCallback.apply(null, arguments);                                                                    // 16\n    }                                                                                                                  // 17\n                                                                                                                       // 18\n    // This is done to register the method called with moment()                                                        // 19\n    // without creating circular dependencies.                                                                         // 20\n    function setHookCallback (callback) {                                                                              // 21\n        hookCallback = callback;                                                                                       // 22\n    }                                                                                                                  // 23\n                                                                                                                       // 24\n    function isArray(input) {                                                                                          // 25\n        return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';                   // 26\n    }                                                                                                                  // 27\n                                                                                                                       // 28\n    function isObject(input) {                                                                                         // 29\n        return Object.prototype.toString.call(input) === '[object Object]';                                            // 30\n    }                                                                                                                  // 31\n                                                                                                                       // 32\n    function isObjectEmpty(obj) {                                                                                      // 33\n        var k;                                                                                                         // 34\n        for (k in obj) {                                                                                               // 35\n            // even if its not own property I'd still call it non-empty                                                // 36\n            return false;                                                                                              // 37\n        }                                                                                                              // 38\n        return true;                                                                                                   // 39\n    }                                                                                                                  // 40\n                                                                                                                       // 41\n    function isDate(input) {                                                                                           // 42\n        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';                     // 43\n    }                                                                                                                  // 44\n                                                                                                                       // 45\n    function map(arr, fn) {                                                                                            // 46\n        var res = [], i;                                                                                               // 47\n        for (i = 0; i < arr.length; ++i) {                                                                             // 48\n            res.push(fn(arr[i], i));                                                                                   // 49\n        }                                                                                                              // 50\n        return res;                                                                                                    // 51\n    }                                                                                                                  // 52\n                                                                                                                       // 53\n    function hasOwnProp(a, b) {                                                                                        // 54\n        return Object.prototype.hasOwnProperty.call(a, b);                                                             // 55\n    }                                                                                                                  // 56\n                                                                                                                       // 57\n    function extend(a, b) {                                                                                            // 58\n        for (var i in b) {                                                                                             // 59\n            if (hasOwnProp(b, i)) {                                                                                    // 60\n                a[i] = b[i];                                                                                           // 61\n            }                                                                                                          // 62\n        }                                                                                                              // 63\n                                                                                                                       // 64\n        if (hasOwnProp(b, 'toString')) {                                                                               // 65\n            a.toString = b.toString;                                                                                   // 66\n        }                                                                                                              // 67\n                                                                                                                       // 68\n        if (hasOwnProp(b, 'valueOf')) {                                                                                // 69\n            a.valueOf = b.valueOf;                                                                                     // 70\n        }                                                                                                              // 71\n                                                                                                                       // 72\n        return a;                                                                                                      // 73\n    }                                                                                                                  // 74\n                                                                                                                       // 75\n    function create_utc__createUTC (input, format, locale, strict) {                                                   // 76\n        return createLocalOrUTC(input, format, locale, strict, true).utc();                                            // 77\n    }                                                                                                                  // 78\n                                                                                                                       // 79\n    function defaultParsingFlags() {                                                                                   // 80\n        // We need to deep clone this object.                                                                          // 81\n        return {                                                                                                       // 82\n            empty           : false,                                                                                   // 83\n            unusedTokens    : [],                                                                                      // 84\n            unusedInput     : [],                                                                                      // 85\n            overflow        : -2,                                                                                      // 86\n            charsLeftOver   : 0,                                                                                       // 87\n            nullInput       : false,                                                                                   // 88\n            invalidMonth    : null,                                                                                    // 89\n            invalidFormat   : false,                                                                                   // 90\n            userInvalidated : false,                                                                                   // 91\n            iso             : false,                                                                                   // 92\n            parsedDateParts : [],                                                                                      // 93\n            meridiem        : null                                                                                     // 94\n        };                                                                                                             // 95\n    }                                                                                                                  // 96\n                                                                                                                       // 97\n    function getParsingFlags(m) {                                                                                      // 98\n        if (m._pf == null) {                                                                                           // 99\n            m._pf = defaultParsingFlags();                                                                             // 100\n        }                                                                                                              // 101\n        return m._pf;                                                                                                  // 102\n    }                                                                                                                  // 103\n                                                                                                                       // 104\n    var some;                                                                                                          // 105\n    if (Array.prototype.some) {                                                                                        // 106\n        some = Array.prototype.some;                                                                                   // 107\n    } else {                                                                                                           // 108\n        some = function (fun) {                                                                                        // 109\n            var t = Object(this);                                                                                      // 110\n            var len = t.length >>> 0;                                                                                  // 111\n                                                                                                                       // 112\n            for (var i = 0; i < len; i++) {                                                                            // 113\n                if (i in t && fun.call(this, t[i], i, t)) {                                                            // 114\n                    return true;                                                                                       // 115\n                }                                                                                                      // 116\n            }                                                                                                          // 117\n                                                                                                                       // 118\n            return false;                                                                                              // 119\n        };                                                                                                             // 120\n    }                                                                                                                  // 121\n                                                                                                                       // 122\n    function valid__isValid(m) {                                                                                       // 123\n        if (m._isValid == null) {                                                                                      // 124\n            var flags = getParsingFlags(m);                                                                            // 125\n            var parsedParts = some.call(flags.parsedDateParts, function (i) {                                          // 126\n                return i != null;                                                                                      // 127\n            });                                                                                                        // 128\n            m._isValid = !isNaN(m._d.getTime()) &&                                                                     // 129\n                flags.overflow < 0 &&                                                                                  // 130\n                !flags.empty &&                                                                                        // 131\n                !flags.invalidMonth &&                                                                                 // 132\n                !flags.invalidWeekday &&                                                                               // 133\n                !flags.nullInput &&                                                                                    // 134\n                !flags.invalidFormat &&                                                                                // 135\n                !flags.userInvalidated &&                                                                              // 136\n                (!flags.meridiem || (flags.meridiem && parsedParts));                                                  // 137\n                                                                                                                       // 138\n            if (m._strict) {                                                                                           // 139\n                m._isValid = m._isValid &&                                                                             // 140\n                    flags.charsLeftOver === 0 &&                                                                       // 141\n                    flags.unusedTokens.length === 0 &&                                                                 // 142\n                    flags.bigHour === undefined;                                                                       // 143\n            }                                                                                                          // 144\n        }                                                                                                              // 145\n        return m._isValid;                                                                                             // 146\n    }                                                                                                                  // 147\n                                                                                                                       // 148\n    function valid__createInvalid (flags) {                                                                            // 149\n        var m = create_utc__createUTC(NaN);                                                                            // 150\n        if (flags != null) {                                                                                           // 151\n            extend(getParsingFlags(m), flags);                                                                         // 152\n        }                                                                                                              // 153\n        else {                                                                                                         // 154\n            getParsingFlags(m).userInvalidated = true;                                                                 // 155\n        }                                                                                                              // 156\n                                                                                                                       // 157\n        return m;                                                                                                      // 158\n    }                                                                                                                  // 159\n                                                                                                                       // 160\n    function isUndefined(input) {                                                                                      // 161\n        return input === void 0;                                                                                       // 162\n    }                                                                                                                  // 163\n                                                                                                                       // 164\n    // Plugins that add properties should also add the key here (null value),                                          // 165\n    // so we can properly clone ourselves.                                                                             // 166\n    var momentProperties = utils_hooks__hooks.momentProperties = [];                                                   // 167\n                                                                                                                       // 168\n    function copyConfig(to, from) {                                                                                    // 169\n        var i, prop, val;                                                                                              // 170\n                                                                                                                       // 171\n        if (!isUndefined(from._isAMomentObject)) {                                                                     // 172\n            to._isAMomentObject = from._isAMomentObject;                                                               // 173\n        }                                                                                                              // 174\n        if (!isUndefined(from._i)) {                                                                                   // 175\n            to._i = from._i;                                                                                           // 176\n        }                                                                                                              // 177\n        if (!isUndefined(from._f)) {                                                                                   // 178\n            to._f = from._f;                                                                                           // 179\n        }                                                                                                              // 180\n        if (!isUndefined(from._l)) {                                                                                   // 181\n            to._l = from._l;                                                                                           // 182\n        }                                                                                                              // 183\n        if (!isUndefined(from._strict)) {                                                                              // 184\n            to._strict = from._strict;                                                                                 // 185\n        }                                                                                                              // 186\n        if (!isUndefined(from._tzm)) {                                                                                 // 187\n            to._tzm = from._tzm;                                                                                       // 188\n        }                                                                                                              // 189\n        if (!isUndefined(from._isUTC)) {                                                                               // 190\n            to._isUTC = from._isUTC;                                                                                   // 191\n        }                                                                                                              // 192\n        if (!isUndefined(from._offset)) {                                                                              // 193\n            to._offset = from._offset;                                                                                 // 194\n        }                                                                                                              // 195\n        if (!isUndefined(from._pf)) {                                                                                  // 196\n            to._pf = getParsingFlags(from);                                                                            // 197\n        }                                                                                                              // 198\n        if (!isUndefined(from._locale)) {                                                                              // 199\n            to._locale = from._locale;                                                                                 // 200\n        }                                                                                                              // 201\n                                                                                                                       // 202\n        if (momentProperties.length > 0) {                                                                             // 203\n            for (i in momentProperties) {                                                                              // 204\n                prop = momentProperties[i];                                                                            // 205\n                val = from[prop];                                                                                      // 206\n                if (!isUndefined(val)) {                                                                               // 207\n                    to[prop] = val;                                                                                    // 208\n                }                                                                                                      // 209\n            }                                                                                                          // 210\n        }                                                                                                              // 211\n                                                                                                                       // 212\n        return to;                                                                                                     // 213\n    }                                                                                                                  // 214\n                                                                                                                       // 215\n    var updateInProgress = false;                                                                                      // 216\n                                                                                                                       // 217\n    // Moment prototype object                                                                                         // 218\n    function Moment(config) {                                                                                          // 219\n        copyConfig(this, config);                                                                                      // 220\n        this._d = new Date(config._d != null ? config._d.getTime() : NaN);                                             // 221\n        // Prevent infinite loop in case updateOffset creates new moment                                               // 222\n        // objects.                                                                                                    // 223\n        if (updateInProgress === false) {                                                                              // 224\n            updateInProgress = true;                                                                                   // 225\n            utils_hooks__hooks.updateOffset(this);                                                                     // 226\n            updateInProgress = false;                                                                                  // 227\n        }                                                                                                              // 228\n    }                                                                                                                  // 229\n                                                                                                                       // 230\n    function isMoment (obj) {                                                                                          // 231\n        return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);                                 // 232\n    }                                                                                                                  // 233\n                                                                                                                       // 234\n    function absFloor (number) {                                                                                       // 235\n        if (number < 0) {                                                                                              // 236\n            // -0 -> 0                                                                                                 // 237\n            return Math.ceil(number) || 0;                                                                             // 238\n        } else {                                                                                                       // 239\n            return Math.floor(number);                                                                                 // 240\n        }                                                                                                              // 241\n    }                                                                                                                  // 242\n                                                                                                                       // 243\n    function toInt(argumentForCoercion) {                                                                              // 244\n        var coercedNumber = +argumentForCoercion,                                                                      // 245\n            value = 0;                                                                                                 // 246\n                                                                                                                       // 247\n        if (coercedNumber !== 0 && isFinite(coercedNumber)) {                                                          // 248\n            value = absFloor(coercedNumber);                                                                           // 249\n        }                                                                                                              // 250\n                                                                                                                       // 251\n        return value;                                                                                                  // 252\n    }                                                                                                                  // 253\n                                                                                                                       // 254\n    // compare two arrays, return the number of differences                                                            // 255\n    function compareArrays(array1, array2, dontConvert) {                                                              // 256\n        var len = Math.min(array1.length, array2.length),                                                              // 257\n            lengthDiff = Math.abs(array1.length - array2.length),                                                      // 258\n            diffs = 0,                                                                                                 // 259\n            i;                                                                                                         // 260\n        for (i = 0; i < len; i++) {                                                                                    // 261\n            if ((dontConvert && array1[i] !== array2[i]) ||                                                            // 262\n                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {                                             // 263\n                diffs++;                                                                                               // 264\n            }                                                                                                          // 265\n        }                                                                                                              // 266\n        return diffs + lengthDiff;                                                                                     // 267\n    }                                                                                                                  // 268\n                                                                                                                       // 269\n    function warn(msg) {                                                                                               // 270\n        if (utils_hooks__hooks.suppressDeprecationWarnings === false &&                                                // 271\n                (typeof console !==  'undefined') && console.warn) {                                                   // 272\n            console.warn('Deprecation warning: ' + msg);                                                               // 273\n        }                                                                                                              // 274\n    }                                                                                                                  // 275\n                                                                                                                       // 276\n    function deprecate(msg, fn) {                                                                                      // 277\n        var firstTime = true;                                                                                          // 278\n                                                                                                                       // 279\n        return extend(function () {                                                                                    // 280\n            if (utils_hooks__hooks.deprecationHandler != null) {                                                       // 281\n                utils_hooks__hooks.deprecationHandler(null, msg);                                                      // 282\n            }                                                                                                          // 283\n            if (firstTime) {                                                                                           // 284\n                warn(msg + '\\nArguments: ' + Array.prototype.slice.call(arguments).join(', ') + '\\n' + (new Error()).stack);\n                firstTime = false;                                                                                     // 286\n            }                                                                                                          // 287\n            return fn.apply(this, arguments);                                                                          // 288\n        }, fn);                                                                                                        // 289\n    }                                                                                                                  // 290\n                                                                                                                       // 291\n    var deprecations = {};                                                                                             // 292\n                                                                                                                       // 293\n    function deprecateSimple(name, msg) {                                                                              // 294\n        if (utils_hooks__hooks.deprecationHandler != null) {                                                           // 295\n            utils_hooks__hooks.deprecationHandler(name, msg);                                                          // 296\n        }                                                                                                              // 297\n        if (!deprecations[name]) {                                                                                     // 298\n            warn(msg);                                                                                                 // 299\n            deprecations[name] = true;                                                                                 // 300\n        }                                                                                                              // 301\n    }                                                                                                                  // 302\n                                                                                                                       // 303\n    utils_hooks__hooks.suppressDeprecationWarnings = false;                                                            // 304\n    utils_hooks__hooks.deprecationHandler = null;                                                                      // 305\n                                                                                                                       // 306\n    function isFunction(input) {                                                                                       // 307\n        return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';             // 308\n    }                                                                                                                  // 309\n                                                                                                                       // 310\n    function locale_set__set (config) {                                                                                // 311\n        var prop, i;                                                                                                   // 312\n        for (i in config) {                                                                                            // 313\n            prop = config[i];                                                                                          // 314\n            if (isFunction(prop)) {                                                                                    // 315\n                this[i] = prop;                                                                                        // 316\n            } else {                                                                                                   // 317\n                this['_' + i] = prop;                                                                                  // 318\n            }                                                                                                          // 319\n        }                                                                                                              // 320\n        this._config = config;                                                                                         // 321\n        // Lenient ordinal parsing accepts just a number in addition to                                                // 322\n        // number + (possibly) stuff coming from _ordinalParseLenient.                                                 // 323\n        this._ordinalParseLenient = new RegExp(this._ordinalParse.source + '|' + (/\\d{1,2}/).source);                  // 324\n    }                                                                                                                  // 325\n                                                                                                                       // 326\n    function mergeConfigs(parentConfig, childConfig) {                                                                 // 327\n        var res = extend({}, parentConfig), prop;                                                                      // 328\n        for (prop in childConfig) {                                                                                    // 329\n            if (hasOwnProp(childConfig, prop)) {                                                                       // 330\n                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {                                     // 331\n                    res[prop] = {};                                                                                    // 332\n                    extend(res[prop], parentConfig[prop]);                                                             // 333\n                    extend(res[prop], childConfig[prop]);                                                              // 334\n                } else if (childConfig[prop] != null) {                                                                // 335\n                    res[prop] = childConfig[prop];                                                                     // 336\n                } else {                                                                                               // 337\n                    delete res[prop];                                                                                  // 338\n                }                                                                                                      // 339\n            }                                                                                                          // 340\n        }                                                                                                              // 341\n        for (prop in parentConfig) {                                                                                   // 342\n            if (hasOwnProp(parentConfig, prop) &&                                                                      // 343\n                    !hasOwnProp(childConfig, prop) &&                                                                  // 344\n                    isObject(parentConfig[prop])) {                                                                    // 345\n                // make sure changes to properties don't modify parent config                                          // 346\n                res[prop] = extend({}, res[prop]);                                                                     // 347\n            }                                                                                                          // 348\n        }                                                                                                              // 349\n        return res;                                                                                                    // 350\n    }                                                                                                                  // 351\n                                                                                                                       // 352\n    function Locale(config) {                                                                                          // 353\n        if (config != null) {                                                                                          // 354\n            this.set(config);                                                                                          // 355\n        }                                                                                                              // 356\n    }                                                                                                                  // 357\n                                                                                                                       // 358\n    var keys;                                                                                                          // 359\n                                                                                                                       // 360\n    if (Object.keys) {                                                                                                 // 361\n        keys = Object.keys;                                                                                            // 362\n    } else {                                                                                                           // 363\n        keys = function (obj) {                                                                                        // 364\n            var i, res = [];                                                                                           // 365\n            for (i in obj) {                                                                                           // 366\n                if (hasOwnProp(obj, i)) {                                                                              // 367\n                    res.push(i);                                                                                       // 368\n                }                                                                                                      // 369\n            }                                                                                                          // 370\n            return res;                                                                                                // 371\n        };                                                                                                             // 372\n    }                                                                                                                  // 373\n                                                                                                                       // 374\n    var defaultCalendar = {                                                                                            // 375\n        sameDay : '[Today at] LT',                                                                                     // 376\n        nextDay : '[Tomorrow at] LT',                                                                                  // 377\n        nextWeek : 'dddd [at] LT',                                                                                     // 378\n        lastDay : '[Yesterday at] LT',                                                                                 // 379\n        lastWeek : '[Last] dddd [at] LT',                                                                              // 380\n        sameElse : 'L'                                                                                                 // 381\n    };                                                                                                                 // 382\n                                                                                                                       // 383\n    function locale_calendar__calendar (key, mom, now) {                                                               // 384\n        var output = this._calendar[key] || this._calendar['sameElse'];                                                // 385\n        return isFunction(output) ? output.call(mom, now) : output;                                                    // 386\n    }                                                                                                                  // 387\n                                                                                                                       // 388\n    var defaultLongDateFormat = {                                                                                      // 389\n        LTS  : 'h:mm:ss A',                                                                                            // 390\n        LT   : 'h:mm A',                                                                                               // 391\n        L    : 'MM/DD/YYYY',                                                                                           // 392\n        LL   : 'MMMM D, YYYY',                                                                                         // 393\n        LLL  : 'MMMM D, YYYY h:mm A',                                                                                  // 394\n        LLLL : 'dddd, MMMM D, YYYY h:mm A'                                                                             // 395\n    };                                                                                                                 // 396\n                                                                                                                       // 397\n    function longDateFormat (key) {                                                                                    // 398\n        var format = this._longDateFormat[key],                                                                        // 399\n            formatUpper = this._longDateFormat[key.toUpperCase()];                                                     // 400\n                                                                                                                       // 401\n        if (format || !formatUpper) {                                                                                  // 402\n            return format;                                                                                             // 403\n        }                                                                                                              // 404\n                                                                                                                       // 405\n        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {                           // 406\n            return val.slice(1);                                                                                       // 407\n        });                                                                                                            // 408\n                                                                                                                       // 409\n        return this._longDateFormat[key];                                                                              // 410\n    }                                                                                                                  // 411\n                                                                                                                       // 412\n    var defaultInvalidDate = 'Invalid date';                                                                           // 413\n                                                                                                                       // 414\n    function invalidDate () {                                                                                          // 415\n        return this._invalidDate;                                                                                      // 416\n    }                                                                                                                  // 417\n                                                                                                                       // 418\n    var defaultOrdinal = '%d';                                                                                         // 419\n    var defaultOrdinalParse = /\\d{1,2}/;                                                                               // 420\n                                                                                                                       // 421\n    function ordinal (number) {                                                                                        // 422\n        return this._ordinal.replace('%d', number);                                                                    // 423\n    }                                                                                                                  // 424\n                                                                                                                       // 425\n    var defaultRelativeTime = {                                                                                        // 426\n        future : 'in %s',                                                                                              // 427\n        past   : '%s ago',                                                                                             // 428\n        s  : 'a few seconds',                                                                                          // 429\n        m  : 'a minute',                                                                                               // 430\n        mm : '%d minutes',                                                                                             // 431\n        h  : 'an hour',                                                                                                // 432\n        hh : '%d hours',                                                                                               // 433\n        d  : 'a day',                                                                                                  // 434\n        dd : '%d days',                                                                                                // 435\n        M  : 'a month',                                                                                                // 436\n        MM : '%d months',                                                                                              // 437\n        y  : 'a year',                                                                                                 // 438\n        yy : '%d years'                                                                                                // 439\n    };                                                                                                                 // 440\n                                                                                                                       // 441\n    function relative__relativeTime (number, withoutSuffix, string, isFuture) {                                        // 442\n        var output = this._relativeTime[string];                                                                       // 443\n        return (isFunction(output)) ?                                                                                  // 444\n            output(number, withoutSuffix, string, isFuture) :                                                          // 445\n            output.replace(/%d/i, number);                                                                             // 446\n    }                                                                                                                  // 447\n                                                                                                                       // 448\n    function pastFuture (diff, output) {                                                                               // 449\n        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];                                                 // 450\n        return isFunction(format) ? format(output) : format.replace(/%s/i, output);                                    // 451\n    }                                                                                                                  // 452\n                                                                                                                       // 453\n    var aliases = {};                                                                                                  // 454\n                                                                                                                       // 455\n    function addUnitAlias (unit, shorthand) {                                                                          // 456\n        var lowerCase = unit.toLowerCase();                                                                            // 457\n        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;                                     // 458\n    }                                                                                                                  // 459\n                                                                                                                       // 460\n    function normalizeUnits(units) {                                                                                   // 461\n        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;                 // 462\n    }                                                                                                                  // 463\n                                                                                                                       // 464\n    function normalizeObjectUnits(inputObject) {                                                                       // 465\n        var normalizedInput = {},                                                                                      // 466\n            normalizedProp,                                                                                            // 467\n            prop;                                                                                                      // 468\n                                                                                                                       // 469\n        for (prop in inputObject) {                                                                                    // 470\n            if (hasOwnProp(inputObject, prop)) {                                                                       // 471\n                normalizedProp = normalizeUnits(prop);                                                                 // 472\n                if (normalizedProp) {                                                                                  // 473\n                    normalizedInput[normalizedProp] = inputObject[prop];                                               // 474\n                }                                                                                                      // 475\n            }                                                                                                          // 476\n        }                                                                                                              // 477\n                                                                                                                       // 478\n        return normalizedInput;                                                                                        // 479\n    }                                                                                                                  // 480\n                                                                                                                       // 481\n    var priorities = {};                                                                                               // 482\n                                                                                                                       // 483\n    function addUnitPriority(unit, priority) {                                                                         // 484\n        priorities[unit] = priority;                                                                                   // 485\n    }                                                                                                                  // 486\n                                                                                                                       // 487\n    function getPrioritizedUnits(unitsObj) {                                                                           // 488\n        var units = [];                                                                                                // 489\n        for (var u in unitsObj) {                                                                                      // 490\n            units.push({unit: u, priority: priorities[u]});                                                            // 491\n        }                                                                                                              // 492\n        units.sort(function (a, b) {                                                                                   // 493\n            return a.priority - b.priority;                                                                            // 494\n        });                                                                                                            // 495\n        return units;                                                                                                  // 496\n    }                                                                                                                  // 497\n                                                                                                                       // 498\n    function makeGetSet (unit, keepTime) {                                                                             // 499\n        return function (value) {                                                                                      // 500\n            if (value != null) {                                                                                       // 501\n                get_set__set(this, unit, value);                                                                       // 502\n                utils_hooks__hooks.updateOffset(this, keepTime);                                                       // 503\n                return this;                                                                                           // 504\n            } else {                                                                                                   // 505\n                return get_set__get(this, unit);                                                                       // 506\n            }                                                                                                          // 507\n        };                                                                                                             // 508\n    }                                                                                                                  // 509\n                                                                                                                       // 510\n    function get_set__get (mom, unit) {                                                                                // 511\n        return mom.isValid() ?                                                                                         // 512\n            mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;                                                  // 513\n    }                                                                                                                  // 514\n                                                                                                                       // 515\n    function get_set__set (mom, unit, value) {                                                                         // 516\n        if (mom.isValid()) {                                                                                           // 517\n            mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);                                                   // 518\n        }                                                                                                              // 519\n    }                                                                                                                  // 520\n                                                                                                                       // 521\n    // MOMENTS                                                                                                         // 522\n                                                                                                                       // 523\n    function stringGet (units) {                                                                                       // 524\n        units = normalizeUnits(units);                                                                                 // 525\n        if (isFunction(this[units])) {                                                                                 // 526\n            return this[units]();                                                                                      // 527\n        }                                                                                                              // 528\n        return this;                                                                                                   // 529\n    }                                                                                                                  // 530\n                                                                                                                       // 531\n                                                                                                                       // 532\n    function stringSet (units, value) {                                                                                // 533\n        if (typeof units === 'object') {                                                                               // 534\n            units = normalizeObjectUnits(units);                                                                       // 535\n            var prioritized = getPrioritizedUnits(units);                                                              // 536\n            for (var i = 0; i < prioritized.length; i++) {                                                             // 537\n                this[prioritized[i].unit](units[prioritized[i].unit]);                                                 // 538\n            }                                                                                                          // 539\n        } else {                                                                                                       // 540\n            units = normalizeUnits(units);                                                                             // 541\n            if (isFunction(this[units])) {                                                                             // 542\n                return this[units](value);                                                                             // 543\n            }                                                                                                          // 544\n        }                                                                                                              // 545\n        return this;                                                                                                   // 546\n    }                                                                                                                  // 547\n                                                                                                                       // 548\n    function zeroFill(number, targetLength, forceSign) {                                                               // 549\n        var absNumber = '' + Math.abs(number),                                                                         // 550\n            zerosToFill = targetLength - absNumber.length,                                                             // 551\n            sign = number >= 0;                                                                                        // 552\n        return (sign ? (forceSign ? '+' : '') : '-') +                                                                 // 553\n            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;                                   // 554\n    }                                                                                                                  // 555\n                                                                                                                       // 556\n    var formattingTokens = /(\\[[^\\[]*\\])|(\\\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;\n                                                                                                                       // 558\n    var localFormattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(LTS|LT|LL?L?L?|l{1,4})/g;                                          // 559\n                                                                                                                       // 560\n    var formatFunctions = {};                                                                                          // 561\n                                                                                                                       // 562\n    var formatTokenFunctions = {};                                                                                     // 563\n                                                                                                                       // 564\n    // token:    'M'                                                                                                   // 565\n    // padded:   ['MM', 2]                                                                                             // 566\n    // ordinal:  'Mo'                                                                                                  // 567\n    // callback: function () { this.month() + 1 }                                                                      // 568\n    function addFormatToken (token, padded, ordinal, callback) {                                                       // 569\n        var func = callback;                                                                                           // 570\n        if (typeof callback === 'string') {                                                                            // 571\n            func = function () {                                                                                       // 572\n                return this[callback]();                                                                               // 573\n            };                                                                                                         // 574\n        }                                                                                                              // 575\n        if (token) {                                                                                                   // 576\n            formatTokenFunctions[token] = func;                                                                        // 577\n        }                                                                                                              // 578\n        if (padded) {                                                                                                  // 579\n            formatTokenFunctions[padded[0]] = function () {                                                            // 580\n                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);                                    // 581\n            };                                                                                                         // 582\n        }                                                                                                              // 583\n        if (ordinal) {                                                                                                 // 584\n            formatTokenFunctions[ordinal] = function () {                                                              // 585\n                return this.localeData().ordinal(func.apply(this, arguments), token);                                  // 586\n            };                                                                                                         // 587\n        }                                                                                                              // 588\n    }                                                                                                                  // 589\n                                                                                                                       // 590\n    function removeFormattingTokens(input) {                                                                           // 591\n        if (input.match(/\\[[\\s\\S]/)) {                                                                                 // 592\n            return input.replace(/^\\[|\\]$/g, '');                                                                      // 593\n        }                                                                                                              // 594\n        return input.replace(/\\\\/g, '');                                                                               // 595\n    }                                                                                                                  // 596\n                                                                                                                       // 597\n    function makeFormatFunction(format) {                                                                              // 598\n        var array = format.match(formattingTokens), i, length;                                                         // 599\n                                                                                                                       // 600\n        for (i = 0, length = array.length; i < length; i++) {                                                          // 601\n            if (formatTokenFunctions[array[i]]) {                                                                      // 602\n                array[i] = formatTokenFunctions[array[i]];                                                             // 603\n            } else {                                                                                                   // 604\n                array[i] = removeFormattingTokens(array[i]);                                                           // 605\n            }                                                                                                          // 606\n        }                                                                                                              // 607\n                                                                                                                       // 608\n        return function (mom) {                                                                                        // 609\n            var output = '', i;                                                                                        // 610\n            for (i = 0; i < length; i++) {                                                                             // 611\n                output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];                        // 612\n            }                                                                                                          // 613\n            return output;                                                                                             // 614\n        };                                                                                                             // 615\n    }                                                                                                                  // 616\n                                                                                                                       // 617\n    // format date using native date object                                                                            // 618\n    function formatMoment(m, format) {                                                                                 // 619\n        if (!m.isValid()) {                                                                                            // 620\n            return m.localeData().invalidDate();                                                                       // 621\n        }                                                                                                              // 622\n                                                                                                                       // 623\n        format = expandFormat(format, m.localeData());                                                                 // 624\n        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);                               // 625\n                                                                                                                       // 626\n        return formatFunctions[format](m);                                                                             // 627\n    }                                                                                                                  // 628\n                                                                                                                       // 629\n    function expandFormat(format, locale) {                                                                            // 630\n        var i = 5;                                                                                                     // 631\n                                                                                                                       // 632\n        function replaceLongDateFormatTokens(input) {                                                                  // 633\n            return locale.longDateFormat(input) || input;                                                              // 634\n        }                                                                                                              // 635\n                                                                                                                       // 636\n        localFormattingTokens.lastIndex = 0;                                                                           // 637\n        while (i >= 0 && localFormattingTokens.test(format)) {                                                         // 638\n            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);                               // 639\n            localFormattingTokens.lastIndex = 0;                                                                       // 640\n            i -= 1;                                                                                                    // 641\n        }                                                                                                              // 642\n                                                                                                                       // 643\n        return format;                                                                                                 // 644\n    }                                                                                                                  // 645\n                                                                                                                       // 646\n    var match1         = /\\d/;            //       0 - 9                                                               // 647\n    var match2         = /\\d\\d/;          //      00 - 99                                                              // 648\n    var match3         = /\\d{3}/;         //     000 - 999                                                             // 649\n    var match4         = /\\d{4}/;         //    0000 - 9999                                                            // 650\n    var match6         = /[+-]?\\d{6}/;    // -999999 - 999999                                                          // 651\n    var match1to2      = /\\d\\d?/;         //       0 - 99                                                              // 652\n    var match3to4      = /\\d\\d\\d\\d?/;     //     999 - 9999                                                            // 653\n    var match5to6      = /\\d\\d\\d\\d\\d\\d?/; //   99999 - 999999                                                          // 654\n    var match1to3      = /\\d{1,3}/;       //       0 - 999                                                             // 655\n    var match1to4      = /\\d{1,4}/;       //       0 - 9999                                                            // 656\n    var match1to6      = /[+-]?\\d{1,6}/;  // -999999 - 999999                                                          // 657\n                                                                                                                       // 658\n    var matchUnsigned  = /\\d+/;           //       0 - inf                                                             // 659\n    var matchSigned    = /[+-]?\\d+/;      //    -inf - inf                                                             // 660\n                                                                                                                       // 661\n    var matchOffset    = /Z|[+-]\\d\\d:?\\d\\d/gi; // +00:00 -00:00 +0000 -0000 or Z                                       // 662\n    var matchShortOffset = /Z|[+-]\\d\\d(?::?\\d\\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z                        // 663\n                                                                                                                       // 664\n    var matchTimestamp = /[+-]?\\d+(\\.\\d{1,3})?/; // 123456789 123456789.123                                            // 665\n                                                                                                                       // 666\n    // any word (or two) characters or numbers including two/three word month in arabic.                               // 667\n    // includes scottish gaelic two word and hyphenated months                                                         // 668\n    var matchWord = /[0-9]*['a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+|[\\u0600-\\u06FF\\/]+(\\s*?[\\u0600-\\u06FF]+){1,2}/i;\n                                                                                                                       // 670\n                                                                                                                       // 671\n    var regexes = {};                                                                                                  // 672\n                                                                                                                       // 673\n    function addRegexToken (token, regex, strictRegex) {                                                               // 674\n        regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {                                 // 675\n            return (isStrict && strictRegex) ? strictRegex : regex;                                                    // 676\n        };                                                                                                             // 677\n    }                                                                                                                  // 678\n                                                                                                                       // 679\n    function getParseRegexForToken (token, config) {                                                                   // 680\n        if (!hasOwnProp(regexes, token)) {                                                                             // 681\n            return new RegExp(unescapeFormat(token));                                                                  // 682\n        }                                                                                                              // 683\n                                                                                                                       // 684\n        return regexes[token](config._strict, config._locale);                                                         // 685\n    }                                                                                                                  // 686\n                                                                                                                       // 687\n    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript            // 688\n    function unescapeFormat(s) {                                                                                       // 689\n        return regexEscape(s.replace('\\\\', '').replace(/\\\\(\\[)|\\\\(\\])|\\[([^\\]\\[]*)\\]|\\\\(.)/g, function (matched, p1, p2, p3, p4) {\n            return p1 || p2 || p3 || p4;                                                                               // 691\n        }));                                                                                                           // 692\n    }                                                                                                                  // 693\n                                                                                                                       // 694\n    function regexEscape(s) {                                                                                          // 695\n        return s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');                                                            // 696\n    }                                                                                                                  // 697\n                                                                                                                       // 698\n    var tokens = {};                                                                                                   // 699\n                                                                                                                       // 700\n    function addParseToken (token, callback) {                                                                         // 701\n        var i, func = callback;                                                                                        // 702\n        if (typeof token === 'string') {                                                                               // 703\n            token = [token];                                                                                           // 704\n        }                                                                                                              // 705\n        if (typeof callback === 'number') {                                                                            // 706\n            func = function (input, array) {                                                                           // 707\n                array[callback] = toInt(input);                                                                        // 708\n            };                                                                                                         // 709\n        }                                                                                                              // 710\n        for (i = 0; i < token.length; i++) {                                                                           // 711\n            tokens[token[i]] = func;                                                                                   // 712\n        }                                                                                                              // 713\n    }                                                                                                                  // 714\n                                                                                                                       // 715\n    function addWeekParseToken (token, callback) {                                                                     // 716\n        addParseToken(token, function (input, array, config, token) {                                                  // 717\n            config._w = config._w || {};                                                                               // 718\n            callback(input, config._w, config, token);                                                                 // 719\n        });                                                                                                            // 720\n    }                                                                                                                  // 721\n                                                                                                                       // 722\n    function addTimeToArrayFromToken(token, input, config) {                                                           // 723\n        if (input != null && hasOwnProp(tokens, token)) {                                                              // 724\n            tokens[token](input, config._a, config, token);                                                            // 725\n        }                                                                                                              // 726\n    }                                                                                                                  // 727\n                                                                                                                       // 728\n    var YEAR = 0;                                                                                                      // 729\n    var MONTH = 1;                                                                                                     // 730\n    var DATE = 2;                                                                                                      // 731\n    var HOUR = 3;                                                                                                      // 732\n    var MINUTE = 4;                                                                                                    // 733\n    var SECOND = 5;                                                                                                    // 734\n    var MILLISECOND = 6;                                                                                               // 735\n    var WEEK = 7;                                                                                                      // 736\n    var WEEKDAY = 8;                                                                                                   // 737\n                                                                                                                       // 738\n    var indexOf;                                                                                                       // 739\n                                                                                                                       // 740\n    if (Array.prototype.indexOf) {                                                                                     // 741\n        indexOf = Array.prototype.indexOf;                                                                             // 742\n    } else {                                                                                                           // 743\n        indexOf = function (o) {                                                                                       // 744\n            // I know                                                                                                  // 745\n            var i;                                                                                                     // 746\n            for (i = 0; i < this.length; ++i) {                                                                        // 747\n                if (this[i] === o) {                                                                                   // 748\n                    return i;                                                                                          // 749\n                }                                                                                                      // 750\n            }                                                                                                          // 751\n            return -1;                                                                                                 // 752\n        };                                                                                                             // 753\n    }                                                                                                                  // 754\n                                                                                                                       // 755\n    function daysInMonth(year, month) {                                                                                // 756\n        return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();                                                    // 757\n    }                                                                                                                  // 758\n                                                                                                                       // 759\n    // FORMATTING                                                                                                      // 760\n                                                                                                                       // 761\n    addFormatToken('M', ['MM', 2], 'Mo', function () {                                                                 // 762\n        return this.month() + 1;                                                                                       // 763\n    });                                                                                                                // 764\n                                                                                                                       // 765\n    addFormatToken('MMM', 0, 0, function (format) {                                                                    // 766\n        return this.localeData().monthsShort(this, format);                                                            // 767\n    });                                                                                                                // 768\n                                                                                                                       // 769\n    addFormatToken('MMMM', 0, 0, function (format) {                                                                   // 770\n        return this.localeData().months(this, format);                                                                 // 771\n    });                                                                                                                // 772\n                                                                                                                       // 773\n    // ALIASES                                                                                                         // 774\n                                                                                                                       // 775\n    addUnitAlias('month', 'M');                                                                                        // 776\n                                                                                                                       // 777\n    // PRIORITY                                                                                                        // 778\n                                                                                                                       // 779\n    addUnitPriority('month', 8);                                                                                       // 780\n                                                                                                                       // 781\n    // PARSING                                                                                                         // 782\n                                                                                                                       // 783\n    addRegexToken('M',    match1to2);                                                                                  // 784\n    addRegexToken('MM',   match1to2, match2);                                                                          // 785\n    addRegexToken('MMM',  function (isStrict, locale) {                                                                // 786\n        return locale.monthsShortRegex(isStrict);                                                                      // 787\n    });                                                                                                                // 788\n    addRegexToken('MMMM', function (isStrict, locale) {                                                                // 789\n        return locale.monthsRegex(isStrict);                                                                           // 790\n    });                                                                                                                // 791\n                                                                                                                       // 792\n    addParseToken(['M', 'MM'], function (input, array) {                                                               // 793\n        array[MONTH] = toInt(input) - 1;                                                                               // 794\n    });                                                                                                                // 795\n                                                                                                                       // 796\n    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {                                            // 797\n        var month = config._locale.monthsParse(input, token, config._strict);                                          // 798\n        // if we didn't find a month name, mark the date as invalid.                                                   // 799\n        if (month != null) {                                                                                           // 800\n            array[MONTH] = month;                                                                                      // 801\n        } else {                                                                                                       // 802\n            getParsingFlags(config).invalidMonth = input;                                                              // 803\n        }                                                                                                              // 804\n    });                                                                                                                // 805\n                                                                                                                       // 806\n    // LOCALES                                                                                                         // 807\n                                                                                                                       // 808\n    var MONTHS_IN_FORMAT = /D[oD]?(\\[[^\\[\\]]*\\]|\\s+)+MMMM?/;                                                           // 809\n    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');\n    function localeMonths (m, format) {                                                                                // 811\n        return isArray(this._months) ? this._months[m.month()] :                                                       // 812\n            this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];\n    }                                                                                                                  // 814\n                                                                                                                       // 815\n    var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');                       // 816\n    function localeMonthsShort (m, format) {                                                                           // 817\n        return isArray(this._monthsShort) ? this._monthsShort[m.month()] :                                             // 818\n            this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];                     // 819\n    }                                                                                                                  // 820\n                                                                                                                       // 821\n    function units_month__handleStrictParse(monthName, format, strict) {                                               // 822\n        var i, ii, mom, llc = monthName.toLocaleLowerCase();                                                           // 823\n        if (!this._monthsParse) {                                                                                      // 824\n            // this is not used                                                                                        // 825\n            this._monthsParse = [];                                                                                    // 826\n            this._longMonthsParse = [];                                                                                // 827\n            this._shortMonthsParse = [];                                                                               // 828\n            for (i = 0; i < 12; ++i) {                                                                                 // 829\n                mom = create_utc__createUTC([2000, i]);                                                                // 830\n                this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();                             // 831\n                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();                                   // 832\n            }                                                                                                          // 833\n        }                                                                                                              // 834\n                                                                                                                       // 835\n        if (strict) {                                                                                                  // 836\n            if (format === 'MMM') {                                                                                    // 837\n                ii = indexOf.call(this._shortMonthsParse, llc);                                                        // 838\n                return ii !== -1 ? ii : null;                                                                          // 839\n            } else {                                                                                                   // 840\n                ii = indexOf.call(this._longMonthsParse, llc);                                                         // 841\n                return ii !== -1 ? ii : null;                                                                          // 842\n            }                                                                                                          // 843\n        } else {                                                                                                       // 844\n            if (format === 'MMM') {                                                                                    // 845\n                ii = indexOf.call(this._shortMonthsParse, llc);                                                        // 846\n                if (ii !== -1) {                                                                                       // 847\n                    return ii;                                                                                         // 848\n                }                                                                                                      // 849\n                ii = indexOf.call(this._longMonthsParse, llc);                                                         // 850\n                return ii !== -1 ? ii : null;                                                                          // 851\n            } else {                                                                                                   // 852\n                ii = indexOf.call(this._longMonthsParse, llc);                                                         // 853\n                if (ii !== -1) {                                                                                       // 854\n                    return ii;                                                                                         // 855\n                }                                                                                                      // 856\n                ii = indexOf.call(this._shortMonthsParse, llc);                                                        // 857\n                return ii !== -1 ? ii : null;                                                                          // 858\n            }                                                                                                          // 859\n        }                                                                                                              // 860\n    }                                                                                                                  // 861\n                                                                                                                       // 862\n    function localeMonthsParse (monthName, format, strict) {                                                           // 863\n        var i, mom, regex;                                                                                             // 864\n                                                                                                                       // 865\n        if (this._monthsParseExact) {                                                                                  // 866\n            return units_month__handleStrictParse.call(this, monthName, format, strict);                               // 867\n        }                                                                                                              // 868\n                                                                                                                       // 869\n        if (!this._monthsParse) {                                                                                      // 870\n            this._monthsParse = [];                                                                                    // 871\n            this._longMonthsParse = [];                                                                                // 872\n            this._shortMonthsParse = [];                                                                               // 873\n        }                                                                                                              // 874\n                                                                                                                       // 875\n        // TODO: add sorting                                                                                           // 876\n        // Sorting makes sure if one month (or abbr) is a prefix of another                                            // 877\n        // see sorting in computeMonthsParse                                                                           // 878\n        for (i = 0; i < 12; i++) {                                                                                     // 879\n            // make the regex if we don't have it already                                                              // 880\n            mom = create_utc__createUTC([2000, i]);                                                                    // 881\n            if (strict && !this._longMonthsParse[i]) {                                                                 // 882\n                this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');         // 883\n                this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');   // 884\n            }                                                                                                          // 885\n            if (!strict && !this._monthsParse[i]) {                                                                    // 886\n                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');                                 // 887\n                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');                                        // 888\n            }                                                                                                          // 889\n            // test the regex                                                                                          // 890\n            if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {                             // 891\n                return i;                                                                                              // 892\n            } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {                      // 893\n                return i;                                                                                              // 894\n            } else if (!strict && this._monthsParse[i].test(monthName)) {                                              // 895\n                return i;                                                                                              // 896\n            }                                                                                                          // 897\n        }                                                                                                              // 898\n    }                                                                                                                  // 899\n                                                                                                                       // 900\n    // MOMENTS                                                                                                         // 901\n                                                                                                                       // 902\n    function setMonth (mom, value) {                                                                                   // 903\n        var dayOfMonth;                                                                                                // 904\n                                                                                                                       // 905\n        if (!mom.isValid()) {                                                                                          // 906\n            // No op                                                                                                   // 907\n            return mom;                                                                                                // 908\n        }                                                                                                              // 909\n                                                                                                                       // 910\n        if (typeof value === 'string') {                                                                               // 911\n            if (/^\\d+$/.test(value)) {                                                                                 // 912\n                value = toInt(value);                                                                                  // 913\n            } else {                                                                                                   // 914\n                value = mom.localeData().monthsParse(value);                                                           // 915\n                // TODO: Another silent failure?                                                                       // 916\n                if (typeof value !== 'number') {                                                                       // 917\n                    return mom;                                                                                        // 918\n                }                                                                                                      // 919\n            }                                                                                                          // 920\n        }                                                                                                              // 921\n                                                                                                                       // 922\n        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));                                             // 923\n        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);                                        // 924\n        return mom;                                                                                                    // 925\n    }                                                                                                                  // 926\n                                                                                                                       // 927\n    function getSetMonth (value) {                                                                                     // 928\n        if (value != null) {                                                                                           // 929\n            setMonth(this, value);                                                                                     // 930\n            utils_hooks__hooks.updateOffset(this, true);                                                               // 931\n            return this;                                                                                               // 932\n        } else {                                                                                                       // 933\n            return get_set__get(this, 'Month');                                                                        // 934\n        }                                                                                                              // 935\n    }                                                                                                                  // 936\n                                                                                                                       // 937\n    function getDaysInMonth () {                                                                                       // 938\n        return daysInMonth(this.year(), this.month());                                                                 // 939\n    }                                                                                                                  // 940\n                                                                                                                       // 941\n    var defaultMonthsShortRegex = matchWord;                                                                           // 942\n    function monthsShortRegex (isStrict) {                                                                             // 943\n        if (this._monthsParseExact) {                                                                                  // 944\n            if (!hasOwnProp(this, '_monthsRegex')) {                                                                   // 945\n                computeMonthsParse.call(this);                                                                         // 946\n            }                                                                                                          // 947\n            if (isStrict) {                                                                                            // 948\n                return this._monthsShortStrictRegex;                                                                   // 949\n            } else {                                                                                                   // 950\n                return this._monthsShortRegex;                                                                         // 951\n            }                                                                                                          // 952\n        } else {                                                                                                       // 953\n            if (!hasOwnProp(this, '_monthsShortRegex')) {                                                              // 954\n                this._monthsShortRegex = defaultMonthsShortRegex;                                                      // 955\n            }                                                                                                          // 956\n            return this._monthsShortStrictRegex && isStrict ?                                                          // 957\n                this._monthsShortStrictRegex : this._monthsShortRegex;                                                 // 958\n        }                                                                                                              // 959\n    }                                                                                                                  // 960\n                                                                                                                       // 961\n    var defaultMonthsRegex = matchWord;                                                                                // 962\n    function monthsRegex (isStrict) {                                                                                  // 963\n        if (this._monthsParseExact) {                                                                                  // 964\n            if (!hasOwnProp(this, '_monthsRegex')) {                                                                   // 965\n                computeMonthsParse.call(this);                                                                         // 966\n            }                                                                                                          // 967\n            if (isStrict) {                                                                                            // 968\n                return this._monthsStrictRegex;                                                                        // 969\n            } else {                                                                                                   // 970\n                return this._monthsRegex;                                                                              // 971\n            }                                                                                                          // 972\n        } else {                                                                                                       // 973\n            if (!hasOwnProp(this, '_monthsRegex')) {                                                                   // 974\n                this._monthsRegex = defaultMonthsRegex;                                                                // 975\n            }                                                                                                          // 976\n            return this._monthsStrictRegex && isStrict ?                                                               // 977\n                this._monthsStrictRegex : this._monthsRegex;                                                           // 978\n        }                                                                                                              // 979\n    }                                                                                                                  // 980\n                                                                                                                       // 981\n    function computeMonthsParse () {                                                                                   // 982\n        function cmpLenRev(a, b) {                                                                                     // 983\n            return b.length - a.length;                                                                                // 984\n        }                                                                                                              // 985\n                                                                                                                       // 986\n        var shortPieces = [], longPieces = [], mixedPieces = [],                                                       // 987\n            i, mom;                                                                                                    // 988\n        for (i = 0; i < 12; i++) {                                                                                     // 989\n            // make the regex if we don't have it already                                                              // 990\n            mom = create_utc__createUTC([2000, i]);                                                                    // 991\n            shortPieces.push(this.monthsShort(mom, ''));                                                               // 992\n            longPieces.push(this.months(mom, ''));                                                                     // 993\n            mixedPieces.push(this.months(mom, ''));                                                                    // 994\n            mixedPieces.push(this.monthsShort(mom, ''));                                                               // 995\n        }                                                                                                              // 996\n        // Sorting makes sure if one month (or abbr) is a prefix of another it                                         // 997\n        // will match the longer piece.                                                                                // 998\n        shortPieces.sort(cmpLenRev);                                                                                   // 999\n        longPieces.sort(cmpLenRev);                                                                                    // 1000\n        mixedPieces.sort(cmpLenRev);                                                                                   // 1001\n        for (i = 0; i < 12; i++) {                                                                                     // 1002\n            shortPieces[i] = regexEscape(shortPieces[i]);                                                              // 1003\n            longPieces[i] = regexEscape(longPieces[i]);                                                                // 1004\n        }                                                                                                              // 1005\n        for (i = 0; i < 24; i++) {                                                                                     // 1006\n            mixedPieces[i] = regexEscape(mixedPieces[i]);                                                              // 1007\n        }                                                                                                              // 1008\n                                                                                                                       // 1009\n        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');                                       // 1010\n        this._monthsShortRegex = this._monthsRegex;                                                                    // 1011\n        this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');                                  // 1012\n        this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');                            // 1013\n    }                                                                                                                  // 1014\n                                                                                                                       // 1015\n    // FORMATTING                                                                                                      // 1016\n                                                                                                                       // 1017\n    addFormatToken('Y', 0, 0, function () {                                                                            // 1018\n        var y = this.year();                                                                                           // 1019\n        return y <= 9999 ? '' + y : '+' + y;                                                                           // 1020\n    });                                                                                                                // 1021\n                                                                                                                       // 1022\n    addFormatToken(0, ['YY', 2], 0, function () {                                                                      // 1023\n        return this.year() % 100;                                                                                      // 1024\n    });                                                                                                                // 1025\n                                                                                                                       // 1026\n    addFormatToken(0, ['YYYY',   4],       0, 'year');                                                                 // 1027\n    addFormatToken(0, ['YYYYY',  5],       0, 'year');                                                                 // 1028\n    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');                                                                 // 1029\n                                                                                                                       // 1030\n    // ALIASES                                                                                                         // 1031\n                                                                                                                       // 1032\n    addUnitAlias('year', 'y');                                                                                         // 1033\n                                                                                                                       // 1034\n    // PRIORITIES                                                                                                      // 1035\n                                                                                                                       // 1036\n    addUnitPriority('year', 1);                                                                                        // 1037\n                                                                                                                       // 1038\n    // PARSING                                                                                                         // 1039\n                                                                                                                       // 1040\n    addRegexToken('Y',      matchSigned);                                                                              // 1041\n    addRegexToken('YY',     match1to2, match2);                                                                        // 1042\n    addRegexToken('YYYY',   match1to4, match4);                                                                        // 1043\n    addRegexToken('YYYYY',  match1to6, match6);                                                                        // 1044\n    addRegexToken('YYYYYY', match1to6, match6);                                                                        // 1045\n                                                                                                                       // 1046\n    addParseToken(['YYYYY', 'YYYYYY'], YEAR);                                                                          // 1047\n    addParseToken('YYYY', function (input, array) {                                                                    // 1048\n        array[YEAR] = input.length === 2 ? utils_hooks__hooks.parseTwoDigitYear(input) : toInt(input);                 // 1049\n    });                                                                                                                // 1050\n    addParseToken('YY', function (input, array) {                                                                      // 1051\n        array[YEAR] = utils_hooks__hooks.parseTwoDigitYear(input);                                                     // 1052\n    });                                                                                                                // 1053\n    addParseToken('Y', function (input, array) {                                                                       // 1054\n        array[YEAR] = parseInt(input, 10);                                                                             // 1055\n    });                                                                                                                // 1056\n                                                                                                                       // 1057\n    // HELPERS                                                                                                         // 1058\n                                                                                                                       // 1059\n    function daysInYear(year) {                                                                                        // 1060\n        return isLeapYear(year) ? 366 : 365;                                                                           // 1061\n    }                                                                                                                  // 1062\n                                                                                                                       // 1063\n    function isLeapYear(year) {                                                                                        // 1064\n        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;                                               // 1065\n    }                                                                                                                  // 1066\n                                                                                                                       // 1067\n    // HOOKS                                                                                                           // 1068\n                                                                                                                       // 1069\n    utils_hooks__hooks.parseTwoDigitYear = function (input) {                                                          // 1070\n        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);                                                       // 1071\n    };                                                                                                                 // 1072\n                                                                                                                       // 1073\n    // MOMENTS                                                                                                         // 1074\n                                                                                                                       // 1075\n    var getSetYear = makeGetSet('FullYear', true);                                                                     // 1076\n                                                                                                                       // 1077\n    function getIsLeapYear () {                                                                                        // 1078\n        return isLeapYear(this.year());                                                                                // 1079\n    }                                                                                                                  // 1080\n                                                                                                                       // 1081\n    function createDate (y, m, d, h, M, s, ms) {                                                                       // 1082\n        //can't just apply() to create a date:                                                                         // 1083\n        //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply\n        var date = new Date(y, m, d, h, M, s, ms);                                                                     // 1085\n                                                                                                                       // 1086\n        //the date constructor remaps years 0-99 to 1900-1999                                                          // 1087\n        if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {                                                       // 1088\n            date.setFullYear(y);                                                                                       // 1089\n        }                                                                                                              // 1090\n        return date;                                                                                                   // 1091\n    }                                                                                                                  // 1092\n                                                                                                                       // 1093\n    function createUTCDate (y) {                                                                                       // 1094\n        var date = new Date(Date.UTC.apply(null, arguments));                                                          // 1095\n                                                                                                                       // 1096\n        //the Date.UTC function remaps years 0-99 to 1900-1999                                                         // 1097\n        if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {                                                    // 1098\n            date.setUTCFullYear(y);                                                                                    // 1099\n        }                                                                                                              // 1100\n        return date;                                                                                                   // 1101\n    }                                                                                                                  // 1102\n                                                                                                                       // 1103\n    // start-of-first-week - start-of-year                                                                             // 1104\n    function firstWeekOffset(year, dow, doy) {                                                                         // 1105\n        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)                    // 1106\n            fwd = 7 + dow - doy,                                                                                       // 1107\n            // first-week day local weekday -- which local weekday is fwd                                              // 1108\n            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;                                           // 1109\n                                                                                                                       // 1110\n        return -fwdlw + fwd - 1;                                                                                       // 1111\n    }                                                                                                                  // 1112\n                                                                                                                       // 1113\n    //http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday          // 1114\n    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {                                                       // 1115\n        var localWeekday = (7 + weekday - dow) % 7,                                                                    // 1116\n            weekOffset = firstWeekOffset(year, dow, doy),                                                              // 1117\n            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,                                                // 1118\n            resYear, resDayOfYear;                                                                                     // 1119\n                                                                                                                       // 1120\n        if (dayOfYear <= 0) {                                                                                          // 1121\n            resYear = year - 1;                                                                                        // 1122\n            resDayOfYear = daysInYear(resYear) + dayOfYear;                                                            // 1123\n        } else if (dayOfYear > daysInYear(year)) {                                                                     // 1124\n            resYear = year + 1;                                                                                        // 1125\n            resDayOfYear = dayOfYear - daysInYear(year);                                                               // 1126\n        } else {                                                                                                       // 1127\n            resYear = year;                                                                                            // 1128\n            resDayOfYear = dayOfYear;                                                                                  // 1129\n        }                                                                                                              // 1130\n                                                                                                                       // 1131\n        return {                                                                                                       // 1132\n            year: resYear,                                                                                             // 1133\n            dayOfYear: resDayOfYear                                                                                    // 1134\n        };                                                                                                             // 1135\n    }                                                                                                                  // 1136\n                                                                                                                       // 1137\n    function weekOfYear(mom, dow, doy) {                                                                               // 1138\n        var weekOffset = firstWeekOffset(mom.year(), dow, doy),                                                        // 1139\n            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,                                             // 1140\n            resWeek, resYear;                                                                                          // 1141\n                                                                                                                       // 1142\n        if (week < 1) {                                                                                                // 1143\n            resYear = mom.year() - 1;                                                                                  // 1144\n            resWeek = week + weeksInYear(resYear, dow, doy);                                                           // 1145\n        } else if (week > weeksInYear(mom.year(), dow, doy)) {                                                         // 1146\n            resWeek = week - weeksInYear(mom.year(), dow, doy);                                                        // 1147\n            resYear = mom.year() + 1;                                                                                  // 1148\n        } else {                                                                                                       // 1149\n            resYear = mom.year();                                                                                      // 1150\n            resWeek = week;                                                                                            // 1151\n        }                                                                                                              // 1152\n                                                                                                                       // 1153\n        return {                                                                                                       // 1154\n            week: resWeek,                                                                                             // 1155\n            year: resYear                                                                                              // 1156\n        };                                                                                                             // 1157\n    }                                                                                                                  // 1158\n                                                                                                                       // 1159\n    function weeksInYear(year, dow, doy) {                                                                             // 1160\n        var weekOffset = firstWeekOffset(year, dow, doy),                                                              // 1161\n            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);                                                      // 1162\n        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;                                                   // 1163\n    }                                                                                                                  // 1164\n                                                                                                                       // 1165\n    // FORMATTING                                                                                                      // 1166\n                                                                                                                       // 1167\n    addFormatToken('w', ['ww', 2], 'wo', 'week');                                                                      // 1168\n    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');                                                                   // 1169\n                                                                                                                       // 1170\n    // ALIASES                                                                                                         // 1171\n                                                                                                                       // 1172\n    addUnitAlias('week', 'w');                                                                                         // 1173\n    addUnitAlias('isoWeek', 'W');                                                                                      // 1174\n                                                                                                                       // 1175\n    // PRIORITIES                                                                                                      // 1176\n                                                                                                                       // 1177\n    addUnitPriority('week', 5);                                                                                        // 1178\n    addUnitPriority('isoWeek', 5);                                                                                     // 1179\n                                                                                                                       // 1180\n    // PARSING                                                                                                         // 1181\n                                                                                                                       // 1182\n    addRegexToken('w',  match1to2);                                                                                    // 1183\n    addRegexToken('ww', match1to2, match2);                                                                            // 1184\n    addRegexToken('W',  match1to2);                                                                                    // 1185\n    addRegexToken('WW', match1to2, match2);                                                                            // 1186\n                                                                                                                       // 1187\n    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {                                  // 1188\n        week[token.substr(0, 1)] = toInt(input);                                                                       // 1189\n    });                                                                                                                // 1190\n                                                                                                                       // 1191\n    // HELPERS                                                                                                         // 1192\n                                                                                                                       // 1193\n    // LOCALES                                                                                                         // 1194\n                                                                                                                       // 1195\n    function localeWeek (mom) {                                                                                        // 1196\n        return weekOfYear(mom, this._week.dow, this._week.doy).week;                                                   // 1197\n    }                                                                                                                  // 1198\n                                                                                                                       // 1199\n    var defaultLocaleWeek = {                                                                                          // 1200\n        dow : 0, // Sunday is the first day of the week.                                                               // 1201\n        doy : 6  // The week that contains Jan 1st is the first week of the year.                                      // 1202\n    };                                                                                                                 // 1203\n                                                                                                                       // 1204\n    function localeFirstDayOfWeek () {                                                                                 // 1205\n        return this._week.dow;                                                                                         // 1206\n    }                                                                                                                  // 1207\n                                                                                                                       // 1208\n    function localeFirstDayOfYear () {                                                                                 // 1209\n        return this._week.doy;                                                                                         // 1210\n    }                                                                                                                  // 1211\n                                                                                                                       // 1212\n    // MOMENTS                                                                                                         // 1213\n                                                                                                                       // 1214\n    function getSetWeek (input) {                                                                                      // 1215\n        var week = this.localeData().week(this);                                                                       // 1216\n        return input == null ? week : this.add((input - week) * 7, 'd');                                               // 1217\n    }                                                                                                                  // 1218\n                                                                                                                       // 1219\n    function getSetISOWeek (input) {                                                                                   // 1220\n        var week = weekOfYear(this, 1, 4).week;                                                                        // 1221\n        return input == null ? week : this.add((input - week) * 7, 'd');                                               // 1222\n    }                                                                                                                  // 1223\n                                                                                                                       // 1224\n    // FORMATTING                                                                                                      // 1225\n                                                                                                                       // 1226\n    addFormatToken('d', 0, 'do', 'day');                                                                               // 1227\n                                                                                                                       // 1228\n    addFormatToken('dd', 0, 0, function (format) {                                                                     // 1229\n        return this.localeData().weekdaysMin(this, format);                                                            // 1230\n    });                                                                                                                // 1231\n                                                                                                                       // 1232\n    addFormatToken('ddd', 0, 0, function (format) {                                                                    // 1233\n        return this.localeData().weekdaysShort(this, format);                                                          // 1234\n    });                                                                                                                // 1235\n                                                                                                                       // 1236\n    addFormatToken('dddd', 0, 0, function (format) {                                                                   // 1237\n        return this.localeData().weekdays(this, format);                                                               // 1238\n    });                                                                                                                // 1239\n                                                                                                                       // 1240\n    addFormatToken('e', 0, 0, 'weekday');                                                                              // 1241\n    addFormatToken('E', 0, 0, 'isoWeekday');                                                                           // 1242\n                                                                                                                       // 1243\n    // ALIASES                                                                                                         // 1244\n                                                                                                                       // 1245\n    addUnitAlias('day', 'd');                                                                                          // 1246\n    addUnitAlias('weekday', 'e');                                                                                      // 1247\n    addUnitAlias('isoWeekday', 'E');                                                                                   // 1248\n                                                                                                                       // 1249\n    // PRIORITY                                                                                                        // 1250\n    addUnitPriority('day', 11);                                                                                        // 1251\n    addUnitPriority('weekday', 11);                                                                                    // 1252\n    addUnitPriority('isoWeekday', 11);                                                                                 // 1253\n                                                                                                                       // 1254\n    // PARSING                                                                                                         // 1255\n                                                                                                                       // 1256\n    addRegexToken('d',    match1to2);                                                                                  // 1257\n    addRegexToken('e',    match1to2);                                                                                  // 1258\n    addRegexToken('E',    match1to2);                                                                                  // 1259\n    addRegexToken('dd',   function (isStrict, locale) {                                                                // 1260\n        return locale.weekdaysMinRegex(isStrict);                                                                      // 1261\n    });                                                                                                                // 1262\n    addRegexToken('ddd',   function (isStrict, locale) {                                                               // 1263\n        return locale.weekdaysShortRegex(isStrict);                                                                    // 1264\n    });                                                                                                                // 1265\n    addRegexToken('dddd',   function (isStrict, locale) {                                                              // 1266\n        return locale.weekdaysRegex(isStrict);                                                                         // 1267\n    });                                                                                                                // 1268\n                                                                                                                       // 1269\n    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {                                   // 1270\n        var weekday = config._locale.weekdaysParse(input, token, config._strict);                                      // 1271\n        // if we didn't get a weekday name, mark the date as invalid                                                   // 1272\n        if (weekday != null) {                                                                                         // 1273\n            week.d = weekday;                                                                                          // 1274\n        } else {                                                                                                       // 1275\n            getParsingFlags(config).invalidWeekday = input;                                                            // 1276\n        }                                                                                                              // 1277\n    });                                                                                                                // 1278\n                                                                                                                       // 1279\n    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {                                         // 1280\n        week[token] = toInt(input);                                                                                    // 1281\n    });                                                                                                                // 1282\n                                                                                                                       // 1283\n    // HELPERS                                                                                                         // 1284\n                                                                                                                       // 1285\n    function parseWeekday(input, locale) {                                                                             // 1286\n        if (typeof input !== 'string') {                                                                               // 1287\n            return input;                                                                                              // 1288\n        }                                                                                                              // 1289\n                                                                                                                       // 1290\n        if (!isNaN(input)) {                                                                                           // 1291\n            return parseInt(input, 10);                                                                                // 1292\n        }                                                                                                              // 1293\n                                                                                                                       // 1294\n        input = locale.weekdaysParse(input);                                                                           // 1295\n        if (typeof input === 'number') {                                                                               // 1296\n            return input;                                                                                              // 1297\n        }                                                                                                              // 1298\n                                                                                                                       // 1299\n        return null;                                                                                                   // 1300\n    }                                                                                                                  // 1301\n                                                                                                                       // 1302\n    function parseIsoWeekday(input, locale) {                                                                          // 1303\n        if (typeof input === 'string') {                                                                               // 1304\n            return locale.weekdaysParse(input) % 7 || 7;                                                               // 1305\n        }                                                                                                              // 1306\n        return isNaN(input) ? null : input;                                                                            // 1307\n    }                                                                                                                  // 1308\n                                                                                                                       // 1309\n    // LOCALES                                                                                                         // 1310\n                                                                                                                       // 1311\n    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');                 // 1312\n    function localeWeekdays (m, format) {                                                                              // 1313\n        return isArray(this._weekdays) ? this._weekdays[m.day()] :                                                     // 1314\n            this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];                   // 1315\n    }                                                                                                                  // 1316\n                                                                                                                       // 1317\n    var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');                                         // 1318\n    function localeWeekdaysShort (m) {                                                                                 // 1319\n        return this._weekdaysShort[m.day()];                                                                           // 1320\n    }                                                                                                                  // 1321\n                                                                                                                       // 1322\n    var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');                                                  // 1323\n    function localeWeekdaysMin (m) {                                                                                   // 1324\n        return this._weekdaysMin[m.day()];                                                                             // 1325\n    }                                                                                                                  // 1326\n                                                                                                                       // 1327\n    function day_of_week__handleStrictParse(weekdayName, format, strict) {                                             // 1328\n        var i, ii, mom, llc = weekdayName.toLocaleLowerCase();                                                         // 1329\n        if (!this._weekdaysParse) {                                                                                    // 1330\n            this._weekdaysParse = [];                                                                                  // 1331\n            this._shortWeekdaysParse = [];                                                                             // 1332\n            this._minWeekdaysParse = [];                                                                               // 1333\n                                                                                                                       // 1334\n            for (i = 0; i < 7; ++i) {                                                                                  // 1335\n                mom = create_utc__createUTC([2000, 1]).day(i);                                                         // 1336\n                this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();                             // 1337\n                this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();                         // 1338\n                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();                                   // 1339\n            }                                                                                                          // 1340\n        }                                                                                                              // 1341\n                                                                                                                       // 1342\n        if (strict) {                                                                                                  // 1343\n            if (format === 'dddd') {                                                                                   // 1344\n                ii = indexOf.call(this._weekdaysParse, llc);                                                           // 1345\n                return ii !== -1 ? ii : null;                                                                          // 1346\n            } else if (format === 'ddd') {                                                                             // 1347\n                ii = indexOf.call(this._shortWeekdaysParse, llc);                                                      // 1348\n                return ii !== -1 ? ii : null;                                                                          // 1349\n            } else {                                                                                                   // 1350\n                ii = indexOf.call(this._minWeekdaysParse, llc);                                                        // 1351\n                return ii !== -1 ? ii : null;                                                                          // 1352\n            }                                                                                                          // 1353\n        } else {                                                                                                       // 1354\n            if (format === 'dddd') {                                                                                   // 1355\n                ii = indexOf.call(this._weekdaysParse, llc);                                                           // 1356\n                if (ii !== -1) {                                                                                       // 1357\n                    return ii;                                                                                         // 1358\n                }                                                                                                      // 1359\n                ii = indexOf.call(this._shortWeekdaysParse, llc);                                                      // 1360\n                if (ii !== -1) {                                                                                       // 1361\n                    return ii;                                                                                         // 1362\n                }                                                                                                      // 1363\n                ii = indexOf.call(this._minWeekdaysParse, llc);                                                        // 1364\n                return ii !== -1 ? ii : null;                                                                          // 1365\n            } else if (format === 'ddd') {                                                                             // 1366\n                ii = indexOf.call(this._shortWeekdaysParse, llc);                                                      // 1367\n                if (ii !== -1) {                                                                                       // 1368\n                    return ii;                                                                                         // 1369\n                }                                                                                                      // 1370\n                ii = indexOf.call(this._weekdaysParse, llc);                                                           // 1371\n                if (ii !== -1) {                                                                                       // 1372\n                    return ii;                                                                                         // 1373\n                }                                                                                                      // 1374\n                ii = indexOf.call(this._minWeekdaysParse, llc);                                                        // 1375\n                return ii !== -1 ? ii : null;                                                                          // 1376\n            } else {                                                                                                   // 1377\n                ii = indexOf.call(this._minWeekdaysParse, llc);                                                        // 1378\n                if (ii !== -1) {                                                                                       // 1379\n                    return ii;                                                                                         // 1380\n                }                                                                                                      // 1381\n                ii = indexOf.call(this._weekdaysParse, llc);                                                           // 1382\n                if (ii !== -1) {                                                                                       // 1383\n                    return ii;                                                                                         // 1384\n                }                                                                                                      // 1385\n                ii = indexOf.call(this._shortWeekdaysParse, llc);                                                      // 1386\n                return ii !== -1 ? ii : null;                                                                          // 1387\n            }                                                                                                          // 1388\n        }                                                                                                              // 1389\n    }                                                                                                                  // 1390\n                                                                                                                       // 1391\n    function localeWeekdaysParse (weekdayName, format, strict) {                                                       // 1392\n        var i, mom, regex;                                                                                             // 1393\n                                                                                                                       // 1394\n        if (this._weekdaysParseExact) {                                                                                // 1395\n            return day_of_week__handleStrictParse.call(this, weekdayName, format, strict);                             // 1396\n        }                                                                                                              // 1397\n                                                                                                                       // 1398\n        if (!this._weekdaysParse) {                                                                                    // 1399\n            this._weekdaysParse = [];                                                                                  // 1400\n            this._minWeekdaysParse = [];                                                                               // 1401\n            this._shortWeekdaysParse = [];                                                                             // 1402\n            this._fullWeekdaysParse = [];                                                                              // 1403\n        }                                                                                                              // 1404\n                                                                                                                       // 1405\n        for (i = 0; i < 7; i++) {                                                                                      // 1406\n            // make the regex if we don't have it already                                                              // 1407\n                                                                                                                       // 1408\n            mom = create_utc__createUTC([2000, 1]).day(i);                                                             // 1409\n            if (strict && !this._fullWeekdaysParse[i]) {                                                               // 1410\n                this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\\.?') + '$', 'i');  // 1411\n                this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$', 'i');\n                this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$', 'i');\n            }                                                                                                          // 1414\n            if (!this._weekdaysParse[i]) {                                                                             // 1415\n                regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');\n                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');                                      // 1417\n            }                                                                                                          // 1418\n            // test the regex                                                                                          // 1419\n            if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {                         // 1420\n                return i;                                                                                              // 1421\n            } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {                  // 1422\n                return i;                                                                                              // 1423\n            } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {                     // 1424\n                return i;                                                                                              // 1425\n            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {                                          // 1426\n                return i;                                                                                              // 1427\n            }                                                                                                          // 1428\n        }                                                                                                              // 1429\n    }                                                                                                                  // 1430\n                                                                                                                       // 1431\n    // MOMENTS                                                                                                         // 1432\n                                                                                                                       // 1433\n    function getSetDayOfWeek (input) {                                                                                 // 1434\n        if (!this.isValid()) {                                                                                         // 1435\n            return input != null ? this : NaN;                                                                         // 1436\n        }                                                                                                              // 1437\n        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();                                                // 1438\n        if (input != null) {                                                                                           // 1439\n            input = parseWeekday(input, this.localeData());                                                            // 1440\n            return this.add(input - day, 'd');                                                                         // 1441\n        } else {                                                                                                       // 1442\n            return day;                                                                                                // 1443\n        }                                                                                                              // 1444\n    }                                                                                                                  // 1445\n                                                                                                                       // 1446\n    function getSetLocaleDayOfWeek (input) {                                                                           // 1447\n        if (!this.isValid()) {                                                                                         // 1448\n            return input != null ? this : NaN;                                                                         // 1449\n        }                                                                                                              // 1450\n        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;                                              // 1451\n        return input == null ? weekday : this.add(input - weekday, 'd');                                               // 1452\n    }                                                                                                                  // 1453\n                                                                                                                       // 1454\n    function getSetISODayOfWeek (input) {                                                                              // 1455\n        if (!this.isValid()) {                                                                                         // 1456\n            return input != null ? this : NaN;                                                                         // 1457\n        }                                                                                                              // 1458\n                                                                                                                       // 1459\n        // behaves the same as moment#day except                                                                       // 1460\n        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)                                              // 1461\n        // as a setter, sunday should belong to the previous week.                                                     // 1462\n                                                                                                                       // 1463\n        if (input != null) {                                                                                           // 1464\n            var weekday = parseIsoWeekday(input, this.localeData());                                                   // 1465\n            return this.day(this.day() % 7 ? weekday : weekday - 7);                                                   // 1466\n        } else {                                                                                                       // 1467\n            return this.day() || 7;                                                                                    // 1468\n        }                                                                                                              // 1469\n    }                                                                                                                  // 1470\n                                                                                                                       // 1471\n    var defaultWeekdaysRegex = matchWord;                                                                              // 1472\n    function weekdaysRegex (isStrict) {                                                                                // 1473\n        if (this._weekdaysParseExact) {                                                                                // 1474\n            if (!hasOwnProp(this, '_weekdaysRegex')) {                                                                 // 1475\n                computeWeekdaysParse.call(this);                                                                       // 1476\n            }                                                                                                          // 1477\n            if (isStrict) {                                                                                            // 1478\n                return this._weekdaysStrictRegex;                                                                      // 1479\n            } else {                                                                                                   // 1480\n                return this._weekdaysRegex;                                                                            // 1481\n            }                                                                                                          // 1482\n        } else {                                                                                                       // 1483\n            if (!hasOwnProp(this, '_weekdaysRegex')) {                                                                 // 1484\n                this._weekdaysRegex = defaultWeekdaysRegex;                                                            // 1485\n            }                                                                                                          // 1486\n            return this._weekdaysStrictRegex && isStrict ?                                                             // 1487\n                this._weekdaysStrictRegex : this._weekdaysRegex;                                                       // 1488\n        }                                                                                                              // 1489\n    }                                                                                                                  // 1490\n                                                                                                                       // 1491\n    var defaultWeekdaysShortRegex = matchWord;                                                                         // 1492\n    function weekdaysShortRegex (isStrict) {                                                                           // 1493\n        if (this._weekdaysParseExact) {                                                                                // 1494\n            if (!hasOwnProp(this, '_weekdaysRegex')) {                                                                 // 1495\n                computeWeekdaysParse.call(this);                                                                       // 1496\n            }                                                                                                          // 1497\n            if (isStrict) {                                                                                            // 1498\n                return this._weekdaysShortStrictRegex;                                                                 // 1499\n            } else {                                                                                                   // 1500\n                return this._weekdaysShortRegex;                                                                       // 1501\n            }                                                                                                          // 1502\n        } else {                                                                                                       // 1503\n            if (!hasOwnProp(this, '_weekdaysShortRegex')) {                                                            // 1504\n                this._weekdaysShortRegex = defaultWeekdaysShortRegex;                                                  // 1505\n            }                                                                                                          // 1506\n            return this._weekdaysShortStrictRegex && isStrict ?                                                        // 1507\n                this._weekdaysShortStrictRegex : this._weekdaysShortRegex;                                             // 1508\n        }                                                                                                              // 1509\n    }                                                                                                                  // 1510\n                                                                                                                       // 1511\n    var defaultWeekdaysMinRegex = matchWord;                                                                           // 1512\n    function weekdaysMinRegex (isStrict) {                                                                             // 1513\n        if (this._weekdaysParseExact) {                                                                                // 1514\n            if (!hasOwnProp(this, '_weekdaysRegex')) {                                                                 // 1515\n                computeWeekdaysParse.call(this);                                                                       // 1516\n            }                                                                                                          // 1517\n            if (isStrict) {                                                                                            // 1518\n                return this._weekdaysMinStrictRegex;                                                                   // 1519\n            } else {                                                                                                   // 1520\n                return this._weekdaysMinRegex;                                                                         // 1521\n            }                                                                                                          // 1522\n        } else {                                                                                                       // 1523\n            if (!hasOwnProp(this, '_weekdaysMinRegex')) {                                                              // 1524\n                this._weekdaysMinRegex = defaultWeekdaysMinRegex;                                                      // 1525\n            }                                                                                                          // 1526\n            return this._weekdaysMinStrictRegex && isStrict ?                                                          // 1527\n                this._weekdaysMinStrictRegex : this._weekdaysMinRegex;                                                 // 1528\n        }                                                                                                              // 1529\n    }                                                                                                                  // 1530\n                                                                                                                       // 1531\n                                                                                                                       // 1532\n    function computeWeekdaysParse () {                                                                                 // 1533\n        function cmpLenRev(a, b) {                                                                                     // 1534\n            return b.length - a.length;                                                                                // 1535\n        }                                                                                                              // 1536\n                                                                                                                       // 1537\n        var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],                                       // 1538\n            i, mom, minp, shortp, longp;                                                                               // 1539\n        for (i = 0; i < 7; i++) {                                                                                      // 1540\n            // make the regex if we don't have it already                                                              // 1541\n            mom = create_utc__createUTC([2000, 1]).day(i);                                                             // 1542\n            minp = this.weekdaysMin(mom, '');                                                                          // 1543\n            shortp = this.weekdaysShort(mom, '');                                                                      // 1544\n            longp = this.weekdays(mom, '');                                                                            // 1545\n            minPieces.push(minp);                                                                                      // 1546\n            shortPieces.push(shortp);                                                                                  // 1547\n            longPieces.push(longp);                                                                                    // 1548\n            mixedPieces.push(minp);                                                                                    // 1549\n            mixedPieces.push(shortp);                                                                                  // 1550\n            mixedPieces.push(longp);                                                                                   // 1551\n        }                                                                                                              // 1552\n        // Sorting makes sure if one weekday (or abbr) is a prefix of another it                                       // 1553\n        // will match the longer piece.                                                                                // 1554\n        minPieces.sort(cmpLenRev);                                                                                     // 1555\n        shortPieces.sort(cmpLenRev);                                                                                   // 1556\n        longPieces.sort(cmpLenRev);                                                                                    // 1557\n        mixedPieces.sort(cmpLenRev);                                                                                   // 1558\n        for (i = 0; i < 7; i++) {                                                                                      // 1559\n            shortPieces[i] = regexEscape(shortPieces[i]);                                                              // 1560\n            longPieces[i] = regexEscape(longPieces[i]);                                                                // 1561\n            mixedPieces[i] = regexEscape(mixedPieces[i]);                                                              // 1562\n        }                                                                                                              // 1563\n                                                                                                                       // 1564\n        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');                                     // 1565\n        this._weekdaysShortRegex = this._weekdaysRegex;                                                                // 1566\n        this._weekdaysMinRegex = this._weekdaysRegex;                                                                  // 1567\n                                                                                                                       // 1568\n        this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');                                // 1569\n        this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');                          // 1570\n        this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');                              // 1571\n    }                                                                                                                  // 1572\n                                                                                                                       // 1573\n    // FORMATTING                                                                                                      // 1574\n                                                                                                                       // 1575\n    function hFormat() {                                                                                               // 1576\n        return this.hours() % 12 || 12;                                                                                // 1577\n    }                                                                                                                  // 1578\n                                                                                                                       // 1579\n    function kFormat() {                                                                                               // 1580\n        return this.hours() || 24;                                                                                     // 1581\n    }                                                                                                                  // 1582\n                                                                                                                       // 1583\n    addFormatToken('H', ['HH', 2], 0, 'hour');                                                                         // 1584\n    addFormatToken('h', ['hh', 2], 0, hFormat);                                                                        // 1585\n    addFormatToken('k', ['kk', 2], 0, kFormat);                                                                        // 1586\n                                                                                                                       // 1587\n    addFormatToken('hmm', 0, 0, function () {                                                                          // 1588\n        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);                                                 // 1589\n    });                                                                                                                // 1590\n                                                                                                                       // 1591\n    addFormatToken('hmmss', 0, 0, function () {                                                                        // 1592\n        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +                                                // 1593\n            zeroFill(this.seconds(), 2);                                                                               // 1594\n    });                                                                                                                // 1595\n                                                                                                                       // 1596\n    addFormatToken('Hmm', 0, 0, function () {                                                                          // 1597\n        return '' + this.hours() + zeroFill(this.minutes(), 2);                                                        // 1598\n    });                                                                                                                // 1599\n                                                                                                                       // 1600\n    addFormatToken('Hmmss', 0, 0, function () {                                                                        // 1601\n        return '' + this.hours() + zeroFill(this.minutes(), 2) +                                                       // 1602\n            zeroFill(this.seconds(), 2);                                                                               // 1603\n    });                                                                                                                // 1604\n                                                                                                                       // 1605\n    function meridiem (token, lowercase) {                                                                             // 1606\n        addFormatToken(token, 0, 0, function () {                                                                      // 1607\n            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);                                // 1608\n        });                                                                                                            // 1609\n    }                                                                                                                  // 1610\n                                                                                                                       // 1611\n    meridiem('a', true);                                                                                               // 1612\n    meridiem('A', false);                                                                                              // 1613\n                                                                                                                       // 1614\n    // ALIASES                                                                                                         // 1615\n                                                                                                                       // 1616\n    addUnitAlias('hour', 'h');                                                                                         // 1617\n                                                                                                                       // 1618\n    // PRIORITY                                                                                                        // 1619\n    addUnitPriority('hour', 13);                                                                                       // 1620\n                                                                                                                       // 1621\n    // PARSING                                                                                                         // 1622\n                                                                                                                       // 1623\n    function matchMeridiem (isStrict, locale) {                                                                        // 1624\n        return locale._meridiemParse;                                                                                  // 1625\n    }                                                                                                                  // 1626\n                                                                                                                       // 1627\n    addRegexToken('a',  matchMeridiem);                                                                                // 1628\n    addRegexToken('A',  matchMeridiem);                                                                                // 1629\n    addRegexToken('H',  match1to2);                                                                                    // 1630\n    addRegexToken('h',  match1to2);                                                                                    // 1631\n    addRegexToken('HH', match1to2, match2);                                                                            // 1632\n    addRegexToken('hh', match1to2, match2);                                                                            // 1633\n                                                                                                                       // 1634\n    addRegexToken('hmm', match3to4);                                                                                   // 1635\n    addRegexToken('hmmss', match5to6);                                                                                 // 1636\n    addRegexToken('Hmm', match3to4);                                                                                   // 1637\n    addRegexToken('Hmmss', match5to6);                                                                                 // 1638\n                                                                                                                       // 1639\n    addParseToken(['H', 'HH'], HOUR);                                                                                  // 1640\n    addParseToken(['a', 'A'], function (input, array, config) {                                                        // 1641\n        config._isPm = config._locale.isPM(input);                                                                     // 1642\n        config._meridiem = input;                                                                                      // 1643\n    });                                                                                                                // 1644\n    addParseToken(['h', 'hh'], function (input, array, config) {                                                       // 1645\n        array[HOUR] = toInt(input);                                                                                    // 1646\n        getParsingFlags(config).bigHour = true;                                                                        // 1647\n    });                                                                                                                // 1648\n    addParseToken('hmm', function (input, array, config) {                                                             // 1649\n        var pos = input.length - 2;                                                                                    // 1650\n        array[HOUR] = toInt(input.substr(0, pos));                                                                     // 1651\n        array[MINUTE] = toInt(input.substr(pos));                                                                      // 1652\n        getParsingFlags(config).bigHour = true;                                                                        // 1653\n    });                                                                                                                // 1654\n    addParseToken('hmmss', function (input, array, config) {                                                           // 1655\n        var pos1 = input.length - 4;                                                                                   // 1656\n        var pos2 = input.length - 2;                                                                                   // 1657\n        array[HOUR] = toInt(input.substr(0, pos1));                                                                    // 1658\n        array[MINUTE] = toInt(input.substr(pos1, 2));                                                                  // 1659\n        array[SECOND] = toInt(input.substr(pos2));                                                                     // 1660\n        getParsingFlags(config).bigHour = true;                                                                        // 1661\n    });                                                                                                                // 1662\n    addParseToken('Hmm', function (input, array, config) {                                                             // 1663\n        var pos = input.length - 2;                                                                                    // 1664\n        array[HOUR] = toInt(input.substr(0, pos));                                                                     // 1665\n        array[MINUTE] = toInt(input.substr(pos));                                                                      // 1666\n    });                                                                                                                // 1667\n    addParseToken('Hmmss', function (input, array, config) {                                                           // 1668\n        var pos1 = input.length - 4;                                                                                   // 1669\n        var pos2 = input.length - 2;                                                                                   // 1670\n        array[HOUR] = toInt(input.substr(0, pos1));                                                                    // 1671\n        array[MINUTE] = toInt(input.substr(pos1, 2));                                                                  // 1672\n        array[SECOND] = toInt(input.substr(pos2));                                                                     // 1673\n    });                                                                                                                // 1674\n                                                                                                                       // 1675\n    // LOCALES                                                                                                         // 1676\n                                                                                                                       // 1677\n    function localeIsPM (input) {                                                                                      // 1678\n        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays                             // 1679\n        // Using charAt should be more compatible.                                                                     // 1680\n        return ((input + '').toLowerCase().charAt(0) === 'p');                                                         // 1681\n    }                                                                                                                  // 1682\n                                                                                                                       // 1683\n    var defaultLocaleMeridiemParse = /[ap]\\.?m?\\.?/i;                                                                  // 1684\n    function localeMeridiem (hours, minutes, isLower) {                                                                // 1685\n        if (hours > 11) {                                                                                              // 1686\n            return isLower ? 'pm' : 'PM';                                                                              // 1687\n        } else {                                                                                                       // 1688\n            return isLower ? 'am' : 'AM';                                                                              // 1689\n        }                                                                                                              // 1690\n    }                                                                                                                  // 1691\n                                                                                                                       // 1692\n                                                                                                                       // 1693\n    // MOMENTS                                                                                                         // 1694\n                                                                                                                       // 1695\n    // Setting the hour should keep the time, because the user explicitly                                              // 1696\n    // specified which hour he wants. So trying to maintain the same hour (in                                          // 1697\n    // a new timezone) makes sense. Adding/subtracting hours does not follow                                           // 1698\n    // this rule.                                                                                                      // 1699\n    var getSetHour = makeGetSet('Hours', true);                                                                        // 1700\n                                                                                                                       // 1701\n    var baseConfig = {                                                                                                 // 1702\n        calendar: defaultCalendar,                                                                                     // 1703\n        longDateFormat: defaultLongDateFormat,                                                                         // 1704\n        invalidDate: defaultInvalidDate,                                                                               // 1705\n        ordinal: defaultOrdinal,                                                                                       // 1706\n        ordinalParse: defaultOrdinalParse,                                                                             // 1707\n        relativeTime: defaultRelativeTime,                                                                             // 1708\n                                                                                                                       // 1709\n        months: defaultLocaleMonths,                                                                                   // 1710\n        monthsShort: defaultLocaleMonthsShort,                                                                         // 1711\n                                                                                                                       // 1712\n        week: defaultLocaleWeek,                                                                                       // 1713\n                                                                                                                       // 1714\n        weekdays: defaultLocaleWeekdays,                                                                               // 1715\n        weekdaysMin: defaultLocaleWeekdaysMin,                                                                         // 1716\n        weekdaysShort: defaultLocaleWeekdaysShort,                                                                     // 1717\n                                                                                                                       // 1718\n        meridiemParse: defaultLocaleMeridiemParse                                                                      // 1719\n    };                                                                                                                 // 1720\n                                                                                                                       // 1721\n    // internal storage for locale config files                                                                        // 1722\n    var locales = {};                                                                                                  // 1723\n    var globalLocale;                                                                                                  // 1724\n                                                                                                                       // 1725\n    function normalizeLocale(key) {                                                                                    // 1726\n        return key ? key.toLowerCase().replace('_', '-') : key;                                                        // 1727\n    }                                                                                                                  // 1728\n                                                                                                                       // 1729\n    // pick the locale from the array                                                                                  // 1730\n    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each                       // 1731\n    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root\n    function chooseLocale(names) {                                                                                     // 1733\n        var i = 0, j, next, locale, split;                                                                             // 1734\n                                                                                                                       // 1735\n        while (i < names.length) {                                                                                     // 1736\n            split = normalizeLocale(names[i]).split('-');                                                              // 1737\n            j = split.length;                                                                                          // 1738\n            next = normalizeLocale(names[i + 1]);                                                                      // 1739\n            next = next ? next.split('-') : null;                                                                      // 1740\n            while (j > 0) {                                                                                            // 1741\n                locale = loadLocale(split.slice(0, j).join('-'));                                                      // 1742\n                if (locale) {                                                                                          // 1743\n                    return locale;                                                                                     // 1744\n                }                                                                                                      // 1745\n                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {                           // 1746\n                    //the next array item is better than a shallower substring of this one                             // 1747\n                    break;                                                                                             // 1748\n                }                                                                                                      // 1749\n                j--;                                                                                                   // 1750\n            }                                                                                                          // 1751\n            i++;                                                                                                       // 1752\n        }                                                                                                              // 1753\n        return null;                                                                                                   // 1754\n    }                                                                                                                  // 1755\n                                                                                                                       // 1756\n    function loadLocale(name) {                                                                                        // 1757\n        var oldLocale = null;                                                                                          // 1758\n        // TODO: Find a better way to register and load all the locales in Node                                        // 1759\n        if (!locales[name] && (typeof module !== 'undefined') &&                                                       // 1760\n                module && module.exports) {                                                                            // 1761\n            try {                                                                                                      // 1762\n                oldLocale = globalLocale._abbr;                                                                        // 1763\n                require('./locale/' + name);                                                                           // 1764\n                // because defineLocale currently also sets the global locale, we                                      // 1765\n                // want to undo that for lazy loaded locales                                                           // 1766\n                locale_locales__getSetGlobalLocale(oldLocale);                                                         // 1767\n            } catch (e) { }                                                                                            // 1768\n        }                                                                                                              // 1769\n        return locales[name];                                                                                          // 1770\n    }                                                                                                                  // 1771\n                                                                                                                       // 1772\n    // This function will load locale and then set the global locale.  If                                              // 1773\n    // no arguments are passed in, it will simply return the current global                                            // 1774\n    // locale key.                                                                                                     // 1775\n    function locale_locales__getSetGlobalLocale (key, values) {                                                        // 1776\n        var data;                                                                                                      // 1777\n        if (key) {                                                                                                     // 1778\n            if (isUndefined(values)) {                                                                                 // 1779\n                data = locale_locales__getLocale(key);                                                                 // 1780\n            }                                                                                                          // 1781\n            else {                                                                                                     // 1782\n                data = defineLocale(key, values);                                                                      // 1783\n            }                                                                                                          // 1784\n                                                                                                                       // 1785\n            if (data) {                                                                                                // 1786\n                // moment.duration._locale = moment._locale = data;                                                    // 1787\n                globalLocale = data;                                                                                   // 1788\n            }                                                                                                          // 1789\n        }                                                                                                              // 1790\n                                                                                                                       // 1791\n        return globalLocale._abbr;                                                                                     // 1792\n    }                                                                                                                  // 1793\n                                                                                                                       // 1794\n    function defineLocale (name, config) {                                                                             // 1795\n        if (config !== null) {                                                                                         // 1796\n            var parentConfig = baseConfig;                                                                             // 1797\n            config.abbr = name;                                                                                        // 1798\n            if (locales[name] != null) {                                                                               // 1799\n                deprecateSimple('defineLocaleOverride',                                                                // 1800\n                        'use moment.updateLocale(localeName, config) to change ' +                                     // 1801\n                        'an existing locale. moment.defineLocale(localeName, ' +                                       // 1802\n                        'config) should only be used for creating a new locale ' +                                     // 1803\n                        'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');                    // 1804\n                parentConfig = locales[name]._config;                                                                  // 1805\n            } else if (config.parentLocale != null) {                                                                  // 1806\n                if (locales[config.parentLocale] != null) {                                                            // 1807\n                    parentConfig = locales[config.parentLocale]._config;                                               // 1808\n                } else {                                                                                               // 1809\n                    // treat as if there is no base config                                                             // 1810\n                    deprecateSimple('parentLocaleUndefined',                                                           // 1811\n                            'specified parentLocale is not defined yet. See http://momentjs.com/guides/#/warnings/parent-locale/');\n                }                                                                                                      // 1813\n            }                                                                                                          // 1814\n            locales[name] = new Locale(mergeConfigs(parentConfig, config));                                            // 1815\n                                                                                                                       // 1816\n            // backwards compat for now: also set the locale                                                           // 1817\n            locale_locales__getSetGlobalLocale(name);                                                                  // 1818\n                                                                                                                       // 1819\n            return locales[name];                                                                                      // 1820\n        } else {                                                                                                       // 1821\n            // useful for testing                                                                                      // 1822\n            delete locales[name];                                                                                      // 1823\n            return null;                                                                                               // 1824\n        }                                                                                                              // 1825\n    }                                                                                                                  // 1826\n                                                                                                                       // 1827\n    function updateLocale(name, config) {                                                                              // 1828\n        if (config != null) {                                                                                          // 1829\n            var locale, parentConfig = baseConfig;                                                                     // 1830\n            // MERGE                                                                                                   // 1831\n            if (locales[name] != null) {                                                                               // 1832\n                parentConfig = locales[name]._config;                                                                  // 1833\n            }                                                                                                          // 1834\n            config = mergeConfigs(parentConfig, config);                                                               // 1835\n            locale = new Locale(config);                                                                               // 1836\n            locale.parentLocale = locales[name];                                                                       // 1837\n            locales[name] = locale;                                                                                    // 1838\n                                                                                                                       // 1839\n            // backwards compat for now: also set the locale                                                           // 1840\n            locale_locales__getSetGlobalLocale(name);                                                                  // 1841\n        } else {                                                                                                       // 1842\n            // pass null for config to unupdate, useful for tests                                                      // 1843\n            if (locales[name] != null) {                                                                               // 1844\n                if (locales[name].parentLocale != null) {                                                              // 1845\n                    locales[name] = locales[name].parentLocale;                                                        // 1846\n                } else if (locales[name] != null) {                                                                    // 1847\n                    delete locales[name];                                                                              // 1848\n                }                                                                                                      // 1849\n            }                                                                                                          // 1850\n        }                                                                                                              // 1851\n        return locales[name];                                                                                          // 1852\n    }                                                                                                                  // 1853\n                                                                                                                       // 1854\n    // returns locale data                                                                                             // 1855\n    function locale_locales__getLocale (key) {                                                                         // 1856\n        var locale;                                                                                                    // 1857\n                                                                                                                       // 1858\n        if (key && key._locale && key._locale._abbr) {                                                                 // 1859\n            key = key._locale._abbr;                                                                                   // 1860\n        }                                                                                                              // 1861\n                                                                                                                       // 1862\n        if (!key) {                                                                                                    // 1863\n            return globalLocale;                                                                                       // 1864\n        }                                                                                                              // 1865\n                                                                                                                       // 1866\n        if (!isArray(key)) {                                                                                           // 1867\n            //short-circuit everything else                                                                            // 1868\n            locale = loadLocale(key);                                                                                  // 1869\n            if (locale) {                                                                                              // 1870\n                return locale;                                                                                         // 1871\n            }                                                                                                          // 1872\n            key = [key];                                                                                               // 1873\n        }                                                                                                              // 1874\n                                                                                                                       // 1875\n        return chooseLocale(key);                                                                                      // 1876\n    }                                                                                                                  // 1877\n                                                                                                                       // 1878\n    function locale_locales__listLocales() {                                                                           // 1879\n        return keys(locales);                                                                                          // 1880\n    }                                                                                                                  // 1881\n                                                                                                                       // 1882\n    function checkOverflow (m) {                                                                                       // 1883\n        var overflow;                                                                                                  // 1884\n        var a = m._a;                                                                                                  // 1885\n                                                                                                                       // 1886\n        if (a && getParsingFlags(m).overflow === -2) {                                                                 // 1887\n            overflow =                                                                                                 // 1888\n                a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :                                                   // 1889\n                a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :                         // 1890\n                a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :\n                a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :                                                  // 1892\n                a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :                                                  // 1893\n                a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :                                             // 1894\n                -1;                                                                                                    // 1895\n                                                                                                                       // 1896\n            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {                       // 1897\n                overflow = DATE;                                                                                       // 1898\n            }                                                                                                          // 1899\n            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {                                                // 1900\n                overflow = WEEK;                                                                                       // 1901\n            }                                                                                                          // 1902\n            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {                                              // 1903\n                overflow = WEEKDAY;                                                                                    // 1904\n            }                                                                                                          // 1905\n                                                                                                                       // 1906\n            getParsingFlags(m).overflow = overflow;                                                                    // 1907\n        }                                                                                                              // 1908\n                                                                                                                       // 1909\n        return m;                                                                                                      // 1910\n    }                                                                                                                  // 1911\n                                                                                                                       // 1912\n    // iso 8601 regex                                                                                                  // 1913\n    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)       // 1914\n    var extendedIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})-(?:\\d\\d-\\d\\d|W\\d\\d-\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?::\\d\\d(?::\\d\\d(?:[.,]\\d+)?)?)?)([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?/;\n    var basicIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})(?:\\d\\d\\d\\d|W\\d\\d\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?:\\d\\d(?:\\d\\d(?:[.,]\\d+)?)?)?)([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?/;\n                                                                                                                       // 1917\n    var tzRegex = /Z|[+-]\\d\\d(?::?\\d\\d)?/;                                                                             // 1918\n                                                                                                                       // 1919\n    var isoDates = [                                                                                                   // 1920\n        ['YYYYYY-MM-DD', /[+-]\\d{6}-\\d\\d-\\d\\d/],                                                                       // 1921\n        ['YYYY-MM-DD', /\\d{4}-\\d\\d-\\d\\d/],                                                                             // 1922\n        ['GGGG-[W]WW-E', /\\d{4}-W\\d\\d-\\d/],                                                                            // 1923\n        ['GGGG-[W]WW', /\\d{4}-W\\d\\d/, false],                                                                          // 1924\n        ['YYYY-DDD', /\\d{4}-\\d{3}/],                                                                                   // 1925\n        ['YYYY-MM', /\\d{4}-\\d\\d/, false],                                                                              // 1926\n        ['YYYYYYMMDD', /[+-]\\d{10}/],                                                                                  // 1927\n        ['YYYYMMDD', /\\d{8}/],                                                                                         // 1928\n        // YYYYMM is NOT allowed by the standard                                                                       // 1929\n        ['GGGG[W]WWE', /\\d{4}W\\d{3}/],                                                                                 // 1930\n        ['GGGG[W]WW', /\\d{4}W\\d{2}/, false],                                                                           // 1931\n        ['YYYYDDD', /\\d{7}/]                                                                                           // 1932\n    ];                                                                                                                 // 1933\n                                                                                                                       // 1934\n    // iso time formats and regexes                                                                                    // 1935\n    var isoTimes = [                                                                                                   // 1936\n        ['HH:mm:ss.SSSS', /\\d\\d:\\d\\d:\\d\\d\\.\\d+/],                                                                      // 1937\n        ['HH:mm:ss,SSSS', /\\d\\d:\\d\\d:\\d\\d,\\d+/],                                                                       // 1938\n        ['HH:mm:ss', /\\d\\d:\\d\\d:\\d\\d/],                                                                                // 1939\n        ['HH:mm', /\\d\\d:\\d\\d/],                                                                                        // 1940\n        ['HHmmss.SSSS', /\\d\\d\\d\\d\\d\\d\\.\\d+/],                                                                          // 1941\n        ['HHmmss,SSSS', /\\d\\d\\d\\d\\d\\d,\\d+/],                                                                           // 1942\n        ['HHmmss', /\\d\\d\\d\\d\\d\\d/],                                                                                    // 1943\n        ['HHmm', /\\d\\d\\d\\d/],                                                                                          // 1944\n        ['HH', /\\d\\d/]                                                                                                 // 1945\n    ];                                                                                                                 // 1946\n                                                                                                                       // 1947\n    var aspNetJsonRegex = /^\\/?Date\\((\\-?\\d+)/i;                                                                       // 1948\n                                                                                                                       // 1949\n    // date from iso format                                                                                            // 1950\n    function configFromISO(config) {                                                                                   // 1951\n        var i, l,                                                                                                      // 1952\n            string = config._i,                                                                                        // 1953\n            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),                                       // 1954\n            allowTime, dateFormat, timeFormat, tzFormat;                                                               // 1955\n                                                                                                                       // 1956\n        if (match) {                                                                                                   // 1957\n            getParsingFlags(config).iso = true;                                                                        // 1958\n                                                                                                                       // 1959\n            for (i = 0, l = isoDates.length; i < l; i++) {                                                             // 1960\n                if (isoDates[i][1].exec(match[1])) {                                                                   // 1961\n                    dateFormat = isoDates[i][0];                                                                       // 1962\n                    allowTime = isoDates[i][2] !== false;                                                              // 1963\n                    break;                                                                                             // 1964\n                }                                                                                                      // 1965\n            }                                                                                                          // 1966\n            if (dateFormat == null) {                                                                                  // 1967\n                config._isValid = false;                                                                               // 1968\n                return;                                                                                                // 1969\n            }                                                                                                          // 1970\n            if (match[3]) {                                                                                            // 1971\n                for (i = 0, l = isoTimes.length; i < l; i++) {                                                         // 1972\n                    if (isoTimes[i][1].exec(match[3])) {                                                               // 1973\n                        // match[2] should be 'T' or space                                                             // 1974\n                        timeFormat = (match[2] || ' ') + isoTimes[i][0];                                               // 1975\n                        break;                                                                                         // 1976\n                    }                                                                                                  // 1977\n                }                                                                                                      // 1978\n                if (timeFormat == null) {                                                                              // 1979\n                    config._isValid = false;                                                                           // 1980\n                    return;                                                                                            // 1981\n                }                                                                                                      // 1982\n            }                                                                                                          // 1983\n            if (!allowTime && timeFormat != null) {                                                                    // 1984\n                config._isValid = false;                                                                               // 1985\n                return;                                                                                                // 1986\n            }                                                                                                          // 1987\n            if (match[4]) {                                                                                            // 1988\n                if (tzRegex.exec(match[4])) {                                                                          // 1989\n                    tzFormat = 'Z';                                                                                    // 1990\n                } else {                                                                                               // 1991\n                    config._isValid = false;                                                                           // 1992\n                    return;                                                                                            // 1993\n                }                                                                                                      // 1994\n            }                                                                                                          // 1995\n            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');                                            // 1996\n            configFromStringAndFormat(config);                                                                         // 1997\n        } else {                                                                                                       // 1998\n            config._isValid = false;                                                                                   // 1999\n        }                                                                                                              // 2000\n    }                                                                                                                  // 2001\n                                                                                                                       // 2002\n    // date from iso format or fallback                                                                                // 2003\n    function configFromString(config) {                                                                                // 2004\n        var matched = aspNetJsonRegex.exec(config._i);                                                                 // 2005\n                                                                                                                       // 2006\n        if (matched !== null) {                                                                                        // 2007\n            config._d = new Date(+matched[1]);                                                                         // 2008\n            return;                                                                                                    // 2009\n        }                                                                                                              // 2010\n                                                                                                                       // 2011\n        configFromISO(config);                                                                                         // 2012\n        if (config._isValid === false) {                                                                               // 2013\n            delete config._isValid;                                                                                    // 2014\n            utils_hooks__hooks.createFromInputFallback(config);                                                        // 2015\n        }                                                                                                              // 2016\n    }                                                                                                                  // 2017\n                                                                                                                       // 2018\n    utils_hooks__hooks.createFromInputFallback = deprecate(                                                            // 2019\n        'moment construction falls back to js Date. This is ' +                                                        // 2020\n        'discouraged and will be removed in upcoming major ' +                                                         // 2021\n        'release. Please refer to ' +                                                                                  // 2022\n        'http://momentjs.com/guides/#/warnings/js-date/ for more info.',                                               // 2023\n        function (config) {                                                                                            // 2024\n            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));                                          // 2025\n        }                                                                                                              // 2026\n    );                                                                                                                 // 2027\n                                                                                                                       // 2028\n    // Pick the first defined of two or three arguments.                                                               // 2029\n    function defaults(a, b, c) {                                                                                       // 2030\n        if (a != null) {                                                                                               // 2031\n            return a;                                                                                                  // 2032\n        }                                                                                                              // 2033\n        if (b != null) {                                                                                               // 2034\n            return b;                                                                                                  // 2035\n        }                                                                                                              // 2036\n        return c;                                                                                                      // 2037\n    }                                                                                                                  // 2038\n                                                                                                                       // 2039\n    function currentDateArray(config) {                                                                                // 2040\n        // hooks is actually the exported moment object                                                                // 2041\n        var nowValue = new Date(utils_hooks__hooks.now());                                                             // 2042\n        if (config._useUTC) {                                                                                          // 2043\n            return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];                         // 2044\n        }                                                                                                              // 2045\n        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];                                      // 2046\n    }                                                                                                                  // 2047\n                                                                                                                       // 2048\n    // convert an array to a date.                                                                                     // 2049\n    // the array should mirror the parameters below                                                                    // 2050\n    // note: all values past the year are optional and will default to the lowest possible value.                      // 2051\n    // [year, month, day , hour, minute, second, millisecond]                                                          // 2052\n    function configFromArray (config) {                                                                                // 2053\n        var i, date, input = [], currentDate, yearToUse;                                                               // 2054\n                                                                                                                       // 2055\n        if (config._d) {                                                                                               // 2056\n            return;                                                                                                    // 2057\n        }                                                                                                              // 2058\n                                                                                                                       // 2059\n        currentDate = currentDateArray(config);                                                                        // 2060\n                                                                                                                       // 2061\n        //compute day of the year from weeks and weekdays                                                              // 2062\n        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {                                        // 2063\n            dayOfYearFromWeekInfo(config);                                                                             // 2064\n        }                                                                                                              // 2065\n                                                                                                                       // 2066\n        //if the day of the year is set, figure out what it is                                                         // 2067\n        if (config._dayOfYear) {                                                                                       // 2068\n            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);                                                  // 2069\n                                                                                                                       // 2070\n            if (config._dayOfYear > daysInYear(yearToUse)) {                                                           // 2071\n                getParsingFlags(config)._overflowDayOfYear = true;                                                     // 2072\n            }                                                                                                          // 2073\n                                                                                                                       // 2074\n            date = createUTCDate(yearToUse, 0, config._dayOfYear);                                                     // 2075\n            config._a[MONTH] = date.getUTCMonth();                                                                     // 2076\n            config._a[DATE] = date.getUTCDate();                                                                       // 2077\n        }                                                                                                              // 2078\n                                                                                                                       // 2079\n        // Default to current date.                                                                                    // 2080\n        // * if no year, month, day of month are given, default to today                                               // 2081\n        // * if day of month is given, default month and year                                                          // 2082\n        // * if month is given, default only year                                                                      // 2083\n        // * if year is given, don't default anything                                                                  // 2084\n        for (i = 0; i < 3 && config._a[i] == null; ++i) {                                                              // 2085\n            config._a[i] = input[i] = currentDate[i];                                                                  // 2086\n        }                                                                                                              // 2087\n                                                                                                                       // 2088\n        // Zero out whatever was not defaulted, including time                                                         // 2089\n        for (; i < 7; i++) {                                                                                           // 2090\n            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];                       // 2091\n        }                                                                                                              // 2092\n                                                                                                                       // 2093\n        // Check for 24:00:00.000                                                                                      // 2094\n        if (config._a[HOUR] === 24 &&                                                                                  // 2095\n                config._a[MINUTE] === 0 &&                                                                             // 2096\n                config._a[SECOND] === 0 &&                                                                             // 2097\n                config._a[MILLISECOND] === 0) {                                                                        // 2098\n            config._nextDay = true;                                                                                    // 2099\n            config._a[HOUR] = 0;                                                                                       // 2100\n        }                                                                                                              // 2101\n                                                                                                                       // 2102\n        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);                                  // 2103\n        // Apply timezone offset from input. The actual utcOffset can be changed                                       // 2104\n        // with parseZone.                                                                                             // 2105\n        if (config._tzm != null) {                                                                                     // 2106\n            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);                                          // 2107\n        }                                                                                                              // 2108\n                                                                                                                       // 2109\n        if (config._nextDay) {                                                                                         // 2110\n            config._a[HOUR] = 24;                                                                                      // 2111\n        }                                                                                                              // 2112\n    }                                                                                                                  // 2113\n                                                                                                                       // 2114\n    function dayOfYearFromWeekInfo(config) {                                                                           // 2115\n        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;                                               // 2116\n                                                                                                                       // 2117\n        w = config._w;                                                                                                 // 2118\n        if (w.GG != null || w.W != null || w.E != null) {                                                              // 2119\n            dow = 1;                                                                                                   // 2120\n            doy = 4;                                                                                                   // 2121\n                                                                                                                       // 2122\n            // TODO: We need to take the current isoWeekYear, but that depends on                                      // 2123\n            // how we interpret now (local, utc, fixed offset). So create                                              // 2124\n            // a now version of current config (take local/utc/offset flags, and                                       // 2125\n            // create now).                                                                                            // 2126\n            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(local__createLocal(), 1, 4).year);                   // 2127\n            week = defaults(w.W, 1);                                                                                   // 2128\n            weekday = defaults(w.E, 1);                                                                                // 2129\n            if (weekday < 1 || weekday > 7) {                                                                          // 2130\n                weekdayOverflow = true;                                                                                // 2131\n            }                                                                                                          // 2132\n        } else {                                                                                                       // 2133\n            dow = config._locale._week.dow;                                                                            // 2134\n            doy = config._locale._week.doy;                                                                            // 2135\n                                                                                                                       // 2136\n            weekYear = defaults(w.gg, config._a[YEAR], weekOfYear(local__createLocal(), dow, doy).year);               // 2137\n            week = defaults(w.w, 1);                                                                                   // 2138\n                                                                                                                       // 2139\n            if (w.d != null) {                                                                                         // 2140\n                // weekday -- low day numbers are considered next week                                                 // 2141\n                weekday = w.d;                                                                                         // 2142\n                if (weekday < 0 || weekday > 6) {                                                                      // 2143\n                    weekdayOverflow = true;                                                                            // 2144\n                }                                                                                                      // 2145\n            } else if (w.e != null) {                                                                                  // 2146\n                // local weekday -- counting starts from begining of week                                              // 2147\n                weekday = w.e + dow;                                                                                   // 2148\n                if (w.e < 0 || w.e > 6) {                                                                              // 2149\n                    weekdayOverflow = true;                                                                            // 2150\n                }                                                                                                      // 2151\n            } else {                                                                                                   // 2152\n                // default to begining of week                                                                         // 2153\n                weekday = dow;                                                                                         // 2154\n            }                                                                                                          // 2155\n        }                                                                                                              // 2156\n        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {                                                      // 2157\n            getParsingFlags(config)._overflowWeeks = true;                                                             // 2158\n        } else if (weekdayOverflow != null) {                                                                          // 2159\n            getParsingFlags(config)._overflowWeekday = true;                                                           // 2160\n        } else {                                                                                                       // 2161\n            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);                                              // 2162\n            config._a[YEAR] = temp.year;                                                                               // 2163\n            config._dayOfYear = temp.dayOfYear;                                                                        // 2164\n        }                                                                                                              // 2165\n    }                                                                                                                  // 2166\n                                                                                                                       // 2167\n    // constant that refers to the ISO standard                                                                        // 2168\n    utils_hooks__hooks.ISO_8601 = function () {};                                                                      // 2169\n                                                                                                                       // 2170\n    // date from string and format string                                                                              // 2171\n    function configFromStringAndFormat(config) {                                                                       // 2172\n        // TODO: Move this to another part of the creation flow to prevent circular deps                               // 2173\n        if (config._f === utils_hooks__hooks.ISO_8601) {                                                               // 2174\n            configFromISO(config);                                                                                     // 2175\n            return;                                                                                                    // 2176\n        }                                                                                                              // 2177\n                                                                                                                       // 2178\n        config._a = [];                                                                                                // 2179\n        getParsingFlags(config).empty = true;                                                                          // 2180\n                                                                                                                       // 2181\n        // This array is used to make a Date, either with `new Date` or `Date.UTC`                                     // 2182\n        var string = '' + config._i,                                                                                   // 2183\n            i, parsedInput, tokens, token, skipped,                                                                    // 2184\n            stringLength = string.length,                                                                              // 2185\n            totalParsedInputLength = 0;                                                                                // 2186\n                                                                                                                       // 2187\n        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];                                // 2188\n                                                                                                                       // 2189\n        for (i = 0; i < tokens.length; i++) {                                                                          // 2190\n            token = tokens[i];                                                                                         // 2191\n            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];                               // 2192\n            // console.log('token', token, 'parsedInput', parsedInput,                                                 // 2193\n            //         'regex', getParseRegexForToken(token, config));                                                 // 2194\n            if (parsedInput) {                                                                                         // 2195\n                skipped = string.substr(0, string.indexOf(parsedInput));                                               // 2196\n                if (skipped.length > 0) {                                                                              // 2197\n                    getParsingFlags(config).unusedInput.push(skipped);                                                 // 2198\n                }                                                                                                      // 2199\n                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);                               // 2200\n                totalParsedInputLength += parsedInput.length;                                                          // 2201\n            }                                                                                                          // 2202\n            // don't parse if it's not a known token                                                                   // 2203\n            if (formatTokenFunctions[token]) {                                                                         // 2204\n                if (parsedInput) {                                                                                     // 2205\n                    getParsingFlags(config).empty = false;                                                             // 2206\n                }                                                                                                      // 2207\n                else {                                                                                                 // 2208\n                    getParsingFlags(config).unusedTokens.push(token);                                                  // 2209\n                }                                                                                                      // 2210\n                addTimeToArrayFromToken(token, parsedInput, config);                                                   // 2211\n            }                                                                                                          // 2212\n            else if (config._strict && !parsedInput) {                                                                 // 2213\n                getParsingFlags(config).unusedTokens.push(token);                                                      // 2214\n            }                                                                                                          // 2215\n        }                                                                                                              // 2216\n                                                                                                                       // 2217\n        // add remaining unparsed input length to the string                                                           // 2218\n        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;                                 // 2219\n        if (string.length > 0) {                                                                                       // 2220\n            getParsingFlags(config).unusedInput.push(string);                                                          // 2221\n        }                                                                                                              // 2222\n                                                                                                                       // 2223\n        // clear _12h flag if hour is <= 12                                                                            // 2224\n        if (config._a[HOUR] <= 12 &&                                                                                   // 2225\n            getParsingFlags(config).bigHour === true &&                                                                // 2226\n            config._a[HOUR] > 0) {                                                                                     // 2227\n            getParsingFlags(config).bigHour = undefined;                                                               // 2228\n        }                                                                                                              // 2229\n                                                                                                                       // 2230\n        getParsingFlags(config).parsedDateParts = config._a.slice(0);                                                  // 2231\n        getParsingFlags(config).meridiem = config._meridiem;                                                           // 2232\n        // handle meridiem                                                                                             // 2233\n        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);                          // 2234\n                                                                                                                       // 2235\n        configFromArray(config);                                                                                       // 2236\n        checkOverflow(config);                                                                                         // 2237\n    }                                                                                                                  // 2238\n                                                                                                                       // 2239\n                                                                                                                       // 2240\n    function meridiemFixWrap (locale, hour, meridiem) {                                                                // 2241\n        var isPm;                                                                                                      // 2242\n                                                                                                                       // 2243\n        if (meridiem == null) {                                                                                        // 2244\n            // nothing to do                                                                                           // 2245\n            return hour;                                                                                               // 2246\n        }                                                                                                              // 2247\n        if (locale.meridiemHour != null) {                                                                             // 2248\n            return locale.meridiemHour(hour, meridiem);                                                                // 2249\n        } else if (locale.isPM != null) {                                                                              // 2250\n            // Fallback                                                                                                // 2251\n            isPm = locale.isPM(meridiem);                                                                              // 2252\n            if (isPm && hour < 12) {                                                                                   // 2253\n                hour += 12;                                                                                            // 2254\n            }                                                                                                          // 2255\n            if (!isPm && hour === 12) {                                                                                // 2256\n                hour = 0;                                                                                              // 2257\n            }                                                                                                          // 2258\n            return hour;                                                                                               // 2259\n        } else {                                                                                                       // 2260\n            // this is not supposed to happen                                                                          // 2261\n            return hour;                                                                                               // 2262\n        }                                                                                                              // 2263\n    }                                                                                                                  // 2264\n                                                                                                                       // 2265\n    // date from string and array of format strings                                                                    // 2266\n    function configFromStringAndArray(config) {                                                                        // 2267\n        var tempConfig,                                                                                                // 2268\n            bestMoment,                                                                                                // 2269\n                                                                                                                       // 2270\n            scoreToBeat,                                                                                               // 2271\n            i,                                                                                                         // 2272\n            currentScore;                                                                                              // 2273\n                                                                                                                       // 2274\n        if (config._f.length === 0) {                                                                                  // 2275\n            getParsingFlags(config).invalidFormat = true;                                                              // 2276\n            config._d = new Date(NaN);                                                                                 // 2277\n            return;                                                                                                    // 2278\n        }                                                                                                              // 2279\n                                                                                                                       // 2280\n        for (i = 0; i < config._f.length; i++) {                                                                       // 2281\n            currentScore = 0;                                                                                          // 2282\n            tempConfig = copyConfig({}, config);                                                                       // 2283\n            if (config._useUTC != null) {                                                                              // 2284\n                tempConfig._useUTC = config._useUTC;                                                                   // 2285\n            }                                                                                                          // 2286\n            tempConfig._f = config._f[i];                                                                              // 2287\n            configFromStringAndFormat(tempConfig);                                                                     // 2288\n                                                                                                                       // 2289\n            if (!valid__isValid(tempConfig)) {                                                                         // 2290\n                continue;                                                                                              // 2291\n            }                                                                                                          // 2292\n                                                                                                                       // 2293\n            // if there is any input that was not parsed add a penalty for that format                                 // 2294\n            currentScore += getParsingFlags(tempConfig).charsLeftOver;                                                 // 2295\n                                                                                                                       // 2296\n            //or tokens                                                                                                // 2297\n            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;                                      // 2298\n                                                                                                                       // 2299\n            getParsingFlags(tempConfig).score = currentScore;                                                          // 2300\n                                                                                                                       // 2301\n            if (scoreToBeat == null || currentScore < scoreToBeat) {                                                   // 2302\n                scoreToBeat = currentScore;                                                                            // 2303\n                bestMoment = tempConfig;                                                                               // 2304\n            }                                                                                                          // 2305\n        }                                                                                                              // 2306\n                                                                                                                       // 2307\n        extend(config, bestMoment || tempConfig);                                                                      // 2308\n    }                                                                                                                  // 2309\n                                                                                                                       // 2310\n    function configFromObject(config) {                                                                                // 2311\n        if (config._d) {                                                                                               // 2312\n            return;                                                                                                    // 2313\n        }                                                                                                              // 2314\n                                                                                                                       // 2315\n        var i = normalizeObjectUnits(config._i);                                                                       // 2316\n        config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {\n            return obj && parseInt(obj, 10);                                                                           // 2318\n        });                                                                                                            // 2319\n                                                                                                                       // 2320\n        configFromArray(config);                                                                                       // 2321\n    }                                                                                                                  // 2322\n                                                                                                                       // 2323\n    function createFromConfig (config) {                                                                               // 2324\n        var res = new Moment(checkOverflow(prepareConfig(config)));                                                    // 2325\n        if (res._nextDay) {                                                                                            // 2326\n            // Adding is smart enough around DST                                                                       // 2327\n            res.add(1, 'd');                                                                                           // 2328\n            res._nextDay = undefined;                                                                                  // 2329\n        }                                                                                                              // 2330\n                                                                                                                       // 2331\n        return res;                                                                                                    // 2332\n    }                                                                                                                  // 2333\n                                                                                                                       // 2334\n    function prepareConfig (config) {                                                                                  // 2335\n        var input = config._i,                                                                                         // 2336\n            format = config._f;                                                                                        // 2337\n                                                                                                                       // 2338\n        config._locale = config._locale || locale_locales__getLocale(config._l);                                       // 2339\n                                                                                                                       // 2340\n        if (input === null || (format === undefined && input === '')) {                                                // 2341\n            return valid__createInvalid({nullInput: true});                                                            // 2342\n        }                                                                                                              // 2343\n                                                                                                                       // 2344\n        if (typeof input === 'string') {                                                                               // 2345\n            config._i = input = config._locale.preparse(input);                                                        // 2346\n        }                                                                                                              // 2347\n                                                                                                                       // 2348\n        if (isMoment(input)) {                                                                                         // 2349\n            return new Moment(checkOverflow(input));                                                                   // 2350\n        } else if (isArray(format)) {                                                                                  // 2351\n            configFromStringAndArray(config);                                                                          // 2352\n        } else if (isDate(input)) {                                                                                    // 2353\n            config._d = input;                                                                                         // 2354\n        } else if (format) {                                                                                           // 2355\n            configFromStringAndFormat(config);                                                                         // 2356\n        }  else {                                                                                                      // 2357\n            configFromInput(config);                                                                                   // 2358\n        }                                                                                                              // 2359\n                                                                                                                       // 2360\n        if (!valid__isValid(config)) {                                                                                 // 2361\n            config._d = null;                                                                                          // 2362\n        }                                                                                                              // 2363\n                                                                                                                       // 2364\n        return config;                                                                                                 // 2365\n    }                                                                                                                  // 2366\n                                                                                                                       // 2367\n    function configFromInput(config) {                                                                                 // 2368\n        var input = config._i;                                                                                         // 2369\n        if (input === undefined) {                                                                                     // 2370\n            config._d = new Date(utils_hooks__hooks.now());                                                            // 2371\n        } else if (isDate(input)) {                                                                                    // 2372\n            config._d = new Date(input.valueOf());                                                                     // 2373\n        } else if (typeof input === 'string') {                                                                        // 2374\n            configFromString(config);                                                                                  // 2375\n        } else if (isArray(input)) {                                                                                   // 2376\n            config._a = map(input.slice(0), function (obj) {                                                           // 2377\n                return parseInt(obj, 10);                                                                              // 2378\n            });                                                                                                        // 2379\n            configFromArray(config);                                                                                   // 2380\n        } else if (typeof(input) === 'object') {                                                                       // 2381\n            configFromObject(config);                                                                                  // 2382\n        } else if (typeof(input) === 'number') {                                                                       // 2383\n            // from milliseconds                                                                                       // 2384\n            config._d = new Date(input);                                                                               // 2385\n        } else {                                                                                                       // 2386\n            utils_hooks__hooks.createFromInputFallback(config);                                                        // 2387\n        }                                                                                                              // 2388\n    }                                                                                                                  // 2389\n                                                                                                                       // 2390\n    function createLocalOrUTC (input, format, locale, strict, isUTC) {                                                 // 2391\n        var c = {};                                                                                                    // 2392\n                                                                                                                       // 2393\n        if (typeof(locale) === 'boolean') {                                                                            // 2394\n            strict = locale;                                                                                           // 2395\n            locale = undefined;                                                                                        // 2396\n        }                                                                                                              // 2397\n                                                                                                                       // 2398\n        if ((isObject(input) && isObjectEmpty(input)) ||                                                               // 2399\n                (isArray(input) && input.length === 0)) {                                                              // 2400\n            input = undefined;                                                                                         // 2401\n        }                                                                                                              // 2402\n        // object construction must be done this way.                                                                  // 2403\n        // https://github.com/moment/moment/issues/1423                                                                // 2404\n        c._isAMomentObject = true;                                                                                     // 2405\n        c._useUTC = c._isUTC = isUTC;                                                                                  // 2406\n        c._l = locale;                                                                                                 // 2407\n        c._i = input;                                                                                                  // 2408\n        c._f = format;                                                                                                 // 2409\n        c._strict = strict;                                                                                            // 2410\n                                                                                                                       // 2411\n        return createFromConfig(c);                                                                                    // 2412\n    }                                                                                                                  // 2413\n                                                                                                                       // 2414\n    function local__createLocal (input, format, locale, strict) {                                                      // 2415\n        return createLocalOrUTC(input, format, locale, strict, false);                                                 // 2416\n    }                                                                                                                  // 2417\n                                                                                                                       // 2418\n    var prototypeMin = deprecate(                                                                                      // 2419\n        'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',          // 2420\n        function () {                                                                                                  // 2421\n            var other = local__createLocal.apply(null, arguments);                                                     // 2422\n            if (this.isValid() && other.isValid()) {                                                                   // 2423\n                return other < this ? this : other;                                                                    // 2424\n            } else {                                                                                                   // 2425\n                return valid__createInvalid();                                                                         // 2426\n            }                                                                                                          // 2427\n        }                                                                                                              // 2428\n    );                                                                                                                 // 2429\n                                                                                                                       // 2430\n    var prototypeMax = deprecate(                                                                                      // 2431\n        'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',          // 2432\n        function () {                                                                                                  // 2433\n            var other = local__createLocal.apply(null, arguments);                                                     // 2434\n            if (this.isValid() && other.isValid()) {                                                                   // 2435\n                return other > this ? this : other;                                                                    // 2436\n            } else {                                                                                                   // 2437\n                return valid__createInvalid();                                                                         // 2438\n            }                                                                                                          // 2439\n        }                                                                                                              // 2440\n    );                                                                                                                 // 2441\n                                                                                                                       // 2442\n    // Pick a moment m from moments so that m[fn](other) is true for all                                               // 2443\n    // other. This relies on the function fn to be transitive.                                                         // 2444\n    //                                                                                                                 // 2445\n    // moments should either be an array of moment objects or an array, whose                                          // 2446\n    // first element is an array of moment objects.                                                                    // 2447\n    function pickBy(fn, moments) {                                                                                     // 2448\n        var res, i;                                                                                                    // 2449\n        if (moments.length === 1 && isArray(moments[0])) {                                                             // 2450\n            moments = moments[0];                                                                                      // 2451\n        }                                                                                                              // 2452\n        if (!moments.length) {                                                                                         // 2453\n            return local__createLocal();                                                                               // 2454\n        }                                                                                                              // 2455\n        res = moments[0];                                                                                              // 2456\n        for (i = 1; i < moments.length; ++i) {                                                                         // 2457\n            if (!moments[i].isValid() || moments[i][fn](res)) {                                                        // 2458\n                res = moments[i];                                                                                      // 2459\n            }                                                                                                          // 2460\n        }                                                                                                              // 2461\n        return res;                                                                                                    // 2462\n    }                                                                                                                  // 2463\n                                                                                                                       // 2464\n    // TODO: Use [].sort instead?                                                                                      // 2465\n    function min () {                                                                                                  // 2466\n        var args = [].slice.call(arguments, 0);                                                                        // 2467\n                                                                                                                       // 2468\n        return pickBy('isBefore', args);                                                                               // 2469\n    }                                                                                                                  // 2470\n                                                                                                                       // 2471\n    function max () {                                                                                                  // 2472\n        var args = [].slice.call(arguments, 0);                                                                        // 2473\n                                                                                                                       // 2474\n        return pickBy('isAfter', args);                                                                                // 2475\n    }                                                                                                                  // 2476\n                                                                                                                       // 2477\n    var now = function () {                                                                                            // 2478\n        return Date.now ? Date.now() : +(new Date());                                                                  // 2479\n    };                                                                                                                 // 2480\n                                                                                                                       // 2481\n    function Duration (duration) {                                                                                     // 2482\n        var normalizedInput = normalizeObjectUnits(duration),                                                          // 2483\n            years = normalizedInput.year || 0,                                                                         // 2484\n            quarters = normalizedInput.quarter || 0,                                                                   // 2485\n            months = normalizedInput.month || 0,                                                                       // 2486\n            weeks = normalizedInput.week || 0,                                                                         // 2487\n            days = normalizedInput.day || 0,                                                                           // 2488\n            hours = normalizedInput.hour || 0,                                                                         // 2489\n            minutes = normalizedInput.minute || 0,                                                                     // 2490\n            seconds = normalizedInput.second || 0,                                                                     // 2491\n            milliseconds = normalizedInput.millisecond || 0;                                                           // 2492\n                                                                                                                       // 2493\n        // representation for dateAddRemove                                                                            // 2494\n        this._milliseconds = +milliseconds +                                                                           // 2495\n            seconds * 1e3 + // 1000                                                                                    // 2496\n            minutes * 6e4 + // 1000 * 60                                                                               // 2497\n            hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978\n        // Because of dateAddRemove treats 24 hours as different from a                                                // 2499\n        // day when working around DST, we need to store them separately                                               // 2500\n        this._days = +days +                                                                                           // 2501\n            weeks * 7;                                                                                                 // 2502\n        // It is impossible translate months into days without knowing                                                 // 2503\n        // which months you are are talking about, so we have to store                                                 // 2504\n        // it separately.                                                                                              // 2505\n        this._months = +months +                                                                                       // 2506\n            quarters * 3 +                                                                                             // 2507\n            years * 12;                                                                                                // 2508\n                                                                                                                       // 2509\n        this._data = {};                                                                                               // 2510\n                                                                                                                       // 2511\n        this._locale = locale_locales__getLocale();                                                                    // 2512\n                                                                                                                       // 2513\n        this._bubble();                                                                                                // 2514\n    }                                                                                                                  // 2515\n                                                                                                                       // 2516\n    function isDuration (obj) {                                                                                        // 2517\n        return obj instanceof Duration;                                                                                // 2518\n    }                                                                                                                  // 2519\n                                                                                                                       // 2520\n    // FORMATTING                                                                                                      // 2521\n                                                                                                                       // 2522\n    function offset (token, separator) {                                                                               // 2523\n        addFormatToken(token, 0, 0, function () {                                                                      // 2524\n            var offset = this.utcOffset();                                                                             // 2525\n            var sign = '+';                                                                                            // 2526\n            if (offset < 0) {                                                                                          // 2527\n                offset = -offset;                                                                                      // 2528\n                sign = '-';                                                                                            // 2529\n            }                                                                                                          // 2530\n            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);                     // 2531\n        });                                                                                                            // 2532\n    }                                                                                                                  // 2533\n                                                                                                                       // 2534\n    offset('Z', ':');                                                                                                  // 2535\n    offset('ZZ', '');                                                                                                  // 2536\n                                                                                                                       // 2537\n    // PARSING                                                                                                         // 2538\n                                                                                                                       // 2539\n    addRegexToken('Z',  matchShortOffset);                                                                             // 2540\n    addRegexToken('ZZ', matchShortOffset);                                                                             // 2541\n    addParseToken(['Z', 'ZZ'], function (input, array, config) {                                                       // 2542\n        config._useUTC = true;                                                                                         // 2543\n        config._tzm = offsetFromString(matchShortOffset, input);                                                       // 2544\n    });                                                                                                                // 2545\n                                                                                                                       // 2546\n    // HELPERS                                                                                                         // 2547\n                                                                                                                       // 2548\n    // timezone chunker                                                                                                // 2549\n    // '+10:00' > ['10',  '00']                                                                                        // 2550\n    // '-1530'  > ['-15', '30']                                                                                        // 2551\n    var chunkOffset = /([\\+\\-]|\\d\\d)/gi;                                                                               // 2552\n                                                                                                                       // 2553\n    function offsetFromString(matcher, string) {                                                                       // 2554\n        var matches = ((string || '').match(matcher) || []);                                                           // 2555\n        var chunk   = matches[matches.length - 1] || [];                                                               // 2556\n        var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];                                                  // 2557\n        var minutes = +(parts[1] * 60) + toInt(parts[2]);                                                              // 2558\n                                                                                                                       // 2559\n        return parts[0] === '+' ? minutes : -minutes;                                                                  // 2560\n    }                                                                                                                  // 2561\n                                                                                                                       // 2562\n    // Return a moment from input, that is local/utc/zone equivalent to model.                                         // 2563\n    function cloneWithOffset(input, model) {                                                                           // 2564\n        var res, diff;                                                                                                 // 2565\n        if (model._isUTC) {                                                                                            // 2566\n            res = model.clone();                                                                                       // 2567\n            diff = (isMoment(input) || isDate(input) ? input.valueOf() : local__createLocal(input).valueOf()) - res.valueOf();\n            // Use low-level api, because this fn is low-level api.                                                    // 2569\n            res._d.setTime(res._d.valueOf() + diff);                                                                   // 2570\n            utils_hooks__hooks.updateOffset(res, false);                                                               // 2571\n            return res;                                                                                                // 2572\n        } else {                                                                                                       // 2573\n            return local__createLocal(input).local();                                                                  // 2574\n        }                                                                                                              // 2575\n    }                                                                                                                  // 2576\n                                                                                                                       // 2577\n    function getDateOffset (m) {                                                                                       // 2578\n        // On Firefox.24 Date#getTimezoneOffset returns a floating point.                                              // 2579\n        // https://github.com/moment/moment/pull/1871                                                                  // 2580\n        return -Math.round(m._d.getTimezoneOffset() / 15) * 15;                                                        // 2581\n    }                                                                                                                  // 2582\n                                                                                                                       // 2583\n    // HOOKS                                                                                                           // 2584\n                                                                                                                       // 2585\n    // This function will be called whenever a moment is mutated.                                                      // 2586\n    // It is intended to keep the offset in sync with the timezone.                                                    // 2587\n    utils_hooks__hooks.updateOffset = function () {};                                                                  // 2588\n                                                                                                                       // 2589\n    // MOMENTS                                                                                                         // 2590\n                                                                                                                       // 2591\n    // keepLocalTime = true means only change the timezone, without                                                    // 2592\n    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->                                            // 2593\n    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset                                             // 2594\n    // +0200, so we adjust the time as needed, to be valid.                                                            // 2595\n    //                                                                                                                 // 2596\n    // Keeping the time actually adds/subtracts (one hour)                                                             // 2597\n    // from the actual represented time. That is why we call updateOffset                                              // 2598\n    // a second time. In case it wants us to change the offset again                                                   // 2599\n    // _changeInProgress == true case, then we have to adjust, because                                                 // 2600\n    // there is no such time in the given timezone.                                                                    // 2601\n    function getSetOffset (input, keepLocalTime) {                                                                     // 2602\n        var offset = this._offset || 0,                                                                                // 2603\n            localAdjust;                                                                                               // 2604\n        if (!this.isValid()) {                                                                                         // 2605\n            return input != null ? this : NaN;                                                                         // 2606\n        }                                                                                                              // 2607\n        if (input != null) {                                                                                           // 2608\n            if (typeof input === 'string') {                                                                           // 2609\n                input = offsetFromString(matchShortOffset, input);                                                     // 2610\n            } else if (Math.abs(input) < 16) {                                                                         // 2611\n                input = input * 60;                                                                                    // 2612\n            }                                                                                                          // 2613\n            if (!this._isUTC && keepLocalTime) {                                                                       // 2614\n                localAdjust = getDateOffset(this);                                                                     // 2615\n            }                                                                                                          // 2616\n            this._offset = input;                                                                                      // 2617\n            this._isUTC = true;                                                                                        // 2618\n            if (localAdjust != null) {                                                                                 // 2619\n                this.add(localAdjust, 'm');                                                                            // 2620\n            }                                                                                                          // 2621\n            if (offset !== input) {                                                                                    // 2622\n                if (!keepLocalTime || this._changeInProgress) {                                                        // 2623\n                    add_subtract__addSubtract(this, create__createDuration(input - offset, 'm'), 1, false);            // 2624\n                } else if (!this._changeInProgress) {                                                                  // 2625\n                    this._changeInProgress = true;                                                                     // 2626\n                    utils_hooks__hooks.updateOffset(this, true);                                                       // 2627\n                    this._changeInProgress = null;                                                                     // 2628\n                }                                                                                                      // 2629\n            }                                                                                                          // 2630\n            return this;                                                                                               // 2631\n        } else {                                                                                                       // 2632\n            return this._isUTC ? offset : getDateOffset(this);                                                         // 2633\n        }                                                                                                              // 2634\n    }                                                                                                                  // 2635\n                                                                                                                       // 2636\n    function getSetZone (input, keepLocalTime) {                                                                       // 2637\n        if (input != null) {                                                                                           // 2638\n            if (typeof input !== 'string') {                                                                           // 2639\n                input = -input;                                                                                        // 2640\n            }                                                                                                          // 2641\n                                                                                                                       // 2642\n            this.utcOffset(input, keepLocalTime);                                                                      // 2643\n                                                                                                                       // 2644\n            return this;                                                                                               // 2645\n        } else {                                                                                                       // 2646\n            return -this.utcOffset();                                                                                  // 2647\n        }                                                                                                              // 2648\n    }                                                                                                                  // 2649\n                                                                                                                       // 2650\n    function setOffsetToUTC (keepLocalTime) {                                                                          // 2651\n        return this.utcOffset(0, keepLocalTime);                                                                       // 2652\n    }                                                                                                                  // 2653\n                                                                                                                       // 2654\n    function setOffsetToLocal (keepLocalTime) {                                                                        // 2655\n        if (this._isUTC) {                                                                                             // 2656\n            this.utcOffset(0, keepLocalTime);                                                                          // 2657\n            this._isUTC = false;                                                                                       // 2658\n                                                                                                                       // 2659\n            if (keepLocalTime) {                                                                                       // 2660\n                this.subtract(getDateOffset(this), 'm');                                                               // 2661\n            }                                                                                                          // 2662\n        }                                                                                                              // 2663\n        return this;                                                                                                   // 2664\n    }                                                                                                                  // 2665\n                                                                                                                       // 2666\n    function setOffsetToParsedOffset () {                                                                              // 2667\n        if (this._tzm) {                                                                                               // 2668\n            this.utcOffset(this._tzm);                                                                                 // 2669\n        } else if (typeof this._i === 'string') {                                                                      // 2670\n            this.utcOffset(offsetFromString(matchOffset, this._i));                                                    // 2671\n        }                                                                                                              // 2672\n        return this;                                                                                                   // 2673\n    }                                                                                                                  // 2674\n                                                                                                                       // 2675\n    function hasAlignedHourOffset (input) {                                                                            // 2676\n        if (!this.isValid()) {                                                                                         // 2677\n            return false;                                                                                              // 2678\n        }                                                                                                              // 2679\n        input = input ? local__createLocal(input).utcOffset() : 0;                                                     // 2680\n                                                                                                                       // 2681\n        return (this.utcOffset() - input) % 60 === 0;                                                                  // 2682\n    }                                                                                                                  // 2683\n                                                                                                                       // 2684\n    function isDaylightSavingTime () {                                                                                 // 2685\n        return (                                                                                                       // 2686\n            this.utcOffset() > this.clone().month(0).utcOffset() ||                                                    // 2687\n            this.utcOffset() > this.clone().month(5).utcOffset()                                                       // 2688\n        );                                                                                                             // 2689\n    }                                                                                                                  // 2690\n                                                                                                                       // 2691\n    function isDaylightSavingTimeShifted () {                                                                          // 2692\n        if (!isUndefined(this._isDSTShifted)) {                                                                        // 2693\n            return this._isDSTShifted;                                                                                 // 2694\n        }                                                                                                              // 2695\n                                                                                                                       // 2696\n        var c = {};                                                                                                    // 2697\n                                                                                                                       // 2698\n        copyConfig(c, this);                                                                                           // 2699\n        c = prepareConfig(c);                                                                                          // 2700\n                                                                                                                       // 2701\n        if (c._a) {                                                                                                    // 2702\n            var other = c._isUTC ? create_utc__createUTC(c._a) : local__createLocal(c._a);                             // 2703\n            this._isDSTShifted = this.isValid() &&                                                                     // 2704\n                compareArrays(c._a, other.toArray()) > 0;                                                              // 2705\n        } else {                                                                                                       // 2706\n            this._isDSTShifted = false;                                                                                // 2707\n        }                                                                                                              // 2708\n                                                                                                                       // 2709\n        return this._isDSTShifted;                                                                                     // 2710\n    }                                                                                                                  // 2711\n                                                                                                                       // 2712\n    function isLocal () {                                                                                              // 2713\n        return this.isValid() ? !this._isUTC : false;                                                                  // 2714\n    }                                                                                                                  // 2715\n                                                                                                                       // 2716\n    function isUtcOffset () {                                                                                          // 2717\n        return this.isValid() ? this._isUTC : false;                                                                   // 2718\n    }                                                                                                                  // 2719\n                                                                                                                       // 2720\n    function isUtc () {                                                                                                // 2721\n        return this.isValid() ? this._isUTC && this._offset === 0 : false;                                             // 2722\n    }                                                                                                                  // 2723\n                                                                                                                       // 2724\n    // ASP.NET json date format regex                                                                                  // 2725\n    var aspNetRegex = /^(\\-)?(?:(\\d*)[. ])?(\\d+)\\:(\\d+)(?:\\:(\\d+)\\.?(\\d{3})?\\d*)?$/;                                   // 2726\n                                                                                                                       // 2727\n    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html                       // 2728\n    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere                                       // 2729\n    // and further modified to allow for strings containing both week and day                                          // 2730\n    var isoRegex = /^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$/;\n                                                                                                                       // 2732\n    function create__createDuration (input, key) {                                                                     // 2733\n        var duration = input,                                                                                          // 2734\n            // matching against regexp is expensive, do it on demand                                                   // 2735\n            match = null,                                                                                              // 2736\n            sign,                                                                                                      // 2737\n            ret,                                                                                                       // 2738\n            diffRes;                                                                                                   // 2739\n                                                                                                                       // 2740\n        if (isDuration(input)) {                                                                                       // 2741\n            duration = {                                                                                               // 2742\n                ms : input._milliseconds,                                                                              // 2743\n                d  : input._days,                                                                                      // 2744\n                M  : input._months                                                                                     // 2745\n            };                                                                                                         // 2746\n        } else if (typeof input === 'number') {                                                                        // 2747\n            duration = {};                                                                                             // 2748\n            if (key) {                                                                                                 // 2749\n                duration[key] = input;                                                                                 // 2750\n            } else {                                                                                                   // 2751\n                duration.milliseconds = input;                                                                         // 2752\n            }                                                                                                          // 2753\n        } else if (!!(match = aspNetRegex.exec(input))) {                                                              // 2754\n            sign = (match[1] === '-') ? -1 : 1;                                                                        // 2755\n            duration = {                                                                                               // 2756\n                y  : 0,                                                                                                // 2757\n                d  : toInt(match[DATE])        * sign,                                                                 // 2758\n                h  : toInt(match[HOUR])        * sign,                                                                 // 2759\n                m  : toInt(match[MINUTE])      * sign,                                                                 // 2760\n                s  : toInt(match[SECOND])      * sign,                                                                 // 2761\n                ms : toInt(match[MILLISECOND]) * sign                                                                  // 2762\n            };                                                                                                         // 2763\n        } else if (!!(match = isoRegex.exec(input))) {                                                                 // 2764\n            sign = (match[1] === '-') ? -1 : 1;                                                                        // 2765\n            duration = {                                                                                               // 2766\n                y : parseIso(match[2], sign),                                                                          // 2767\n                M : parseIso(match[3], sign),                                                                          // 2768\n                w : parseIso(match[4], sign),                                                                          // 2769\n                d : parseIso(match[5], sign),                                                                          // 2770\n                h : parseIso(match[6], sign),                                                                          // 2771\n                m : parseIso(match[7], sign),                                                                          // 2772\n                s : parseIso(match[8], sign)                                                                           // 2773\n            };                                                                                                         // 2774\n        } else if (duration == null) {// checks for null or undefined                                                  // 2775\n            duration = {};                                                                                             // 2776\n        } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {                         // 2777\n            diffRes = momentsDifference(local__createLocal(duration.from), local__createLocal(duration.to));           // 2778\n                                                                                                                       // 2779\n            duration = {};                                                                                             // 2780\n            duration.ms = diffRes.milliseconds;                                                                        // 2781\n            duration.M = diffRes.months;                                                                               // 2782\n        }                                                                                                              // 2783\n                                                                                                                       // 2784\n        ret = new Duration(duration);                                                                                  // 2785\n                                                                                                                       // 2786\n        if (isDuration(input) && hasOwnProp(input, '_locale')) {                                                       // 2787\n            ret._locale = input._locale;                                                                               // 2788\n        }                                                                                                              // 2789\n                                                                                                                       // 2790\n        return ret;                                                                                                    // 2791\n    }                                                                                                                  // 2792\n                                                                                                                       // 2793\n    create__createDuration.fn = Duration.prototype;                                                                    // 2794\n                                                                                                                       // 2795\n    function parseIso (inp, sign) {                                                                                    // 2796\n        // We'd normally use ~~inp for this, but unfortunately it also                                                 // 2797\n        // converts floats to ints.                                                                                    // 2798\n        // inp may be undefined, so careful calling replace on it.                                                     // 2799\n        var res = inp && parseFloat(inp.replace(',', '.'));                                                            // 2800\n        // apply sign while we're at it                                                                                // 2801\n        return (isNaN(res) ? 0 : res) * sign;                                                                          // 2802\n    }                                                                                                                  // 2803\n                                                                                                                       // 2804\n    function positiveMomentsDifference(base, other) {                                                                  // 2805\n        var res = {milliseconds: 0, months: 0};                                                                        // 2806\n                                                                                                                       // 2807\n        res.months = other.month() - base.month() +                                                                    // 2808\n            (other.year() - base.year()) * 12;                                                                         // 2809\n        if (base.clone().add(res.months, 'M').isAfter(other)) {                                                        // 2810\n            --res.months;                                                                                              // 2811\n        }                                                                                                              // 2812\n                                                                                                                       // 2813\n        res.milliseconds = +other - +(base.clone().add(res.months, 'M'));                                              // 2814\n                                                                                                                       // 2815\n        return res;                                                                                                    // 2816\n    }                                                                                                                  // 2817\n                                                                                                                       // 2818\n    function momentsDifference(base, other) {                                                                          // 2819\n        var res;                                                                                                       // 2820\n        if (!(base.isValid() && other.isValid())) {                                                                    // 2821\n            return {milliseconds: 0, months: 0};                                                                       // 2822\n        }                                                                                                              // 2823\n                                                                                                                       // 2824\n        other = cloneWithOffset(other, base);                                                                          // 2825\n        if (base.isBefore(other)) {                                                                                    // 2826\n            res = positiveMomentsDifference(base, other);                                                              // 2827\n        } else {                                                                                                       // 2828\n            res = positiveMomentsDifference(other, base);                                                              // 2829\n            res.milliseconds = -res.milliseconds;                                                                      // 2830\n            res.months = -res.months;                                                                                  // 2831\n        }                                                                                                              // 2832\n                                                                                                                       // 2833\n        return res;                                                                                                    // 2834\n    }                                                                                                                  // 2835\n                                                                                                                       // 2836\n    function absRound (number) {                                                                                       // 2837\n        if (number < 0) {                                                                                              // 2838\n            return Math.round(-1 * number) * -1;                                                                       // 2839\n        } else {                                                                                                       // 2840\n            return Math.round(number);                                                                                 // 2841\n        }                                                                                                              // 2842\n    }                                                                                                                  // 2843\n                                                                                                                       // 2844\n    // TODO: remove 'name' arg after deprecation is removed                                                            // 2845\n    function createAdder(direction, name) {                                                                            // 2846\n        return function (val, period) {                                                                                // 2847\n            var dur, tmp;                                                                                              // 2848\n            //invert the arguments, but complain about it                                                              // 2849\n            if (period !== null && !isNaN(+period)) {                                                                  // 2850\n                deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +\n                'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');                       // 2852\n                tmp = val; val = period; period = tmp;                                                                 // 2853\n            }                                                                                                          // 2854\n                                                                                                                       // 2855\n            val = typeof val === 'string' ? +val : val;                                                                // 2856\n            dur = create__createDuration(val, period);                                                                 // 2857\n            add_subtract__addSubtract(this, dur, direction);                                                           // 2858\n            return this;                                                                                               // 2859\n        };                                                                                                             // 2860\n    }                                                                                                                  // 2861\n                                                                                                                       // 2862\n    function add_subtract__addSubtract (mom, duration, isAdding, updateOffset) {                                       // 2863\n        var milliseconds = duration._milliseconds,                                                                     // 2864\n            days = absRound(duration._days),                                                                           // 2865\n            months = absRound(duration._months);                                                                       // 2866\n                                                                                                                       // 2867\n        if (!mom.isValid()) {                                                                                          // 2868\n            // No op                                                                                                   // 2869\n            return;                                                                                                    // 2870\n        }                                                                                                              // 2871\n                                                                                                                       // 2872\n        updateOffset = updateOffset == null ? true : updateOffset;                                                     // 2873\n                                                                                                                       // 2874\n        if (milliseconds) {                                                                                            // 2875\n            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);                                                // 2876\n        }                                                                                                              // 2877\n        if (days) {                                                                                                    // 2878\n            get_set__set(mom, 'Date', get_set__get(mom, 'Date') + days * isAdding);                                    // 2879\n        }                                                                                                              // 2880\n        if (months) {                                                                                                  // 2881\n            setMonth(mom, get_set__get(mom, 'Month') + months * isAdding);                                             // 2882\n        }                                                                                                              // 2883\n        if (updateOffset) {                                                                                            // 2884\n            utils_hooks__hooks.updateOffset(mom, days || months);                                                      // 2885\n        }                                                                                                              // 2886\n    }                                                                                                                  // 2887\n                                                                                                                       // 2888\n    var add_subtract__add      = createAdder(1, 'add');                                                                // 2889\n    var add_subtract__subtract = createAdder(-1, 'subtract');                                                          // 2890\n                                                                                                                       // 2891\n    function getCalendarFormat(myMoment, now) {                                                                        // 2892\n        var diff = myMoment.diff(now, 'days', true);                                                                   // 2893\n        return diff < -6 ? 'sameElse' :                                                                                // 2894\n                diff < -1 ? 'lastWeek' :                                                                               // 2895\n                diff < 0 ? 'lastDay' :                                                                                 // 2896\n                diff < 1 ? 'sameDay' :                                                                                 // 2897\n                diff < 2 ? 'nextDay' :                                                                                 // 2898\n                diff < 7 ? 'nextWeek' : 'sameElse';                                                                    // 2899\n    }                                                                                                                  // 2900\n                                                                                                                       // 2901\n    function moment_calendar__calendar (time, formats) {                                                               // 2902\n        // We want to compare the start of today, vs this.                                                             // 2903\n        // Getting start-of-today depends on whether we're local/utc/offset or not.                                    // 2904\n        var now = time || local__createLocal(),                                                                        // 2905\n            sod = cloneWithOffset(now, this).startOf('day'),                                                           // 2906\n            format = utils_hooks__hooks.calendarFormat(this, sod) || 'sameElse';                                       // 2907\n                                                                                                                       // 2908\n        var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);     // 2909\n                                                                                                                       // 2910\n        return this.format(output || this.localeData().calendar(format, this, local__createLocal(now)));               // 2911\n    }                                                                                                                  // 2912\n                                                                                                                       // 2913\n    function clone () {                                                                                                // 2914\n        return new Moment(this);                                                                                       // 2915\n    }                                                                                                                  // 2916\n                                                                                                                       // 2917\n    function isAfter (input, units) {                                                                                  // 2918\n        var localInput = isMoment(input) ? input : local__createLocal(input);                                          // 2919\n        if (!(this.isValid() && localInput.isValid())) {                                                               // 2920\n            return false;                                                                                              // 2921\n        }                                                                                                              // 2922\n        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');                                           // 2923\n        if (units === 'millisecond') {                                                                                 // 2924\n            return this.valueOf() > localInput.valueOf();                                                              // 2925\n        } else {                                                                                                       // 2926\n            return localInput.valueOf() < this.clone().startOf(units).valueOf();                                       // 2927\n        }                                                                                                              // 2928\n    }                                                                                                                  // 2929\n                                                                                                                       // 2930\n    function isBefore (input, units) {                                                                                 // 2931\n        var localInput = isMoment(input) ? input : local__createLocal(input);                                          // 2932\n        if (!(this.isValid() && localInput.isValid())) {                                                               // 2933\n            return false;                                                                                              // 2934\n        }                                                                                                              // 2935\n        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');                                           // 2936\n        if (units === 'millisecond') {                                                                                 // 2937\n            return this.valueOf() < localInput.valueOf();                                                              // 2938\n        } else {                                                                                                       // 2939\n            return this.clone().endOf(units).valueOf() < localInput.valueOf();                                         // 2940\n        }                                                                                                              // 2941\n    }                                                                                                                  // 2942\n                                                                                                                       // 2943\n    function isBetween (from, to, units, inclusivity) {                                                                // 2944\n        inclusivity = inclusivity || '()';                                                                             // 2945\n        return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) &&                   // 2946\n            (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units));                            // 2947\n    }                                                                                                                  // 2948\n                                                                                                                       // 2949\n    function isSame (input, units) {                                                                                   // 2950\n        var localInput = isMoment(input) ? input : local__createLocal(input),                                          // 2951\n            inputMs;                                                                                                   // 2952\n        if (!(this.isValid() && localInput.isValid())) {                                                               // 2953\n            return false;                                                                                              // 2954\n        }                                                                                                              // 2955\n        units = normalizeUnits(units || 'millisecond');                                                                // 2956\n        if (units === 'millisecond') {                                                                                 // 2957\n            return this.valueOf() === localInput.valueOf();                                                            // 2958\n        } else {                                                                                                       // 2959\n            inputMs = localInput.valueOf();                                                                            // 2960\n            return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();\n        }                                                                                                              // 2962\n    }                                                                                                                  // 2963\n                                                                                                                       // 2964\n    function isSameOrAfter (input, units) {                                                                            // 2965\n        return this.isSame(input, units) || this.isAfter(input,units);                                                 // 2966\n    }                                                                                                                  // 2967\n                                                                                                                       // 2968\n    function isSameOrBefore (input, units) {                                                                           // 2969\n        return this.isSame(input, units) || this.isBefore(input,units);                                                // 2970\n    }                                                                                                                  // 2971\n                                                                                                                       // 2972\n    function diff (input, units, asFloat) {                                                                            // 2973\n        var that,                                                                                                      // 2974\n            zoneDelta,                                                                                                 // 2975\n            delta, output;                                                                                             // 2976\n                                                                                                                       // 2977\n        if (!this.isValid()) {                                                                                         // 2978\n            return NaN;                                                                                                // 2979\n        }                                                                                                              // 2980\n                                                                                                                       // 2981\n        that = cloneWithOffset(input, this);                                                                           // 2982\n                                                                                                                       // 2983\n        if (!that.isValid()) {                                                                                         // 2984\n            return NaN;                                                                                                // 2985\n        }                                                                                                              // 2986\n                                                                                                                       // 2987\n        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;                                                       // 2988\n                                                                                                                       // 2989\n        units = normalizeUnits(units);                                                                                 // 2990\n                                                                                                                       // 2991\n        if (units === 'year' || units === 'month' || units === 'quarter') {                                            // 2992\n            output = monthDiff(this, that);                                                                            // 2993\n            if (units === 'quarter') {                                                                                 // 2994\n                output = output / 3;                                                                                   // 2995\n            } else if (units === 'year') {                                                                             // 2996\n                output = output / 12;                                                                                  // 2997\n            }                                                                                                          // 2998\n        } else {                                                                                                       // 2999\n            delta = this - that;                                                                                       // 3000\n            output = units === 'second' ? delta / 1e3 : // 1000                                                        // 3001\n                units === 'minute' ? delta / 6e4 : // 1000 * 60                                                        // 3002\n                units === 'hour' ? delta / 36e5 : // 1000 * 60 * 60                                                    // 3003\n                units === 'day' ? (delta - zoneDelta) / 864e5 : // 1000 * 60 * 60 * 24, negate dst                     // 3004\n                units === 'week' ? (delta - zoneDelta) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst               // 3005\n                delta;                                                                                                 // 3006\n        }                                                                                                              // 3007\n        return asFloat ? output : absFloor(output);                                                                    // 3008\n    }                                                                                                                  // 3009\n                                                                                                                       // 3010\n    function monthDiff (a, b) {                                                                                        // 3011\n        // difference in months                                                                                        // 3012\n        var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),                                   // 3013\n            // b is in (anchor - 1 month, anchor + 1 month)                                                            // 3014\n            anchor = a.clone().add(wholeMonthDiff, 'months'),                                                          // 3015\n            anchor2, adjust;                                                                                           // 3016\n                                                                                                                       // 3017\n        if (b - anchor < 0) {                                                                                          // 3018\n            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');                                                     // 3019\n            // linear across the month                                                                                 // 3020\n            adjust = (b - anchor) / (anchor - anchor2);                                                                // 3021\n        } else {                                                                                                       // 3022\n            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');                                                     // 3023\n            // linear across the month                                                                                 // 3024\n            adjust = (b - anchor) / (anchor2 - anchor);                                                                // 3025\n        }                                                                                                              // 3026\n                                                                                                                       // 3027\n        //check for negative zero, return zero if negative zero                                                        // 3028\n        return -(wholeMonthDiff + adjust) || 0;                                                                        // 3029\n    }                                                                                                                  // 3030\n                                                                                                                       // 3031\n    utils_hooks__hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';                                                         // 3032\n    utils_hooks__hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';                                                    // 3033\n                                                                                                                       // 3034\n    function toString () {                                                                                             // 3035\n        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');                                   // 3036\n    }                                                                                                                  // 3037\n                                                                                                                       // 3038\n    function moment_format__toISOString () {                                                                           // 3039\n        var m = this.clone().utc();                                                                                    // 3040\n        if (0 < m.year() && m.year() <= 9999) {                                                                        // 3041\n            if (isFunction(Date.prototype.toISOString)) {                                                              // 3042\n                // native implementation is ~50x faster, use it when we can                                            // 3043\n                return this.toDate().toISOString();                                                                    // 3044\n            } else {                                                                                                   // 3045\n                return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');                                                // 3046\n            }                                                                                                          // 3047\n        } else {                                                                                                       // 3048\n            return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');                                                  // 3049\n        }                                                                                                              // 3050\n    }                                                                                                                  // 3051\n                                                                                                                       // 3052\n    function format (inputString) {                                                                                    // 3053\n        if (!inputString) {                                                                                            // 3054\n            inputString = this.isUtc() ? utils_hooks__hooks.defaultFormatUtc : utils_hooks__hooks.defaultFormat;       // 3055\n        }                                                                                                              // 3056\n        var output = formatMoment(this, inputString);                                                                  // 3057\n        return this.localeData().postformat(output);                                                                   // 3058\n    }                                                                                                                  // 3059\n                                                                                                                       // 3060\n    function from (time, withoutSuffix) {                                                                              // 3061\n        if (this.isValid() &&                                                                                          // 3062\n                ((isMoment(time) && time.isValid()) ||                                                                 // 3063\n                 local__createLocal(time).isValid())) {                                                                // 3064\n            return create__createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);      // 3065\n        } else {                                                                                                       // 3066\n            return this.localeData().invalidDate();                                                                    // 3067\n        }                                                                                                              // 3068\n    }                                                                                                                  // 3069\n                                                                                                                       // 3070\n    function fromNow (withoutSuffix) {                                                                                 // 3071\n        return this.from(local__createLocal(), withoutSuffix);                                                         // 3072\n    }                                                                                                                  // 3073\n                                                                                                                       // 3074\n    function to (time, withoutSuffix) {                                                                                // 3075\n        if (this.isValid() &&                                                                                          // 3076\n                ((isMoment(time) && time.isValid()) ||                                                                 // 3077\n                 local__createLocal(time).isValid())) {                                                                // 3078\n            return create__createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);      // 3079\n        } else {                                                                                                       // 3080\n            return this.localeData().invalidDate();                                                                    // 3081\n        }                                                                                                              // 3082\n    }                                                                                                                  // 3083\n                                                                                                                       // 3084\n    function toNow (withoutSuffix) {                                                                                   // 3085\n        return this.to(local__createLocal(), withoutSuffix);                                                           // 3086\n    }                                                                                                                  // 3087\n                                                                                                                       // 3088\n    // If passed a locale key, it will set the locale for this                                                         // 3089\n    // instance.  Otherwise, it will return the locale configuration                                                   // 3090\n    // variables for this instance.                                                                                    // 3091\n    function locale (key) {                                                                                            // 3092\n        var newLocaleData;                                                                                             // 3093\n                                                                                                                       // 3094\n        if (key === undefined) {                                                                                       // 3095\n            return this._locale._abbr;                                                                                 // 3096\n        } else {                                                                                                       // 3097\n            newLocaleData = locale_locales__getLocale(key);                                                            // 3098\n            if (newLocaleData != null) {                                                                               // 3099\n                this._locale = newLocaleData;                                                                          // 3100\n            }                                                                                                          // 3101\n            return this;                                                                                               // 3102\n        }                                                                                                              // 3103\n    }                                                                                                                  // 3104\n                                                                                                                       // 3105\n    var lang = deprecate(                                                                                              // 3106\n        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',\n        function (key) {                                                                                               // 3108\n            if (key === undefined) {                                                                                   // 3109\n                return this.localeData();                                                                              // 3110\n            } else {                                                                                                   // 3111\n                return this.locale(key);                                                                               // 3112\n            }                                                                                                          // 3113\n        }                                                                                                              // 3114\n    );                                                                                                                 // 3115\n                                                                                                                       // 3116\n    function localeData () {                                                                                           // 3117\n        return this._locale;                                                                                           // 3118\n    }                                                                                                                  // 3119\n                                                                                                                       // 3120\n    function startOf (units) {                                                                                         // 3121\n        units = normalizeUnits(units);                                                                                 // 3122\n        // the following switch intentionally omits break keywords                                                     // 3123\n        // to utilize falling through the cases.                                                                       // 3124\n        switch (units) {                                                                                               // 3125\n            case 'year':                                                                                               // 3126\n                this.month(0);                                                                                         // 3127\n                /* falls through */                                                                                    // 3128\n            case 'quarter':                                                                                            // 3129\n            case 'month':                                                                                              // 3130\n                this.date(1);                                                                                          // 3131\n                /* falls through */                                                                                    // 3132\n            case 'week':                                                                                               // 3133\n            case 'isoWeek':                                                                                            // 3134\n            case 'day':                                                                                                // 3135\n            case 'date':                                                                                               // 3136\n                this.hours(0);                                                                                         // 3137\n                /* falls through */                                                                                    // 3138\n            case 'hour':                                                                                               // 3139\n                this.minutes(0);                                                                                       // 3140\n                /* falls through */                                                                                    // 3141\n            case 'minute':                                                                                             // 3142\n                this.seconds(0);                                                                                       // 3143\n                /* falls through */                                                                                    // 3144\n            case 'second':                                                                                             // 3145\n                this.milliseconds(0);                                                                                  // 3146\n        }                                                                                                              // 3147\n                                                                                                                       // 3148\n        // weeks are a special case                                                                                    // 3149\n        if (units === 'week') {                                                                                        // 3150\n            this.weekday(0);                                                                                           // 3151\n        }                                                                                                              // 3152\n        if (units === 'isoWeek') {                                                                                     // 3153\n            this.isoWeekday(1);                                                                                        // 3154\n        }                                                                                                              // 3155\n                                                                                                                       // 3156\n        // quarters are also special                                                                                   // 3157\n        if (units === 'quarter') {                                                                                     // 3158\n            this.month(Math.floor(this.month() / 3) * 3);                                                              // 3159\n        }                                                                                                              // 3160\n                                                                                                                       // 3161\n        return this;                                                                                                   // 3162\n    }                                                                                                                  // 3163\n                                                                                                                       // 3164\n    function endOf (units) {                                                                                           // 3165\n        units = normalizeUnits(units);                                                                                 // 3166\n        if (units === undefined || units === 'millisecond') {                                                          // 3167\n            return this;                                                                                               // 3168\n        }                                                                                                              // 3169\n                                                                                                                       // 3170\n        // 'date' is an alias for 'day', so it should be considered as such.                                           // 3171\n        if (units === 'date') {                                                                                        // 3172\n            units = 'day';                                                                                             // 3173\n        }                                                                                                              // 3174\n                                                                                                                       // 3175\n        return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');                   // 3176\n    }                                                                                                                  // 3177\n                                                                                                                       // 3178\n    function to_type__valueOf () {                                                                                     // 3179\n        return this._d.valueOf() - ((this._offset || 0) * 60000);                                                      // 3180\n    }                                                                                                                  // 3181\n                                                                                                                       // 3182\n    function unix () {                                                                                                 // 3183\n        return Math.floor(this.valueOf() / 1000);                                                                      // 3184\n    }                                                                                                                  // 3185\n                                                                                                                       // 3186\n    function toDate () {                                                                                               // 3187\n        return new Date(this.valueOf());                                                                               // 3188\n    }                                                                                                                  // 3189\n                                                                                                                       // 3190\n    function toArray () {                                                                                              // 3191\n        var m = this;                                                                                                  // 3192\n        return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];                     // 3193\n    }                                                                                                                  // 3194\n                                                                                                                       // 3195\n    function toObject () {                                                                                             // 3196\n        var m = this;                                                                                                  // 3197\n        return {                                                                                                       // 3198\n            years: m.year(),                                                                                           // 3199\n            months: m.month(),                                                                                         // 3200\n            date: m.date(),                                                                                            // 3201\n            hours: m.hours(),                                                                                          // 3202\n            minutes: m.minutes(),                                                                                      // 3203\n            seconds: m.seconds(),                                                                                      // 3204\n            milliseconds: m.milliseconds()                                                                             // 3205\n        };                                                                                                             // 3206\n    }                                                                                                                  // 3207\n                                                                                                                       // 3208\n    function toJSON () {                                                                                               // 3209\n        // new Date(NaN).toJSON() === null                                                                             // 3210\n        return this.isValid() ? this.toISOString() : null;                                                             // 3211\n    }                                                                                                                  // 3212\n                                                                                                                       // 3213\n    function moment_valid__isValid () {                                                                                // 3214\n        return valid__isValid(this);                                                                                   // 3215\n    }                                                                                                                  // 3216\n                                                                                                                       // 3217\n    function parsingFlags () {                                                                                         // 3218\n        return extend({}, getParsingFlags(this));                                                                      // 3219\n    }                                                                                                                  // 3220\n                                                                                                                       // 3221\n    function invalidAt () {                                                                                            // 3222\n        return getParsingFlags(this).overflow;                                                                         // 3223\n    }                                                                                                                  // 3224\n                                                                                                                       // 3225\n    function creationData() {                                                                                          // 3226\n        return {                                                                                                       // 3227\n            input: this._i,                                                                                            // 3228\n            format: this._f,                                                                                           // 3229\n            locale: this._locale,                                                                                      // 3230\n            isUTC: this._isUTC,                                                                                        // 3231\n            strict: this._strict                                                                                       // 3232\n        };                                                                                                             // 3233\n    }                                                                                                                  // 3234\n                                                                                                                       // 3235\n    // FORMATTING                                                                                                      // 3236\n                                                                                                                       // 3237\n    addFormatToken(0, ['gg', 2], 0, function () {                                                                      // 3238\n        return this.weekYear() % 100;                                                                                  // 3239\n    });                                                                                                                // 3240\n                                                                                                                       // 3241\n    addFormatToken(0, ['GG', 2], 0, function () {                                                                      // 3242\n        return this.isoWeekYear() % 100;                                                                               // 3243\n    });                                                                                                                // 3244\n                                                                                                                       // 3245\n    function addWeekYearFormatToken (token, getter) {                                                                  // 3246\n        addFormatToken(0, [token, token.length], 0, getter);                                                           // 3247\n    }                                                                                                                  // 3248\n                                                                                                                       // 3249\n    addWeekYearFormatToken('gggg',     'weekYear');                                                                    // 3250\n    addWeekYearFormatToken('ggggg',    'weekYear');                                                                    // 3251\n    addWeekYearFormatToken('GGGG',  'isoWeekYear');                                                                    // 3252\n    addWeekYearFormatToken('GGGGG', 'isoWeekYear');                                                                    // 3253\n                                                                                                                       // 3254\n    // ALIASES                                                                                                         // 3255\n                                                                                                                       // 3256\n    addUnitAlias('weekYear', 'gg');                                                                                    // 3257\n    addUnitAlias('isoWeekYear', 'GG');                                                                                 // 3258\n                                                                                                                       // 3259\n    // PRIORITY                                                                                                        // 3260\n                                                                                                                       // 3261\n    addUnitPriority('weekYear', 1);                                                                                    // 3262\n    addUnitPriority('isoWeekYear', 1);                                                                                 // 3263\n                                                                                                                       // 3264\n                                                                                                                       // 3265\n    // PARSING                                                                                                         // 3266\n                                                                                                                       // 3267\n    addRegexToken('G',      matchSigned);                                                                              // 3268\n    addRegexToken('g',      matchSigned);                                                                              // 3269\n    addRegexToken('GG',     match1to2, match2);                                                                        // 3270\n    addRegexToken('gg',     match1to2, match2);                                                                        // 3271\n    addRegexToken('GGGG',   match1to4, match4);                                                                        // 3272\n    addRegexToken('gggg',   match1to4, match4);                                                                        // 3273\n    addRegexToken('GGGGG',  match1to6, match6);                                                                        // 3274\n    addRegexToken('ggggg',  match1to6, match6);                                                                        // 3275\n                                                                                                                       // 3276\n    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {                      // 3277\n        week[token.substr(0, 2)] = toInt(input);                                                                       // 3278\n    });                                                                                                                // 3279\n                                                                                                                       // 3280\n    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {                                            // 3281\n        week[token] = utils_hooks__hooks.parseTwoDigitYear(input);                                                     // 3282\n    });                                                                                                                // 3283\n                                                                                                                       // 3284\n    // MOMENTS                                                                                                         // 3285\n                                                                                                                       // 3286\n    function getSetWeekYear (input) {                                                                                  // 3287\n        return getSetWeekYearHelper.call(this,                                                                         // 3288\n                input,                                                                                                 // 3289\n                this.week(),                                                                                           // 3290\n                this.weekday(),                                                                                        // 3291\n                this.localeData()._week.dow,                                                                           // 3292\n                this.localeData()._week.doy);                                                                          // 3293\n    }                                                                                                                  // 3294\n                                                                                                                       // 3295\n    function getSetISOWeekYear (input) {                                                                               // 3296\n        return getSetWeekYearHelper.call(this,                                                                         // 3297\n                input, this.isoWeek(), this.isoWeekday(), 1, 4);                                                       // 3298\n    }                                                                                                                  // 3299\n                                                                                                                       // 3300\n    function getISOWeeksInYear () {                                                                                    // 3301\n        return weeksInYear(this.year(), 1, 4);                                                                         // 3302\n    }                                                                                                                  // 3303\n                                                                                                                       // 3304\n    function getWeeksInYear () {                                                                                       // 3305\n        var weekInfo = this.localeData()._week;                                                                        // 3306\n        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);                                                   // 3307\n    }                                                                                                                  // 3308\n                                                                                                                       // 3309\n    function getSetWeekYearHelper(input, week, weekday, dow, doy) {                                                    // 3310\n        var weeksTarget;                                                                                               // 3311\n        if (input == null) {                                                                                           // 3312\n            return weekOfYear(this, dow, doy).year;                                                                    // 3313\n        } else {                                                                                                       // 3314\n            weeksTarget = weeksInYear(input, dow, doy);                                                                // 3315\n            if (week > weeksTarget) {                                                                                  // 3316\n                week = weeksTarget;                                                                                    // 3317\n            }                                                                                                          // 3318\n            return setWeekAll.call(this, input, week, weekday, dow, doy);                                              // 3319\n        }                                                                                                              // 3320\n    }                                                                                                                  // 3321\n                                                                                                                       // 3322\n    function setWeekAll(weekYear, week, weekday, dow, doy) {                                                           // 3323\n        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),                                     // 3324\n            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);                                      // 3325\n                                                                                                                       // 3326\n        this.year(date.getUTCFullYear());                                                                              // 3327\n        this.month(date.getUTCMonth());                                                                                // 3328\n        this.date(date.getUTCDate());                                                                                  // 3329\n        return this;                                                                                                   // 3330\n    }                                                                                                                  // 3331\n                                                                                                                       // 3332\n    // FORMATTING                                                                                                      // 3333\n                                                                                                                       // 3334\n    addFormatToken('Q', 0, 'Qo', 'quarter');                                                                           // 3335\n                                                                                                                       // 3336\n    // ALIASES                                                                                                         // 3337\n                                                                                                                       // 3338\n    addUnitAlias('quarter', 'Q');                                                                                      // 3339\n                                                                                                                       // 3340\n    // PRIORITY                                                                                                        // 3341\n                                                                                                                       // 3342\n    addUnitPriority('quarter', 7);                                                                                     // 3343\n                                                                                                                       // 3344\n    // PARSING                                                                                                         // 3345\n                                                                                                                       // 3346\n    addRegexToken('Q', match1);                                                                                        // 3347\n    addParseToken('Q', function (input, array) {                                                                       // 3348\n        array[MONTH] = (toInt(input) - 1) * 3;                                                                         // 3349\n    });                                                                                                                // 3350\n                                                                                                                       // 3351\n    // MOMENTS                                                                                                         // 3352\n                                                                                                                       // 3353\n    function getSetQuarter (input) {                                                                                   // 3354\n        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);     // 3355\n    }                                                                                                                  // 3356\n                                                                                                                       // 3357\n    // FORMATTING                                                                                                      // 3358\n                                                                                                                       // 3359\n    addFormatToken('D', ['DD', 2], 'Do', 'date');                                                                      // 3360\n                                                                                                                       // 3361\n    // ALIASES                                                                                                         // 3362\n                                                                                                                       // 3363\n    addUnitAlias('date', 'D');                                                                                         // 3364\n                                                                                                                       // 3365\n    // PRIOROITY                                                                                                       // 3366\n    addUnitPriority('date', 9);                                                                                        // 3367\n                                                                                                                       // 3368\n    // PARSING                                                                                                         // 3369\n                                                                                                                       // 3370\n    addRegexToken('D',  match1to2);                                                                                    // 3371\n    addRegexToken('DD', match1to2, match2);                                                                            // 3372\n    addRegexToken('Do', function (isStrict, locale) {                                                                  // 3373\n        return isStrict ? locale._ordinalParse : locale._ordinalParseLenient;                                          // 3374\n    });                                                                                                                // 3375\n                                                                                                                       // 3376\n    addParseToken(['D', 'DD'], DATE);                                                                                  // 3377\n    addParseToken('Do', function (input, array) {                                                                      // 3378\n        array[DATE] = toInt(input.match(match1to2)[0], 10);                                                            // 3379\n    });                                                                                                                // 3380\n                                                                                                                       // 3381\n    // MOMENTS                                                                                                         // 3382\n                                                                                                                       // 3383\n    var getSetDayOfMonth = makeGetSet('Date', true);                                                                   // 3384\n                                                                                                                       // 3385\n    // FORMATTING                                                                                                      // 3386\n                                                                                                                       // 3387\n    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');                                                           // 3388\n                                                                                                                       // 3389\n    // ALIASES                                                                                                         // 3390\n                                                                                                                       // 3391\n    addUnitAlias('dayOfYear', 'DDD');                                                                                  // 3392\n                                                                                                                       // 3393\n    // PRIORITY                                                                                                        // 3394\n    addUnitPriority('dayOfYear', 4);                                                                                   // 3395\n                                                                                                                       // 3396\n    // PARSING                                                                                                         // 3397\n                                                                                                                       // 3398\n    addRegexToken('DDD',  match1to3);                                                                                  // 3399\n    addRegexToken('DDDD', match3);                                                                                     // 3400\n    addParseToken(['DDD', 'DDDD'], function (input, array, config) {                                                   // 3401\n        config._dayOfYear = toInt(input);                                                                              // 3402\n    });                                                                                                                // 3403\n                                                                                                                       // 3404\n    // HELPERS                                                                                                         // 3405\n                                                                                                                       // 3406\n    // MOMENTS                                                                                                         // 3407\n                                                                                                                       // 3408\n    function getSetDayOfYear (input) {                                                                                 // 3409\n        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;          // 3410\n        return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');                                         // 3411\n    }                                                                                                                  // 3412\n                                                                                                                       // 3413\n    // FORMATTING                                                                                                      // 3414\n                                                                                                                       // 3415\n    addFormatToken('m', ['mm', 2], 0, 'minute');                                                                       // 3416\n                                                                                                                       // 3417\n    // ALIASES                                                                                                         // 3418\n                                                                                                                       // 3419\n    addUnitAlias('minute', 'm');                                                                                       // 3420\n                                                                                                                       // 3421\n    // PRIORITY                                                                                                        // 3422\n                                                                                                                       // 3423\n    addUnitPriority('minute', 14);                                                                                     // 3424\n                                                                                                                       // 3425\n    // PARSING                                                                                                         // 3426\n                                                                                                                       // 3427\n    addRegexToken('m',  match1to2);                                                                                    // 3428\n    addRegexToken('mm', match1to2, match2);                                                                            // 3429\n    addParseToken(['m', 'mm'], MINUTE);                                                                                // 3430\n                                                                                                                       // 3431\n    // MOMENTS                                                                                                         // 3432\n                                                                                                                       // 3433\n    var getSetMinute = makeGetSet('Minutes', false);                                                                   // 3434\n                                                                                                                       // 3435\n    // FORMATTING                                                                                                      // 3436\n                                                                                                                       // 3437\n    addFormatToken('s', ['ss', 2], 0, 'second');                                                                       // 3438\n                                                                                                                       // 3439\n    // ALIASES                                                                                                         // 3440\n                                                                                                                       // 3441\n    addUnitAlias('second', 's');                                                                                       // 3442\n                                                                                                                       // 3443\n    // PRIORITY                                                                                                        // 3444\n                                                                                                                       // 3445\n    addUnitPriority('second', 15);                                                                                     // 3446\n                                                                                                                       // 3447\n    // PARSING                                                                                                         // 3448\n                                                                                                                       // 3449\n    addRegexToken('s',  match1to2);                                                                                    // 3450\n    addRegexToken('ss', match1to2, match2);                                                                            // 3451\n    addParseToken(['s', 'ss'], SECOND);                                                                                // 3452\n                                                                                                                       // 3453\n    // MOMENTS                                                                                                         // 3454\n                                                                                                                       // 3455\n    var getSetSecond = makeGetSet('Seconds', false);                                                                   // 3456\n                                                                                                                       // 3457\n    // FORMATTING                                                                                                      // 3458\n                                                                                                                       // 3459\n    addFormatToken('S', 0, 0, function () {                                                                            // 3460\n        return ~~(this.millisecond() / 100);                                                                           // 3461\n    });                                                                                                                // 3462\n                                                                                                                       // 3463\n    addFormatToken(0, ['SS', 2], 0, function () {                                                                      // 3464\n        return ~~(this.millisecond() / 10);                                                                            // 3465\n    });                                                                                                                // 3466\n                                                                                                                       // 3467\n    addFormatToken(0, ['SSS', 3], 0, 'millisecond');                                                                   // 3468\n    addFormatToken(0, ['SSSS', 4], 0, function () {                                                                    // 3469\n        return this.millisecond() * 10;                                                                                // 3470\n    });                                                                                                                // 3471\n    addFormatToken(0, ['SSSSS', 5], 0, function () {                                                                   // 3472\n        return this.millisecond() * 100;                                                                               // 3473\n    });                                                                                                                // 3474\n    addFormatToken(0, ['SSSSSS', 6], 0, function () {                                                                  // 3475\n        return this.millisecond() * 1000;                                                                              // 3476\n    });                                                                                                                // 3477\n    addFormatToken(0, ['SSSSSSS', 7], 0, function () {                                                                 // 3478\n        return this.millisecond() * 10000;                                                                             // 3479\n    });                                                                                                                // 3480\n    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {                                                                // 3481\n        return this.millisecond() * 100000;                                                                            // 3482\n    });                                                                                                                // 3483\n    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {                                                               // 3484\n        return this.millisecond() * 1000000;                                                                           // 3485\n    });                                                                                                                // 3486\n                                                                                                                       // 3487\n                                                                                                                       // 3488\n    // ALIASES                                                                                                         // 3489\n                                                                                                                       // 3490\n    addUnitAlias('millisecond', 'ms');                                                                                 // 3491\n                                                                                                                       // 3492\n    // PRIORITY                                                                                                        // 3493\n                                                                                                                       // 3494\n    addUnitPriority('millisecond', 16);                                                                                // 3495\n                                                                                                                       // 3496\n    // PARSING                                                                                                         // 3497\n                                                                                                                       // 3498\n    addRegexToken('S',    match1to3, match1);                                                                          // 3499\n    addRegexToken('SS',   match1to3, match2);                                                                          // 3500\n    addRegexToken('SSS',  match1to3, match3);                                                                          // 3501\n                                                                                                                       // 3502\n    var token;                                                                                                         // 3503\n    for (token = 'SSSS'; token.length <= 9; token += 'S') {                                                            // 3504\n        addRegexToken(token, matchUnsigned);                                                                           // 3505\n    }                                                                                                                  // 3506\n                                                                                                                       // 3507\n    function parseMs(input, array) {                                                                                   // 3508\n        array[MILLISECOND] = toInt(('0.' + input) * 1000);                                                             // 3509\n    }                                                                                                                  // 3510\n                                                                                                                       // 3511\n    for (token = 'S'; token.length <= 9; token += 'S') {                                                               // 3512\n        addParseToken(token, parseMs);                                                                                 // 3513\n    }                                                                                                                  // 3514\n    // MOMENTS                                                                                                         // 3515\n                                                                                                                       // 3516\n    var getSetMillisecond = makeGetSet('Milliseconds', false);                                                         // 3517\n                                                                                                                       // 3518\n    // FORMATTING                                                                                                      // 3519\n                                                                                                                       // 3520\n    addFormatToken('z',  0, 0, 'zoneAbbr');                                                                            // 3521\n    addFormatToken('zz', 0, 0, 'zoneName');                                                                            // 3522\n                                                                                                                       // 3523\n    // MOMENTS                                                                                                         // 3524\n                                                                                                                       // 3525\n    function getZoneAbbr () {                                                                                          // 3526\n        return this._isUTC ? 'UTC' : '';                                                                               // 3527\n    }                                                                                                                  // 3528\n                                                                                                                       // 3529\n    function getZoneName () {                                                                                          // 3530\n        return this._isUTC ? 'Coordinated Universal Time' : '';                                                        // 3531\n    }                                                                                                                  // 3532\n                                                                                                                       // 3533\n    var momentPrototype__proto = Moment.prototype;                                                                     // 3534\n                                                                                                                       // 3535\n    momentPrototype__proto.add               = add_subtract__add;                                                      // 3536\n    momentPrototype__proto.calendar          = moment_calendar__calendar;                                              // 3537\n    momentPrototype__proto.clone             = clone;                                                                  // 3538\n    momentPrototype__proto.diff              = diff;                                                                   // 3539\n    momentPrototype__proto.endOf             = endOf;                                                                  // 3540\n    momentPrototype__proto.format            = format;                                                                 // 3541\n    momentPrototype__proto.from              = from;                                                                   // 3542\n    momentPrototype__proto.fromNow           = fromNow;                                                                // 3543\n    momentPrototype__proto.to                = to;                                                                     // 3544\n    momentPrototype__proto.toNow             = toNow;                                                                  // 3545\n    momentPrototype__proto.get               = stringGet;                                                              // 3546\n    momentPrototype__proto.invalidAt         = invalidAt;                                                              // 3547\n    momentPrototype__proto.isAfter           = isAfter;                                                                // 3548\n    momentPrototype__proto.isBefore          = isBefore;                                                               // 3549\n    momentPrototype__proto.isBetween         = isBetween;                                                              // 3550\n    momentPrototype__proto.isSame            = isSame;                                                                 // 3551\n    momentPrototype__proto.isSameOrAfter     = isSameOrAfter;                                                          // 3552\n    momentPrototype__proto.isSameOrBefore    = isSameOrBefore;                                                         // 3553\n    momentPrototype__proto.isValid           = moment_valid__isValid;                                                  // 3554\n    momentPrototype__proto.lang              = lang;                                                                   // 3555\n    momentPrototype__proto.locale            = locale;                                                                 // 3556\n    momentPrototype__proto.localeData        = localeData;                                                             // 3557\n    momentPrototype__proto.max               = prototypeMax;                                                           // 3558\n    momentPrototype__proto.min               = prototypeMin;                                                           // 3559\n    momentPrototype__proto.parsingFlags      = parsingFlags;                                                           // 3560\n    momentPrototype__proto.set               = stringSet;                                                              // 3561\n    momentPrototype__proto.startOf           = startOf;                                                                // 3562\n    momentPrototype__proto.subtract          = add_subtract__subtract;                                                 // 3563\n    momentPrototype__proto.toArray           = toArray;                                                                // 3564\n    momentPrototype__proto.toObject          = toObject;                                                               // 3565\n    momentPrototype__proto.toDate            = toDate;                                                                 // 3566\n    momentPrototype__proto.toISOString       = moment_format__toISOString;                                             // 3567\n    momentPrototype__proto.toJSON            = toJSON;                                                                 // 3568\n    momentPrototype__proto.toString          = toString;                                                               // 3569\n    momentPrototype__proto.unix              = unix;                                                                   // 3570\n    momentPrototype__proto.valueOf           = to_type__valueOf;                                                       // 3571\n    momentPrototype__proto.creationData      = creationData;                                                           // 3572\n                                                                                                                       // 3573\n    // Year                                                                                                            // 3574\n    momentPrototype__proto.year       = getSetYear;                                                                    // 3575\n    momentPrototype__proto.isLeapYear = getIsLeapYear;                                                                 // 3576\n                                                                                                                       // 3577\n    // Week Year                                                                                                       // 3578\n    momentPrototype__proto.weekYear    = getSetWeekYear;                                                               // 3579\n    momentPrototype__proto.isoWeekYear = getSetISOWeekYear;                                                            // 3580\n                                                                                                                       // 3581\n    // Quarter                                                                                                         // 3582\n    momentPrototype__proto.quarter = momentPrototype__proto.quarters = getSetQuarter;                                  // 3583\n                                                                                                                       // 3584\n    // Month                                                                                                           // 3585\n    momentPrototype__proto.month       = getSetMonth;                                                                  // 3586\n    momentPrototype__proto.daysInMonth = getDaysInMonth;                                                               // 3587\n                                                                                                                       // 3588\n    // Week                                                                                                            // 3589\n    momentPrototype__proto.week           = momentPrototype__proto.weeks        = getSetWeek;                          // 3590\n    momentPrototype__proto.isoWeek        = momentPrototype__proto.isoWeeks     = getSetISOWeek;                       // 3591\n    momentPrototype__proto.weeksInYear    = getWeeksInYear;                                                            // 3592\n    momentPrototype__proto.isoWeeksInYear = getISOWeeksInYear;                                                         // 3593\n                                                                                                                       // 3594\n    // Day                                                                                                             // 3595\n    momentPrototype__proto.date       = getSetDayOfMonth;                                                              // 3596\n    momentPrototype__proto.day        = momentPrototype__proto.days             = getSetDayOfWeek;                     // 3597\n    momentPrototype__proto.weekday    = getSetLocaleDayOfWeek;                                                         // 3598\n    momentPrototype__proto.isoWeekday = getSetISODayOfWeek;                                                            // 3599\n    momentPrototype__proto.dayOfYear  = getSetDayOfYear;                                                               // 3600\n                                                                                                                       // 3601\n    // Hour                                                                                                            // 3602\n    momentPrototype__proto.hour = momentPrototype__proto.hours = getSetHour;                                           // 3603\n                                                                                                                       // 3604\n    // Minute                                                                                                          // 3605\n    momentPrototype__proto.minute = momentPrototype__proto.minutes = getSetMinute;                                     // 3606\n                                                                                                                       // 3607\n    // Second                                                                                                          // 3608\n    momentPrototype__proto.second = momentPrototype__proto.seconds = getSetSecond;                                     // 3609\n                                                                                                                       // 3610\n    // Millisecond                                                                                                     // 3611\n    momentPrototype__proto.millisecond = momentPrototype__proto.milliseconds = getSetMillisecond;                      // 3612\n                                                                                                                       // 3613\n    // Offset                                                                                                          // 3614\n    momentPrototype__proto.utcOffset            = getSetOffset;                                                        // 3615\n    momentPrototype__proto.utc                  = setOffsetToUTC;                                                      // 3616\n    momentPrototype__proto.local                = setOffsetToLocal;                                                    // 3617\n    momentPrototype__proto.parseZone            = setOffsetToParsedOffset;                                             // 3618\n    momentPrototype__proto.hasAlignedHourOffset = hasAlignedHourOffset;                                                // 3619\n    momentPrototype__proto.isDST                = isDaylightSavingTime;                                                // 3620\n    momentPrototype__proto.isLocal              = isLocal;                                                             // 3621\n    momentPrototype__proto.isUtcOffset          = isUtcOffset;                                                         // 3622\n    momentPrototype__proto.isUtc                = isUtc;                                                               // 3623\n    momentPrototype__proto.isUTC                = isUtc;                                                               // 3624\n                                                                                                                       // 3625\n    // Timezone                                                                                                        // 3626\n    momentPrototype__proto.zoneAbbr = getZoneAbbr;                                                                     // 3627\n    momentPrototype__proto.zoneName = getZoneName;                                                                     // 3628\n                                                                                                                       // 3629\n    // Deprecations                                                                                                    // 3630\n    momentPrototype__proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);    // 3631\n    momentPrototype__proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);        // 3632\n    momentPrototype__proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);           // 3633\n    momentPrototype__proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);\n    momentPrototype__proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);\n                                                                                                                       // 3636\n    var momentPrototype = momentPrototype__proto;                                                                      // 3637\n                                                                                                                       // 3638\n    function moment__createUnix (input) {                                                                              // 3639\n        return local__createLocal(input * 1000);                                                                       // 3640\n    }                                                                                                                  // 3641\n                                                                                                                       // 3642\n    function moment__createInZone () {                                                                                 // 3643\n        return local__createLocal.apply(null, arguments).parseZone();                                                  // 3644\n    }                                                                                                                  // 3645\n                                                                                                                       // 3646\n    function preParsePostFormat (string) {                                                                             // 3647\n        return string;                                                                                                 // 3648\n    }                                                                                                                  // 3649\n                                                                                                                       // 3650\n    var prototype__proto = Locale.prototype;                                                                           // 3651\n                                                                                                                       // 3652\n    prototype__proto.calendar        = locale_calendar__calendar;                                                      // 3653\n    prototype__proto.longDateFormat  = longDateFormat;                                                                 // 3654\n    prototype__proto.invalidDate     = invalidDate;                                                                    // 3655\n    prototype__proto.ordinal         = ordinal;                                                                        // 3656\n    prototype__proto.preparse        = preParsePostFormat;                                                             // 3657\n    prototype__proto.postformat      = preParsePostFormat;                                                             // 3658\n    prototype__proto.relativeTime    = relative__relativeTime;                                                         // 3659\n    prototype__proto.pastFuture      = pastFuture;                                                                     // 3660\n    prototype__proto.set             = locale_set__set;                                                                // 3661\n                                                                                                                       // 3662\n    // Month                                                                                                           // 3663\n    prototype__proto.months            =        localeMonths;                                                          // 3664\n    prototype__proto.monthsShort       =        localeMonthsShort;                                                     // 3665\n    prototype__proto.monthsParse       =        localeMonthsParse;                                                     // 3666\n    prototype__proto.monthsRegex       = monthsRegex;                                                                  // 3667\n    prototype__proto.monthsShortRegex  = monthsShortRegex;                                                             // 3668\n                                                                                                                       // 3669\n    // Week                                                                                                            // 3670\n    prototype__proto.week = localeWeek;                                                                                // 3671\n    prototype__proto.firstDayOfYear = localeFirstDayOfYear;                                                            // 3672\n    prototype__proto.firstDayOfWeek = localeFirstDayOfWeek;                                                            // 3673\n                                                                                                                       // 3674\n    // Day of Week                                                                                                     // 3675\n    prototype__proto.weekdays       =        localeWeekdays;                                                           // 3676\n    prototype__proto.weekdaysMin    =        localeWeekdaysMin;                                                        // 3677\n    prototype__proto.weekdaysShort  =        localeWeekdaysShort;                                                      // 3678\n    prototype__proto.weekdaysParse  =        localeWeekdaysParse;                                                      // 3679\n                                                                                                                       // 3680\n    prototype__proto.weekdaysRegex       =        weekdaysRegex;                                                       // 3681\n    prototype__proto.weekdaysShortRegex  =        weekdaysShortRegex;                                                  // 3682\n    prototype__proto.weekdaysMinRegex    =        weekdaysMinRegex;                                                    // 3683\n                                                                                                                       // 3684\n    // Hours                                                                                                           // 3685\n    prototype__proto.isPM = localeIsPM;                                                                                // 3686\n    prototype__proto.meridiem = localeMeridiem;                                                                        // 3687\n                                                                                                                       // 3688\n    function lists__get (format, index, field, setter) {                                                               // 3689\n        var locale = locale_locales__getLocale();                                                                      // 3690\n        var utc = create_utc__createUTC().set(setter, index);                                                          // 3691\n        return locale[field](utc, format);                                                                             // 3692\n    }                                                                                                                  // 3693\n                                                                                                                       // 3694\n    function listMonthsImpl (format, index, field) {                                                                   // 3695\n        if (typeof format === 'number') {                                                                              // 3696\n            index = format;                                                                                            // 3697\n            format = undefined;                                                                                        // 3698\n        }                                                                                                              // 3699\n                                                                                                                       // 3700\n        format = format || '';                                                                                         // 3701\n                                                                                                                       // 3702\n        if (index != null) {                                                                                           // 3703\n            return lists__get(format, index, field, 'month');                                                          // 3704\n        }                                                                                                              // 3705\n                                                                                                                       // 3706\n        var i;                                                                                                         // 3707\n        var out = [];                                                                                                  // 3708\n        for (i = 0; i < 12; i++) {                                                                                     // 3709\n            out[i] = lists__get(format, i, field, 'month');                                                            // 3710\n        }                                                                                                              // 3711\n        return out;                                                                                                    // 3712\n    }                                                                                                                  // 3713\n                                                                                                                       // 3714\n    // ()                                                                                                              // 3715\n    // (5)                                                                                                             // 3716\n    // (fmt, 5)                                                                                                        // 3717\n    // (fmt)                                                                                                           // 3718\n    // (true)                                                                                                          // 3719\n    // (true, 5)                                                                                                       // 3720\n    // (true, fmt, 5)                                                                                                  // 3721\n    // (true, fmt)                                                                                                     // 3722\n    function listWeekdaysImpl (localeSorted, format, index, field) {                                                   // 3723\n        if (typeof localeSorted === 'boolean') {                                                                       // 3724\n            if (typeof format === 'number') {                                                                          // 3725\n                index = format;                                                                                        // 3726\n                format = undefined;                                                                                    // 3727\n            }                                                                                                          // 3728\n                                                                                                                       // 3729\n            format = format || '';                                                                                     // 3730\n        } else {                                                                                                       // 3731\n            format = localeSorted;                                                                                     // 3732\n            index = format;                                                                                            // 3733\n            localeSorted = false;                                                                                      // 3734\n                                                                                                                       // 3735\n            if (typeof format === 'number') {                                                                          // 3736\n                index = format;                                                                                        // 3737\n                format = undefined;                                                                                    // 3738\n            }                                                                                                          // 3739\n                                                                                                                       // 3740\n            format = format || '';                                                                                     // 3741\n        }                                                                                                              // 3742\n                                                                                                                       // 3743\n        var locale = locale_locales__getLocale(),                                                                      // 3744\n            shift = localeSorted ? locale._week.dow : 0;                                                               // 3745\n                                                                                                                       // 3746\n        if (index != null) {                                                                                           // 3747\n            return lists__get(format, (index + shift) % 7, field, 'day');                                              // 3748\n        }                                                                                                              // 3749\n                                                                                                                       // 3750\n        var i;                                                                                                         // 3751\n        var out = [];                                                                                                  // 3752\n        for (i = 0; i < 7; i++) {                                                                                      // 3753\n            out[i] = lists__get(format, (i + shift) % 7, field, 'day');                                                // 3754\n        }                                                                                                              // 3755\n        return out;                                                                                                    // 3756\n    }                                                                                                                  // 3757\n                                                                                                                       // 3758\n    function lists__listMonths (format, index) {                                                                       // 3759\n        return listMonthsImpl(format, index, 'months');                                                                // 3760\n    }                                                                                                                  // 3761\n                                                                                                                       // 3762\n    function lists__listMonthsShort (format, index) {                                                                  // 3763\n        return listMonthsImpl(format, index, 'monthsShort');                                                           // 3764\n    }                                                                                                                  // 3765\n                                                                                                                       // 3766\n    function lists__listWeekdays (localeSorted, format, index) {                                                       // 3767\n        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');                                              // 3768\n    }                                                                                                                  // 3769\n                                                                                                                       // 3770\n    function lists__listWeekdaysShort (localeSorted, format, index) {                                                  // 3771\n        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');                                         // 3772\n    }                                                                                                                  // 3773\n                                                                                                                       // 3774\n    function lists__listWeekdaysMin (localeSorted, format, index) {                                                    // 3775\n        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');                                           // 3776\n    }                                                                                                                  // 3777\n                                                                                                                       // 3778\n    locale_locales__getSetGlobalLocale('en', {                                                                         // 3779\n        ordinalParse: /\\d{1,2}(th|st|nd|rd)/,                                                                          // 3780\n        ordinal : function (number) {                                                                                  // 3781\n            var b = number % 10,                                                                                       // 3782\n                output = (toInt(number % 100 / 10) === 1) ? 'th' :                                                     // 3783\n                (b === 1) ? 'st' :                                                                                     // 3784\n                (b === 2) ? 'nd' :                                                                                     // 3785\n                (b === 3) ? 'rd' : 'th';                                                                               // 3786\n            return number + output;                                                                                    // 3787\n        }                                                                                                              // 3788\n    });                                                                                                                // 3789\n                                                                                                                       // 3790\n    // Side effect imports                                                                                             // 3791\n    utils_hooks__hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', locale_locales__getSetGlobalLocale);\n    utils_hooks__hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', locale_locales__getLocale);\n                                                                                                                       // 3794\n    var mathAbs = Math.abs;                                                                                            // 3795\n                                                                                                                       // 3796\n    function duration_abs__abs () {                                                                                    // 3797\n        var data           = this._data;                                                                               // 3798\n                                                                                                                       // 3799\n        this._milliseconds = mathAbs(this._milliseconds);                                                              // 3800\n        this._days         = mathAbs(this._days);                                                                      // 3801\n        this._months       = mathAbs(this._months);                                                                    // 3802\n                                                                                                                       // 3803\n        data.milliseconds  = mathAbs(data.milliseconds);                                                               // 3804\n        data.seconds       = mathAbs(data.seconds);                                                                    // 3805\n        data.minutes       = mathAbs(data.minutes);                                                                    // 3806\n        data.hours         = mathAbs(data.hours);                                                                      // 3807\n        data.months        = mathAbs(data.months);                                                                     // 3808\n        data.years         = mathAbs(data.years);                                                                      // 3809\n                                                                                                                       // 3810\n        return this;                                                                                                   // 3811\n    }                                                                                                                  // 3812\n                                                                                                                       // 3813\n    function duration_add_subtract__addSubtract (duration, input, value, direction) {                                  // 3814\n        var other = create__createDuration(input, value);                                                              // 3815\n                                                                                                                       // 3816\n        duration._milliseconds += direction * other._milliseconds;                                                     // 3817\n        duration._days         += direction * other._days;                                                             // 3818\n        duration._months       += direction * other._months;                                                           // 3819\n                                                                                                                       // 3820\n        return duration._bubble();                                                                                     // 3821\n    }                                                                                                                  // 3822\n                                                                                                                       // 3823\n    // supports only 2.0-style add(1, 's') or add(duration)                                                            // 3824\n    function duration_add_subtract__add (input, value) {                                                               // 3825\n        return duration_add_subtract__addSubtract(this, input, value, 1);                                              // 3826\n    }                                                                                                                  // 3827\n                                                                                                                       // 3828\n    // supports only 2.0-style subtract(1, 's') or subtract(duration)                                                  // 3829\n    function duration_add_subtract__subtract (input, value) {                                                          // 3830\n        return duration_add_subtract__addSubtract(this, input, value, -1);                                             // 3831\n    }                                                                                                                  // 3832\n                                                                                                                       // 3833\n    function absCeil (number) {                                                                                        // 3834\n        if (number < 0) {                                                                                              // 3835\n            return Math.floor(number);                                                                                 // 3836\n        } else {                                                                                                       // 3837\n            return Math.ceil(number);                                                                                  // 3838\n        }                                                                                                              // 3839\n    }                                                                                                                  // 3840\n                                                                                                                       // 3841\n    function bubble () {                                                                                               // 3842\n        var milliseconds = this._milliseconds;                                                                         // 3843\n        var days         = this._days;                                                                                 // 3844\n        var months       = this._months;                                                                               // 3845\n        var data         = this._data;                                                                                 // 3846\n        var seconds, minutes, hours, years, monthsFromDays;                                                            // 3847\n                                                                                                                       // 3848\n        // if we have a mix of positive and negative values, bubble down first                                         // 3849\n        // check: https://github.com/moment/moment/issues/2166                                                         // 3850\n        if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||                                                       // 3851\n                (milliseconds <= 0 && days <= 0 && months <= 0))) {                                                    // 3852\n            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;                                              // 3853\n            days = 0;                                                                                                  // 3854\n            months = 0;                                                                                                // 3855\n        }                                                                                                              // 3856\n                                                                                                                       // 3857\n        // The following code bubbles up values, see the tests for                                                     // 3858\n        // examples of what that means.                                                                                // 3859\n        data.milliseconds = milliseconds % 1000;                                                                       // 3860\n                                                                                                                       // 3861\n        seconds           = absFloor(milliseconds / 1000);                                                             // 3862\n        data.seconds      = seconds % 60;                                                                              // 3863\n                                                                                                                       // 3864\n        minutes           = absFloor(seconds / 60);                                                                    // 3865\n        data.minutes      = minutes % 60;                                                                              // 3866\n                                                                                                                       // 3867\n        hours             = absFloor(minutes / 60);                                                                    // 3868\n        data.hours        = hours % 24;                                                                                // 3869\n                                                                                                                       // 3870\n        days += absFloor(hours / 24);                                                                                  // 3871\n                                                                                                                       // 3872\n        // convert days to months                                                                                      // 3873\n        monthsFromDays = absFloor(daysToMonths(days));                                                                 // 3874\n        months += monthsFromDays;                                                                                      // 3875\n        days -= absCeil(monthsToDays(monthsFromDays));                                                                 // 3876\n                                                                                                                       // 3877\n        // 12 months -> 1 year                                                                                         // 3878\n        years = absFloor(months / 12);                                                                                 // 3879\n        months %= 12;                                                                                                  // 3880\n                                                                                                                       // 3881\n        data.days   = days;                                                                                            // 3882\n        data.months = months;                                                                                          // 3883\n        data.years  = years;                                                                                           // 3884\n                                                                                                                       // 3885\n        return this;                                                                                                   // 3886\n    }                                                                                                                  // 3887\n                                                                                                                       // 3888\n    function daysToMonths (days) {                                                                                     // 3889\n        // 400 years have 146097 days (taking into account leap year rules)                                            // 3890\n        // 400 years have 12 months === 4800                                                                           // 3891\n        return days * 4800 / 146097;                                                                                   // 3892\n    }                                                                                                                  // 3893\n                                                                                                                       // 3894\n    function monthsToDays (months) {                                                                                   // 3895\n        // the reverse of daysToMonths                                                                                 // 3896\n        return months * 146097 / 4800;                                                                                 // 3897\n    }                                                                                                                  // 3898\n                                                                                                                       // 3899\n    function as (units) {                                                                                              // 3900\n        var days;                                                                                                      // 3901\n        var months;                                                                                                    // 3902\n        var milliseconds = this._milliseconds;                                                                         // 3903\n                                                                                                                       // 3904\n        units = normalizeUnits(units);                                                                                 // 3905\n                                                                                                                       // 3906\n        if (units === 'month' || units === 'year') {                                                                   // 3907\n            days   = this._days   + milliseconds / 864e5;                                                              // 3908\n            months = this._months + daysToMonths(days);                                                                // 3909\n            return units === 'month' ? months : months / 12;                                                           // 3910\n        } else {                                                                                                       // 3911\n            // handle milliseconds separately because of floating point math errors (issue #1867)                      // 3912\n            days = this._days + Math.round(monthsToDays(this._months));                                                // 3913\n            switch (units) {                                                                                           // 3914\n                case 'week'   : return days / 7     + milliseconds / 6048e5;                                           // 3915\n                case 'day'    : return days         + milliseconds / 864e5;                                            // 3916\n                case 'hour'   : return days * 24    + milliseconds / 36e5;                                             // 3917\n                case 'minute' : return days * 1440  + milliseconds / 6e4;                                              // 3918\n                case 'second' : return days * 86400 + milliseconds / 1000;                                             // 3919\n                // Math.floor prevents floating point math errors here                                                 // 3920\n                case 'millisecond': return Math.floor(days * 864e5) + milliseconds;                                    // 3921\n                default: throw new Error('Unknown unit ' + units);                                                     // 3922\n            }                                                                                                          // 3923\n        }                                                                                                              // 3924\n    }                                                                                                                  // 3925\n                                                                                                                       // 3926\n    // TODO: Use this.as('ms')?                                                                                        // 3927\n    function duration_as__valueOf () {                                                                                 // 3928\n        return (                                                                                                       // 3929\n            this._milliseconds +                                                                                       // 3930\n            this._days * 864e5 +                                                                                       // 3931\n            (this._months % 12) * 2592e6 +                                                                             // 3932\n            toInt(this._months / 12) * 31536e6                                                                         // 3933\n        );                                                                                                             // 3934\n    }                                                                                                                  // 3935\n                                                                                                                       // 3936\n    function makeAs (alias) {                                                                                          // 3937\n        return function () {                                                                                           // 3938\n            return this.as(alias);                                                                                     // 3939\n        };                                                                                                             // 3940\n    }                                                                                                                  // 3941\n                                                                                                                       // 3942\n    var asMilliseconds = makeAs('ms');                                                                                 // 3943\n    var asSeconds      = makeAs('s');                                                                                  // 3944\n    var asMinutes      = makeAs('m');                                                                                  // 3945\n    var asHours        = makeAs('h');                                                                                  // 3946\n    var asDays         = makeAs('d');                                                                                  // 3947\n    var asWeeks        = makeAs('w');                                                                                  // 3948\n    var asMonths       = makeAs('M');                                                                                  // 3949\n    var asYears        = makeAs('y');                                                                                  // 3950\n                                                                                                                       // 3951\n    function duration_get__get (units) {                                                                               // 3952\n        units = normalizeUnits(units);                                                                                 // 3953\n        return this[units + 's']();                                                                                    // 3954\n    }                                                                                                                  // 3955\n                                                                                                                       // 3956\n    function makeGetter(name) {                                                                                        // 3957\n        return function () {                                                                                           // 3958\n            return this._data[name];                                                                                   // 3959\n        };                                                                                                             // 3960\n    }                                                                                                                  // 3961\n                                                                                                                       // 3962\n    var milliseconds = makeGetter('milliseconds');                                                                     // 3963\n    var seconds      = makeGetter('seconds');                                                                          // 3964\n    var minutes      = makeGetter('minutes');                                                                          // 3965\n    var hours        = makeGetter('hours');                                                                            // 3966\n    var days         = makeGetter('days');                                                                             // 3967\n    var months       = makeGetter('months');                                                                           // 3968\n    var years        = makeGetter('years');                                                                            // 3969\n                                                                                                                       // 3970\n    function weeks () {                                                                                                // 3971\n        return absFloor(this.days() / 7);                                                                              // 3972\n    }                                                                                                                  // 3973\n                                                                                                                       // 3974\n    var round = Math.round;                                                                                            // 3975\n    var thresholds = {                                                                                                 // 3976\n        s: 45,  // seconds to minute                                                                                   // 3977\n        m: 45,  // minutes to hour                                                                                     // 3978\n        h: 22,  // hours to day                                                                                        // 3979\n        d: 26,  // days to month                                                                                       // 3980\n        M: 11   // months to year                                                                                      // 3981\n    };                                                                                                                 // 3982\n                                                                                                                       // 3983\n    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize                          // 3984\n    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {                                      // 3985\n        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);                                    // 3986\n    }                                                                                                                  // 3987\n                                                                                                                       // 3988\n    function duration_humanize__relativeTime (posNegDuration, withoutSuffix, locale) {                                 // 3989\n        var duration = create__createDuration(posNegDuration).abs();                                                   // 3990\n        var seconds  = round(duration.as('s'));                                                                        // 3991\n        var minutes  = round(duration.as('m'));                                                                        // 3992\n        var hours    = round(duration.as('h'));                                                                        // 3993\n        var days     = round(duration.as('d'));                                                                        // 3994\n        var months   = round(duration.as('M'));                                                                        // 3995\n        var years    = round(duration.as('y'));                                                                        // 3996\n                                                                                                                       // 3997\n        var a = seconds < thresholds.s && ['s', seconds]  ||                                                           // 3998\n                minutes <= 1           && ['m']           ||                                                           // 3999\n                minutes < thresholds.m && ['mm', minutes] ||                                                           // 4000\n                hours   <= 1           && ['h']           ||                                                           // 4001\n                hours   < thresholds.h && ['hh', hours]   ||                                                           // 4002\n                days    <= 1           && ['d']           ||                                                           // 4003\n                days    < thresholds.d && ['dd', days]    ||                                                           // 4004\n                months  <= 1           && ['M']           ||                                                           // 4005\n                months  < thresholds.M && ['MM', months]  ||                                                           // 4006\n                years   <= 1           && ['y']           || ['yy', years];                                            // 4007\n                                                                                                                       // 4008\n        a[2] = withoutSuffix;                                                                                          // 4009\n        a[3] = +posNegDuration > 0;                                                                                    // 4010\n        a[4] = locale;                                                                                                 // 4011\n        return substituteTimeAgo.apply(null, a);                                                                       // 4012\n    }                                                                                                                  // 4013\n                                                                                                                       // 4014\n    // This function allows you to set the rounding function for relative time strings                                 // 4015\n    function duration_humanize__getSetRelativeTimeRounding (roundingFunction) {                                        // 4016\n        if (roundingFunction === undefined) {                                                                          // 4017\n            return round;                                                                                              // 4018\n        }                                                                                                              // 4019\n        if (typeof(roundingFunction) === 'function') {                                                                 // 4020\n            round = roundingFunction;                                                                                  // 4021\n            return true;                                                                                               // 4022\n        }                                                                                                              // 4023\n        return false;                                                                                                  // 4024\n    }                                                                                                                  // 4025\n                                                                                                                       // 4026\n    // This function allows you to set a threshold for relative time strings                                           // 4027\n    function duration_humanize__getSetRelativeTimeThreshold (threshold, limit) {                                       // 4028\n        if (thresholds[threshold] === undefined) {                                                                     // 4029\n            return false;                                                                                              // 4030\n        }                                                                                                              // 4031\n        if (limit === undefined) {                                                                                     // 4032\n            return thresholds[threshold];                                                                              // 4033\n        }                                                                                                              // 4034\n        thresholds[threshold] = limit;                                                                                 // 4035\n        return true;                                                                                                   // 4036\n    }                                                                                                                  // 4037\n                                                                                                                       // 4038\n    function humanize (withSuffix) {                                                                                   // 4039\n        var locale = this.localeData();                                                                                // 4040\n        var output = duration_humanize__relativeTime(this, !withSuffix, locale);                                       // 4041\n                                                                                                                       // 4042\n        if (withSuffix) {                                                                                              // 4043\n            output = locale.pastFuture(+this, output);                                                                 // 4044\n        }                                                                                                              // 4045\n                                                                                                                       // 4046\n        return locale.postformat(output);                                                                              // 4047\n    }                                                                                                                  // 4048\n                                                                                                                       // 4049\n    var iso_string__abs = Math.abs;                                                                                    // 4050\n                                                                                                                       // 4051\n    function iso_string__toISOString() {                                                                               // 4052\n        // for ISO strings we do not use the normal bubbling rules:                                                    // 4053\n        //  * milliseconds bubble up until they become hours                                                           // 4054\n        //  * days do not bubble at all                                                                                // 4055\n        //  * months bubble up until they become years                                                                 // 4056\n        // This is because there is no context-free conversion between hours and days                                  // 4057\n        // (think of clock changes)                                                                                    // 4058\n        // and also not between days and months (28-31 days per month)                                                 // 4059\n        var seconds = iso_string__abs(this._milliseconds) / 1000;                                                      // 4060\n        var days         = iso_string__abs(this._days);                                                                // 4061\n        var months       = iso_string__abs(this._months);                                                              // 4062\n        var minutes, hours, years;                                                                                     // 4063\n                                                                                                                       // 4064\n        // 3600 seconds -> 60 minutes -> 1 hour                                                                        // 4065\n        minutes           = absFloor(seconds / 60);                                                                    // 4066\n        hours             = absFloor(minutes / 60);                                                                    // 4067\n        seconds %= 60;                                                                                                 // 4068\n        minutes %= 60;                                                                                                 // 4069\n                                                                                                                       // 4070\n        // 12 months -> 1 year                                                                                         // 4071\n        years  = absFloor(months / 12);                                                                                // 4072\n        months %= 12;                                                                                                  // 4073\n                                                                                                                       // 4074\n                                                                                                                       // 4075\n        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js                // 4076\n        var Y = years;                                                                                                 // 4077\n        var M = months;                                                                                                // 4078\n        var D = days;                                                                                                  // 4079\n        var h = hours;                                                                                                 // 4080\n        var m = minutes;                                                                                               // 4081\n        var s = seconds;                                                                                               // 4082\n        var total = this.asSeconds();                                                                                  // 4083\n                                                                                                                       // 4084\n        if (!total) {                                                                                                  // 4085\n            // this is the same as C#'s (Noda) and python (isodate)...                                                 // 4086\n            // but not other JS (goog.date)                                                                            // 4087\n            return 'P0D';                                                                                              // 4088\n        }                                                                                                              // 4089\n                                                                                                                       // 4090\n        return (total < 0 ? '-' : '') +                                                                                // 4091\n            'P' +                                                                                                      // 4092\n            (Y ? Y + 'Y' : '') +                                                                                       // 4093\n            (M ? M + 'M' : '') +                                                                                       // 4094\n            (D ? D + 'D' : '') +                                                                                       // 4095\n            ((h || m || s) ? 'T' : '') +                                                                               // 4096\n            (h ? h + 'H' : '') +                                                                                       // 4097\n            (m ? m + 'M' : '') +                                                                                       // 4098\n            (s ? s + 'S' : '');                                                                                        // 4099\n    }                                                                                                                  // 4100\n                                                                                                                       // 4101\n    var duration_prototype__proto = Duration.prototype;                                                                // 4102\n                                                                                                                       // 4103\n    duration_prototype__proto.abs            = duration_abs__abs;                                                      // 4104\n    duration_prototype__proto.add            = duration_add_subtract__add;                                             // 4105\n    duration_prototype__proto.subtract       = duration_add_subtract__subtract;                                        // 4106\n    duration_prototype__proto.as             = as;                                                                     // 4107\n    duration_prototype__proto.asMilliseconds = asMilliseconds;                                                         // 4108\n    duration_prototype__proto.asSeconds      = asSeconds;                                                              // 4109\n    duration_prototype__proto.asMinutes      = asMinutes;                                                              // 4110\n    duration_prototype__proto.asHours        = asHours;                                                                // 4111\n    duration_prototype__proto.asDays         = asDays;                                                                 // 4112\n    duration_prototype__proto.asWeeks        = asWeeks;                                                                // 4113\n    duration_prototype__proto.asMonths       = asMonths;                                                               // 4114\n    duration_prototype__proto.asYears        = asYears;                                                                // 4115\n    duration_prototype__proto.valueOf        = duration_as__valueOf;                                                   // 4116\n    duration_prototype__proto._bubble        = bubble;                                                                 // 4117\n    duration_prototype__proto.get            = duration_get__get;                                                      // 4118\n    duration_prototype__proto.milliseconds   = milliseconds;                                                           // 4119\n    duration_prototype__proto.seconds        = seconds;                                                                // 4120\n    duration_prototype__proto.minutes        = minutes;                                                                // 4121\n    duration_prototype__proto.hours          = hours;                                                                  // 4122\n    duration_prototype__proto.days           = days;                                                                   // 4123\n    duration_prototype__proto.weeks          = weeks;                                                                  // 4124\n    duration_prototype__proto.months         = months;                                                                 // 4125\n    duration_prototype__proto.years          = years;                                                                  // 4126\n    duration_prototype__proto.humanize       = humanize;                                                               // 4127\n    duration_prototype__proto.toISOString    = iso_string__toISOString;                                                // 4128\n    duration_prototype__proto.toString       = iso_string__toISOString;                                                // 4129\n    duration_prototype__proto.toJSON         = iso_string__toISOString;                                                // 4130\n    duration_prototype__proto.locale         = locale;                                                                 // 4131\n    duration_prototype__proto.localeData     = localeData;                                                             // 4132\n                                                                                                                       // 4133\n    // Deprecations                                                                                                    // 4134\n    duration_prototype__proto.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', iso_string__toISOString);\n    duration_prototype__proto.lang = lang;                                                                             // 4136\n                                                                                                                       // 4137\n    // Side effect imports                                                                                             // 4138\n                                                                                                                       // 4139\n    // FORMATTING                                                                                                      // 4140\n                                                                                                                       // 4141\n    addFormatToken('X', 0, 0, 'unix');                                                                                 // 4142\n    addFormatToken('x', 0, 0, 'valueOf');                                                                              // 4143\n                                                                                                                       // 4144\n    // PARSING                                                                                                         // 4145\n                                                                                                                       // 4146\n    addRegexToken('x', matchSigned);                                                                                   // 4147\n    addRegexToken('X', matchTimestamp);                                                                                // 4148\n    addParseToken('X', function (input, array, config) {                                                               // 4149\n        config._d = new Date(parseFloat(input, 10) * 1000);                                                            // 4150\n    });                                                                                                                // 4151\n    addParseToken('x', function (input, array, config) {                                                               // 4152\n        config._d = new Date(toInt(input));                                                                            // 4153\n    });                                                                                                                // 4154\n                                                                                                                       // 4155\n    // Side effect imports                                                                                             // 4156\n                                                                                                                       // 4157\n                                                                                                                       // 4158\n    utils_hooks__hooks.version = '2.14.1';                                                                             // 4159\n                                                                                                                       // 4160\n    setHookCallback(local__createLocal);                                                                               // 4161\n                                                                                                                       // 4162\n    utils_hooks__hooks.fn                    = momentPrototype;                                                        // 4163\n    utils_hooks__hooks.min                   = min;                                                                    // 4164\n    utils_hooks__hooks.max                   = max;                                                                    // 4165\n    utils_hooks__hooks.now                   = now;                                                                    // 4166\n    utils_hooks__hooks.utc                   = create_utc__createUTC;                                                  // 4167\n    utils_hooks__hooks.unix                  = moment__createUnix;                                                     // 4168\n    utils_hooks__hooks.months                = lists__listMonths;                                                      // 4169\n    utils_hooks__hooks.isDate                = isDate;                                                                 // 4170\n    utils_hooks__hooks.locale                = locale_locales__getSetGlobalLocale;                                     // 4171\n    utils_hooks__hooks.invalid               = valid__createInvalid;                                                   // 4172\n    utils_hooks__hooks.duration              = create__createDuration;                                                 // 4173\n    utils_hooks__hooks.isMoment              = isMoment;                                                               // 4174\n    utils_hooks__hooks.weekdays              = lists__listWeekdays;                                                    // 4175\n    utils_hooks__hooks.parseZone             = moment__createInZone;                                                   // 4176\n    utils_hooks__hooks.localeData            = locale_locales__getLocale;                                              // 4177\n    utils_hooks__hooks.isDuration            = isDuration;                                                             // 4178\n    utils_hooks__hooks.monthsShort           = lists__listMonthsShort;                                                 // 4179\n    utils_hooks__hooks.weekdaysMin           = lists__listWeekdaysMin;                                                 // 4180\n    utils_hooks__hooks.defineLocale          = defineLocale;                                                           // 4181\n    utils_hooks__hooks.updateLocale          = updateLocale;                                                           // 4182\n    utils_hooks__hooks.locales               = locale_locales__listLocales;                                            // 4183\n    utils_hooks__hooks.weekdaysShort         = lists__listWeekdaysShort;                                               // 4184\n    utils_hooks__hooks.normalizeUnits        = normalizeUnits;                                                         // 4185\n    utils_hooks__hooks.relativeTimeRounding = duration_humanize__getSetRelativeTimeRounding;                           // 4186\n    utils_hooks__hooks.relativeTimeThreshold = duration_humanize__getSetRelativeTimeThreshold;                         // 4187\n    utils_hooks__hooks.calendarFormat        = getCalendarFormat;                                                      // 4188\n    utils_hooks__hooks.prototype             = momentPrototype;                                                        // 4189\n                                                                                                                       // 4190\n    var _moment = utils_hooks__hooks;                                                                                  // 4191\n                                                                                                                       // 4192\n    return _moment;                                                                                                    // 4193\n                                                                                                                       // 4194\n}));                                                                                                                   // 4195\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/momentjs_moment/meteor/export.js                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// moment.js makes `moment` global on the window (or global) object, while Meteor expects a file-scoped global variable\nmoment = this.moment;                                                                                                  // 2\ntry {                                                                                                                  // 3\n    delete this.moment;                                                                                                // 4\n} catch (e) {                                                                                                          // 5\n}                                                                                                                      // 6\n                                                                                                                       // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['momentjs:moment'] = {}, {\n  moment: moment\n});\n\n})();\n","servePath":"/packages/momentjs_moment.js","sourceMap":{"version":3,"sources":["/packages/momentjs_moment/moment.js","/packages/momentjs_moment/meteor/export.js"],"names":[],"mappingslmIA;AACA;AACA;AACA;AACA;AACA;AACA,2H","file":"/packages/momentjs_moment.js","sourcesContent":["//! moment.js\n//! version : 2.14.1\n//! authors : Tim Wood, Iskren Chernev, Moment.js contributors\n//! license : MIT\n//! momentjs.com\n\n;(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define(factory) :\n    global.moment = factory()\n}(this, function () { 'use strict';\n\n    var hookCallback;\n\n    function utils_hooks__hooks () {\n        return hookCallback.apply(null, arguments);\n    }\n\n    // This is done to register the method called with moment()\n    // without creating circular dependencies.\n    function setHookCallback (callback) {\n        hookCallback = callback;\n    }\n\n    function isArray(input) {\n        return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';\n    }\n\n    function isObject(input) {\n        return Object.prototype.toString.call(input) === '[object Object]';\n    }\n\n    function isObjectEmpty(obj) {\n        var k;\n        for (k in obj) {\n            // even if its not own property I'd still call it non-empty\n            return false;\n        }\n        return true;\n    }\n\n    function isDate(input) {\n        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';\n    }\n\n    function map(arr, fn) {\n        var res = [], i;\n        for (i = 0; i < arr.length; ++i) {\n            res.push(fn(arr[i], i));\n        }\n        return res;\n    }\n\n    function hasOwnProp(a, b) {\n        return Object.prototype.hasOwnProperty.call(a, b);\n    }\n\n    function extend(a, b) {\n        for (var i in b) {\n            if (hasOwnProp(b, i)) {\n                a[i] = b[i];\n            }\n        }\n\n        if (hasOwnProp(b, 'toString')) {\n            a.toString = b.toString;\n        }\n\n        if (hasOwnProp(b, 'valueOf')) {\n            a.valueOf = b.valueOf;\n        }\n\n        return a;\n    }\n\n    function create_utc__createUTC (input, format, locale, strict) {\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\n    }\n\n    function defaultParsingFlags() {\n        // We need to deep clone this object.\n        return {\n            empty           : false,\n            unusedTokens    : [],\n            unusedInput     : [],\n            overflow        : -2,\n            charsLeftOver   : 0,\n            nullInput       : false,\n            invalidMonth    : null,\n            invalidFormat   : false,\n            userInvalidated : false,\n            iso             : false,\n            parsedDateParts : [],\n            meridiem        : null\n        };\n    }\n\n    function getParsingFlags(m) {\n        if (m._pf == null) {\n            m._pf = defaultParsingFlags();\n        }\n        return m._pf;\n    }\n\n    var some;\n    if (Array.prototype.some) {\n        some = Array.prototype.some;\n    } else {\n        some = function (fun) {\n            var t = Object(this);\n            var len = t.length >>> 0;\n\n            for (var i = 0; i < len; i++) {\n                if (i in t && fun.call(this, t[i], i, t)) {\n                    return true;\n                }\n            }\n\n            return false;\n        };\n    }\n\n    function valid__isValid(m) {\n        if (m._isValid == null) {\n            var flags = getParsingFlags(m);\n            var parsedParts = some.call(flags.parsedDateParts, function (i) {\n                return i != null;\n            });\n            m._isValid = !isNaN(m._d.getTime()) &&\n                flags.overflow < 0 &&\n                !flags.empty &&\n                !flags.invalidMonth &&\n                !flags.invalidWeekday &&\n                !flags.nullInput &&\n                !flags.invalidFormat &&\n                !flags.userInvalidated &&\n                (!flags.meridiem || (flags.meridiem && parsedParts));\n\n            if (m._strict) {\n                m._isValid = m._isValid &&\n                    flags.charsLeftOver === 0 &&\n                    flags.unusedTokens.length === 0 &&\n                    flags.bigHour === undefined;\n            }\n        }\n        return m._isValid;\n    }\n\n    function valid__createInvalid (flags) {\n        var m = create_utc__createUTC(NaN);\n        if (flags != null) {\n            extend(getParsingFlags(m), flags);\n        }\n        else {\n            getParsingFlags(m).userInvalidated = true;\n        }\n\n        return m;\n    }\n\n    function isUndefined(input) {\n        return input === void 0;\n    }\n\n    // Plugins that add properties should also add the key here (null value),\n    // so we can properly clone ourselves.\n    var momentProperties = utils_hooks__hooks.momentProperties = [];\n\n    function copyConfig(to, from) {\n        var i, prop, val;\n\n        if (!isUndefined(from._isAMomentObject)) {\n            to._isAMomentObject = from._isAMomentObject;\n        }\n        if (!isUndefined(from._i)) {\n            to._i = from._i;\n        }\n        if (!isUndefined(from._f)) {\n            to._f = from._f;\n        }\n        if (!isUndefined(from._l)) {\n            to._l = from._l;\n        }\n        if (!isUndefined(from._strict)) {\n            to._strict = from._strict;\n        }\n        if (!isUndefined(from._tzm)) {\n            to._tzm = from._tzm;\n        }\n        if (!isUndefined(from._isUTC)) {\n            to._isUTC = from._isUTC;\n        }\n        if (!isUndefined(from._offset)) {\n            to._offset = from._offset;\n        }\n        if (!isUndefined(from._pf)) {\n            to._pf = getParsingFlags(from);\n        }\n        if (!isUndefined(from._locale)) {\n            to._locale = from._locale;\n        }\n\n        if (momentProperties.length > 0) {\n            for (i in momentProperties) {\n                prop = momentProperties[i];\n                val = from[prop];\n                if (!isUndefined(val)) {\n                    to[prop] = val;\n                }\n            }\n        }\n\n        return to;\n    }\n\n    var updateInProgress = false;\n\n    // Moment prototype object\n    function Moment(config) {\n        copyConfig(this, config);\n        this._d = new Date(config._d != null ? config._d.getTime() : NaN);\n        // Prevent infinite loop in case updateOffset creates new moment\n        // objects.\n        if (updateInProgress === false) {\n            updateInProgress = true;\n            utils_hooks__hooks.updateOffset(this);\n            updateInProgress = false;\n        }\n    }\n\n    function isMoment (obj) {\n        return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);\n    }\n\n    function absFloor (number) {\n        if (number < 0) {\n            // -0 -> 0\n            return Math.ceil(number) || 0;\n        } else {\n            return Math.floor(number);\n        }\n    }\n\n    function toInt(argumentForCoercion) {\n        var coercedNumber = +argumentForCoercion,\n            value = 0;\n\n        if (coercedNumber !== 0 && isFinite(coercedNumber)) {\n            value = absFloor(coercedNumber);\n        }\n\n        return value;\n    }\n\n    // compare two arrays, return the number of differences\n    function compareArrays(array1, array2, dontConvert) {\n        var len = Math.min(array1.length, array2.length),\n            lengthDiff = Math.abs(array1.length - array2.length),\n            diffs = 0,\n            i;\n        for (i = 0; i < len; i++) {\n            if ((dontConvert && array1[i] !== array2[i]) ||\n                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {\n                diffs++;\n            }\n        }\n        return diffs + lengthDiff;\n    }\n\n    function warn(msg) {\n        if (utils_hooks__hooks.suppressDeprecationWarnings === false &&\n                (typeof console !==  'undefined') && console.warn) {\n            console.warn('Deprecation warning: ' + msg);\n        }\n    }\n\n    function deprecate(msg, fn) {\n        var firstTime = true;\n\n        return extend(function () {\n            if (utils_hooks__hooks.deprecationHandler != null) {\n                utils_hooks__hooks.deprecationHandler(null, msg);\n            }\n            if (firstTime) {\n                warn(msg + '\\nArguments: ' + Array.prototype.slice.call(arguments).join(', ') + '\\n' + (new Error()).stack);\n                firstTime = false;\n            }\n            return fn.apply(this, arguments);\n        }, fn);\n    }\n\n    var deprecations = {};\n\n    function deprecateSimple(name, msg) {\n        if (utils_hooks__hooks.deprecationHandler != null) {\n            utils_hooks__hooks.deprecationHandler(name, msg);\n        }\n        if (!deprecations[name]) {\n            warn(msg);\n            deprecations[name] = true;\n        }\n    }\n\n    utils_hooks__hooks.suppressDeprecationWarnings = false;\n    utils_hooks__hooks.deprecationHandler = null;\n\n    function isFunction(input) {\n        return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';\n    }\n\n    function locale_set__set (config) {\n        var prop, i;\n        for (i in config) {\n            prop = config[i];\n            if (isFunction(prop)) {\n                this[i] = prop;\n            } else {\n                this['_' + i] = prop;\n            }\n        }\n        this._config = config;\n        // Lenient ordinal parsing accepts just a number in addition to\n        // number + (possibly) stuff coming from _ordinalParseLenient.\n        this._ordinalParseLenient = new RegExp(this._ordinalParse.source + '|' + (/\\d{1,2}/).source);\n    }\n\n    function mergeConfigs(parentConfig, childConfig) {\n        var res = extend({}, parentConfig), prop;\n        for (prop in childConfig) {\n            if (hasOwnProp(childConfig, prop)) {\n                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {\n                    res[prop] = {};\n                    extend(res[prop], parentConfig[prop]);\n                    extend(res[prop], childConfig[prop]);\n                } else if (childConfig[prop] != null) {\n                    res[prop] = childConfig[prop];\n                } else {\n                    delete res[prop];\n                }\n            }\n        }\n        for (prop in parentConfig) {\n            if (hasOwnProp(parentConfig, prop) &&\n                    !hasOwnProp(childConfig, prop) &&\n                    isObject(parentConfig[prop])) {\n                // make sure changes to properties don't modify parent config\n                res[prop] = extend({}, res[prop]);\n            }\n        }\n        return res;\n    }\n\n    function Locale(config) {\n        if (config != null) {\n            this.set(config);\n        }\n    }\n\n    var keys;\n\n    if (Object.keys) {\n        keys = Object.keys;\n    } else {\n        keys = function (obj) {\n            var i, res = [];\n            for (i in obj) {\n                if (hasOwnProp(obj, i)) {\n                    res.push(i);\n                }\n            }\n            return res;\n        };\n    }\n\n    var defaultCalendar = {\n        sameDay : '[Today at] LT',\n        nextDay : '[Tomorrow at] LT',\n        nextWeek : 'dddd [at] LT',\n        lastDay : '[Yesterday at] LT',\n        lastWeek : '[Last] dddd [at] LT',\n        sameElse : 'L'\n    };\n\n    function locale_calendar__calendar (key, mom, now) {\n        var output = this._calendar[key] || this._calendar['sameElse'];\n        return isFunction(output) ? output.call(mom, now) : output;\n    }\n\n    var defaultLongDateFormat = {\n        LTS  : 'h:mm:ss A',\n        LT   : 'h:mm A',\n        L    : 'MM/DD/YYYY',\n        LL   : 'MMMM D, YYYY',\n        LLL  : 'MMMM D, YYYY h:mm A',\n        LLLL : 'dddd, MMMM D, YYYY h:mm A'\n    };\n\n    function longDateFormat (key) {\n        var format = this._longDateFormat[key],\n            formatUpper = this._longDateFormat[key.toUpperCase()];\n\n        if (format || !formatUpper) {\n            return format;\n        }\n\n        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {\n            return val.slice(1);\n        });\n\n        return this._longDateFormat[key];\n    }\n\n    var defaultInvalidDate = 'Invalid date';\n\n    function invalidDate () {\n        return this._invalidDate;\n    }\n\n    var defaultOrdinal = '%d';\n    var defaultOrdinalParse = /\\d{1,2}/;\n\n    function ordinal (number) {\n        return this._ordinal.replace('%d', number);\n    }\n\n    var defaultRelativeTime = {\n        future : 'in %s',\n        past   : '%s ago',\n        s  : 'a few seconds',\n        m  : 'a minute',\n        mm : '%d minutes',\n        h  : 'an hour',\n        hh : '%d hours',\n        d  : 'a day',\n        dd : '%d days',\n        M  : 'a month',\n        MM : '%d months',\n        y  : 'a year',\n        yy : '%d years'\n    };\n\n    function relative__relativeTime (number, withoutSuffix, string, isFuture) {\n        var output = this._relativeTime[string];\n        return (isFunction(output)) ?\n            output(number, withoutSuffix, string, isFuture) :\n            output.replace(/%d/i, number);\n    }\n\n    function pastFuture (diff, output) {\n        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];\n        return isFunction(format) ? format(output) : format.replace(/%s/i, output);\n    }\n\n    var aliases = {};\n\n    function addUnitAlias (unit, shorthand) {\n        var lowerCase = unit.toLowerCase();\n        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;\n    }\n\n    function normalizeUnits(units) {\n        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;\n    }\n\n    function normalizeObjectUnits(inputObject) {\n        var normalizedInput = {},\n            normalizedProp,\n            prop;\n\n        for (prop in inputObject) {\n            if (hasOwnProp(inputObject, prop)) {\n                normalizedProp = normalizeUnits(prop);\n                if (normalizedProp) {\n                    normalizedInput[normalizedProp] = inputObject[prop];\n                }\n            }\n        }\n\n        return normalizedInput;\n    }\n\n    var priorities = {};\n\n    function addUnitPriority(unit, priority) {\n        priorities[unit] = priority;\n    }\n\n    function getPrioritizedUnits(unitsObj) {\n        var units = [];\n        for (var u in unitsObj) {\n            units.push({unit: u, priority: priorities[u]});\n        }\n        units.sort(function (a, b) {\n            return a.priority - b.priority;\n        });\n        return units;\n    }\n\n    function makeGetSet (unit, keepTime) {\n        return function (value) {\n            if (value != null) {\n                get_set__set(this, unit, value);\n                utils_hooks__hooks.updateOffset(this, keepTime);\n                return this;\n            } else {\n                return get_set__get(this, unit);\n            }\n        };\n    }\n\n    function get_set__get (mom, unit) {\n        return mom.isValid() ?\n            mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;\n    }\n\n    function get_set__set (mom, unit, value) {\n        if (mom.isValid()) {\n            mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);\n        }\n    }\n\n    // MOMENTS\n\n    function stringGet (units) {\n        units = normalizeUnits(units);\n        if (isFunction(this[units])) {\n            return this[units]();\n        }\n        return this;\n    }\n\n\n    function stringSet (units, value) {\n        if (typeof units === 'object') {\n            units = normalizeObjectUnits(units);\n            var prioritized = getPrioritizedUnits(units);\n            for (var i = 0; i < prioritized.length; i++) {\n                this[prioritized[i].unit](units[prioritized[i].unit]);\n            }\n        } else {\n            units = normalizeUnits(units);\n            if (isFunction(this[units])) {\n                return this[units](value);\n            }\n        }\n        return this;\n    }\n\n    function zeroFill(number, targetLength, forceSign) {\n        var absNumber = '' + Math.abs(number),\n            zerosToFill = targetLength - absNumber.length,\n            sign = number >= 0;\n        return (sign ? (forceSign ? '+' : '') : '-') +\n            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;\n    }\n\n    var formattingTokens = /(\\[[^\\[]*\\])|(\\\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;\n\n    var localFormattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(LTS|LT|LL?L?L?|l{1,4})/g;\n\n    var formatFunctions = {};\n\n    var formatTokenFunctions = {};\n\n    // token:    'M'\n    // padded:   ['MM', 2]\n    // ordinal:  'Mo'\n    // callback: function () { this.month() + 1 }\n    function addFormatToken (token, padded, ordinal, callback) {\n        var func = callback;\n        if (typeof callback === 'string') {\n            func = function () {\n                return this[callback]();\n            };\n        }\n        if (token) {\n            formatTokenFunctions[token] = func;\n        }\n        if (padded) {\n            formatTokenFunctions[padded[0]] = function () {\n                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);\n            };\n        }\n        if (ordinal) {\n            formatTokenFunctions[ordinal] = function () {\n                return this.localeData().ordinal(func.apply(this, arguments), token);\n            };\n        }\n    }\n\n    function removeFormattingTokens(input) {\n        if (input.match(/\\[[\\s\\S]/)) {\n            return input.replace(/^\\[|\\]$/g, '');\n        }\n        return input.replace(/\\\\/g, '');\n    }\n\n    function makeFormatFunction(format) {\n        var array = format.match(formattingTokens), i, length;\n\n        for (i = 0, length = array.length; i < length; i++) {\n            if (formatTokenFunctions[array[i]]) {\n                array[i] = formatTokenFunctions[array[i]];\n            } else {\n                array[i] = removeFormattingTokens(array[i]);\n            }\n        }\n\n        return function (mom) {\n            var output = '', i;\n            for (i = 0; i < length; i++) {\n                output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];\n            }\n            return output;\n        };\n    }\n\n    // format date using native date object\n    function formatMoment(m, format) {\n        if (!m.isValid()) {\n            return m.localeData().invalidDate();\n        }\n\n        format = expandFormat(format, m.localeData());\n        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);\n\n        return formatFunctions[format](m);\n    }\n\n    function expandFormat(format, locale) {\n        var i = 5;\n\n        function replaceLongDateFormatTokens(input) {\n            return locale.longDateFormat(input) || input;\n        }\n\n        localFormattingTokens.lastIndex = 0;\n        while (i >= 0 && localFormattingTokens.test(format)) {\n            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);\n            localFormattingTokens.lastIndex = 0;\n            i -= 1;\n        }\n\n        return format;\n    }\n\n    var match1         = /\\d/;            //       0 - 9\n    var match2         = /\\d\\d/;          //      00 - 99\n    var match3         = /\\d{3}/;         //     000 - 999\n    var match4         = /\\d{4}/;         //    0000 - 9999\n    var match6         = /[+-]?\\d{6}/;    // -999999 - 999999\n    var match1to2      = /\\d\\d?/;         //       0 - 99\n    var match3to4      = /\\d\\d\\d\\d?/;     //     999 - 9999\n    var match5to6      = /\\d\\d\\d\\d\\d\\d?/; //   99999 - 999999\n    var match1to3      = /\\d{1,3}/;       //       0 - 999\n    var match1to4      = /\\d{1,4}/;       //       0 - 9999\n    var match1to6      = /[+-]?\\d{1,6}/;  // -999999 - 999999\n\n    var matchUnsigned  = /\\d+/;           //       0 - inf\n    var matchSigned    = /[+-]?\\d+/;      //    -inf - inf\n\n    var matchOffset    = /Z|[+-]\\d\\d:?\\d\\d/gi; // +00:00 -00:00 +0000 -0000 or Z\n    var matchShortOffset = /Z|[+-]\\d\\d(?::?\\d\\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z\n\n    var matchTimestamp = /[+-]?\\d+(\\.\\d{1,3})?/; // 123456789 123456789.123\n\n    // any word (or two) characters or numbers including two/three word month in arabic.\n    // includes scottish gaelic two word and hyphenated months\n    var matchWord = /[0-9]*['a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+|[\\u0600-\\u06FF\\/]+(\\s*?[\\u0600-\\u06FF]+){1,2}/i;\n\n\n    var regexes = {};\n\n    function addRegexToken (token, regex, strictRegex) {\n        regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {\n            return (isStrict && strictRegex) ? strictRegex : regex;\n        };\n    }\n\n    function getParseRegexForToken (token, config) {\n        if (!hasOwnProp(regexes, token)) {\n            return new RegExp(unescapeFormat(token));\n        }\n\n        return regexes[token](config._strict, config._locale);\n    }\n\n    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript\n    function unescapeFormat(s) {\n        return regexEscape(s.replace('\\\\', '').replace(/\\\\(\\[)|\\\\(\\])|\\[([^\\]\\[]*)\\]|\\\\(.)/g, function (matched, p1, p2, p3, p4) {\n            return p1 || p2 || p3 || p4;\n        }));\n    }\n\n    function regexEscape(s) {\n        return s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n    }\n\n    var tokens = {};\n\n    function addParseToken (token, callback) {\n        var i, func = callback;\n        if (typeof token === 'string') {\n            token = [token];\n        }\n        if (typeof callback === 'number') {\n            func = function (input, array) {\n                array[callback] = toInt(input);\n            };\n        }\n        for (i = 0; i < token.length; i++) {\n            tokens[token[i]] = func;\n        }\n    }\n\n    function addWeekParseToken (token, callback) {\n        addParseToken(token, function (input, array, config, token) {\n            config._w = config._w || {};\n            callback(input, config._w, config, token);\n        });\n    }\n\n    function addTimeToArrayFromToken(token, input, config) {\n        if (input != null && hasOwnProp(tokens, token)) {\n            tokens[token](input, config._a, config, token);\n        }\n    }\n\n    var YEAR = 0;\n    var MONTH = 1;\n    var DATE = 2;\n    var HOUR = 3;\n    var MINUTE = 4;\n    var SECOND = 5;\n    var MILLISECOND = 6;\n    var WEEK = 7;\n    var WEEKDAY = 8;\n\n    var indexOf;\n\n    if (Array.prototype.indexOf) {\n        indexOf = Array.prototype.indexOf;\n    } else {\n        indexOf = function (o) {\n            // I know\n            var i;\n            for (i = 0; i < this.length; ++i) {\n                if (this[i] === o) {\n                    return i;\n                }\n            }\n            return -1;\n        };\n    }\n\n    function daysInMonth(year, month) {\n        return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();\n    }\n\n    // FORMATTING\n\n    addFormatToken('M', ['MM', 2], 'Mo', function () {\n        return this.month() + 1;\n    });\n\n    addFormatToken('MMM', 0, 0, function (format) {\n        return this.localeData().monthsShort(this, format);\n    });\n\n    addFormatToken('MMMM', 0, 0, function (format) {\n        return this.localeData().months(this, format);\n    });\n\n    // ALIASES\n\n    addUnitAlias('month', 'M');\n\n    // PRIORITY\n\n    addUnitPriority('month', 8);\n\n    // PARSING\n\n    addRegexToken('M',    match1to2);\n    addRegexToken('MM',   match1to2, match2);\n    addRegexToken('MMM',  function (isStrict, locale) {\n        return locale.monthsShortRegex(isStrict);\n    });\n    addRegexToken('MMMM', function (isStrict, locale) {\n        return locale.monthsRegex(isStrict);\n    });\n\n    addParseToken(['M', 'MM'], function (input, array) {\n        array[MONTH] = toInt(input) - 1;\n    });\n\n    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {\n        var month = config._locale.monthsParse(input, token, config._strict);\n        // if we didn't find a month name, mark the date as invalid.\n        if (month != null) {\n            array[MONTH] = month;\n        } else {\n            getParsingFlags(config).invalidMonth = input;\n        }\n    });\n\n    // LOCALES\n\n    var MONTHS_IN_FORMAT = /D[oD]?(\\[[^\\[\\]]*\\]|\\s+)+MMMM?/;\n    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');\n    function localeMonths (m, format) {\n        return isArray(this._months) ? this._months[m.month()] :\n            this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];\n    }\n\n    var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');\n    function localeMonthsShort (m, format) {\n        return isArray(this._monthsShort) ? this._monthsShort[m.month()] :\n            this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];\n    }\n\n    function units_month__handleStrictParse(monthName, format, strict) {\n        var i, ii, mom, llc = monthName.toLocaleLowerCase();\n        if (!this._monthsParse) {\n            // this is not used\n            this._monthsParse = [];\n            this._longMonthsParse = [];\n            this._shortMonthsParse = [];\n            for (i = 0; i < 12; ++i) {\n                mom = create_utc__createUTC([2000, i]);\n                this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();\n                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();\n            }\n        }\n\n        if (strict) {\n            if (format === 'MMM') {\n                ii = indexOf.call(this._shortMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._longMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        } else {\n            if (format === 'MMM') {\n                ii = indexOf.call(this._shortMonthsParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._longMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._longMonthsParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._shortMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        }\n    }\n\n    function localeMonthsParse (monthName, format, strict) {\n        var i, mom, regex;\n\n        if (this._monthsParseExact) {\n            return units_month__handleStrictParse.call(this, monthName, format, strict);\n        }\n\n        if (!this._monthsParse) {\n            this._monthsParse = [];\n            this._longMonthsParse = [];\n            this._shortMonthsParse = [];\n        }\n\n        // TODO: add sorting\n        // Sorting makes sure if one month (or abbr) is a prefix of another\n        // see sorting in computeMonthsParse\n        for (i = 0; i < 12; i++) {\n            // make the regex if we don't have it already\n            mom = create_utc__createUTC([2000, i]);\n            if (strict && !this._longMonthsParse[i]) {\n                this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');\n                this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');\n            }\n            if (!strict && !this._monthsParse[i]) {\n                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');\n                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');\n            }\n            // test the regex\n            if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {\n                return i;\n            } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {\n                return i;\n            } else if (!strict && this._monthsParse[i].test(monthName)) {\n                return i;\n            }\n        }\n    }\n\n    // MOMENTS\n\n    function setMonth (mom, value) {\n        var dayOfMonth;\n\n        if (!mom.isValid()) {\n            // No op\n            return mom;\n        }\n\n        if (typeof value === 'string') {\n            if (/^\\d+$/.test(value)) {\n                value = toInt(value);\n            } else {\n                value = mom.localeData().monthsParse(value);\n                // TODO: Another silent failure?\n                if (typeof value !== 'number') {\n                    return mom;\n                }\n            }\n        }\n\n        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));\n        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);\n        return mom;\n    }\n\n    function getSetMonth (value) {\n        if (value != null) {\n            setMonth(this, value);\n            utils_hooks__hooks.updateOffset(this, true);\n            return this;\n        } else {\n            return get_set__get(this, 'Month');\n        }\n    }\n\n    function getDaysInMonth () {\n        return daysInMonth(this.year(), this.month());\n    }\n\n    var defaultMonthsShortRegex = matchWord;\n    function monthsShortRegex (isStrict) {\n        if (this._monthsParseExact) {\n            if (!hasOwnProp(this, '_monthsRegex')) {\n                computeMonthsParse.call(this);\n            }\n            if (isStrict) {\n                return this._monthsShortStrictRegex;\n            } else {\n                return this._monthsShortRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_monthsShortRegex')) {\n                this._monthsShortRegex = defaultMonthsShortRegex;\n            }\n            return this._monthsShortStrictRegex && isStrict ?\n                this._monthsShortStrictRegex : this._monthsShortRegex;\n        }\n    }\n\n    var defaultMonthsRegex = matchWord;\n    function monthsRegex (isStrict) {\n        if (this._monthsParseExact) {\n            if (!hasOwnProp(this, '_monthsRegex')) {\n                computeMonthsParse.call(this);\n            }\n            if (isStrict) {\n                return this._monthsStrictRegex;\n            } else {\n                return this._monthsRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_monthsRegex')) {\n                this._monthsRegex = defaultMonthsRegex;\n            }\n            return this._monthsStrictRegex && isStrict ?\n                this._monthsStrictRegex : this._monthsRegex;\n        }\n    }\n\n    function computeMonthsParse () {\n        function cmpLenRev(a, b) {\n            return b.length - a.length;\n        }\n\n        var shortPieces = [], longPieces = [], mixedPieces = [],\n            i, mom;\n        for (i = 0; i < 12; i++) {\n            // make the regex if we don't have it already\n            mom = create_utc__createUTC([2000, i]);\n            shortPieces.push(this.monthsShort(mom, ''));\n            longPieces.push(this.months(mom, ''));\n            mixedPieces.push(this.months(mom, ''));\n            mixedPieces.push(this.monthsShort(mom, ''));\n        }\n        // Sorting makes sure if one month (or abbr) is a prefix of another it\n        // will match the longer piece.\n        shortPieces.sort(cmpLenRev);\n        longPieces.sort(cmpLenRev);\n        mixedPieces.sort(cmpLenRev);\n        for (i = 0; i < 12; i++) {\n            shortPieces[i] = regexEscape(shortPieces[i]);\n            longPieces[i] = regexEscape(longPieces[i]);\n        }\n        for (i = 0; i < 24; i++) {\n            mixedPieces[i] = regexEscape(mixedPieces[i]);\n        }\n\n        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');\n        this._monthsShortRegex = this._monthsRegex;\n        this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');\n        this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');\n    }\n\n    // FORMATTING\n\n    addFormatToken('Y', 0, 0, function () {\n        var y = this.year();\n        return y <= 9999 ? '' + y : '+' + y;\n    });\n\n    addFormatToken(0, ['YY', 2], 0, function () {\n        return this.year() % 100;\n    });\n\n    addFormatToken(0, ['YYYY',   4],       0, 'year');\n    addFormatToken(0, ['YYYYY',  5],       0, 'year');\n    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');\n\n    // ALIASES\n\n    addUnitAlias('year', 'y');\n\n    // PRIORITIES\n\n    addUnitPriority('year', 1);\n\n    // PARSING\n\n    addRegexToken('Y',      matchSigned);\n    addRegexToken('YY',     match1to2, match2);\n    addRegexToken('YYYY',   match1to4, match4);\n    addRegexToken('YYYYY',  match1to6, match6);\n    addRegexToken('YYYYYY', match1to6, match6);\n\n    addParseToken(['YYYYY', 'YYYYYY'], YEAR);\n    addParseToken('YYYY', function (input, array) {\n        array[YEAR] = input.length === 2 ? utils_hooks__hooks.parseTwoDigitYear(input) : toInt(input);\n    });\n    addParseToken('YY', function (input, array) {\n        array[YEAR] = utils_hooks__hooks.parseTwoDigitYear(input);\n    });\n    addParseToken('Y', function (input, array) {\n        array[YEAR] = parseInt(input, 10);\n    });\n\n    // HELPERS\n\n    function daysInYear(year) {\n        return isLeapYear(year) ? 366 : 365;\n    }\n\n    function isLeapYear(year) {\n        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;\n    }\n\n    // HOOKS\n\n    utils_hooks__hooks.parseTwoDigitYear = function (input) {\n        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);\n    };\n\n    // MOMENTS\n\n    var getSetYear = makeGetSet('FullYear', true);\n\n    function getIsLeapYear () {\n        return isLeapYear(this.year());\n    }\n\n    function createDate (y, m, d, h, M, s, ms) {\n        //can't just apply() to create a date:\n        //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply\n        var date = new Date(y, m, d, h, M, s, ms);\n\n        //the date constructor remaps years 0-99 to 1900-1999\n        if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {\n            date.setFullYear(y);\n        }\n        return date;\n    }\n\n    function createUTCDate (y) {\n        var date = new Date(Date.UTC.apply(null, arguments));\n\n        //the Date.UTC function remaps years 0-99 to 1900-1999\n        if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {\n            date.setUTCFullYear(y);\n        }\n        return date;\n    }\n\n    // start-of-first-week - start-of-year\n    function firstWeekOffset(year, dow, doy) {\n        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)\n            fwd = 7 + dow - doy,\n            // first-week day local weekday -- which local weekday is fwd\n            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;\n\n        return -fwdlw + fwd - 1;\n    }\n\n    //http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday\n    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {\n        var localWeekday = (7 + weekday - dow) % 7,\n            weekOffset = firstWeekOffset(year, dow, doy),\n            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,\n            resYear, resDayOfYear;\n\n        if (dayOfYear <= 0) {\n            resYear = year - 1;\n            resDayOfYear = daysInYear(resYear) + dayOfYear;\n        } else if (dayOfYear > daysInYear(year)) {\n            resYear = year + 1;\n            resDayOfYear = dayOfYear - daysInYear(year);\n        } else {\n            resYear = year;\n            resDayOfYear = dayOfYear;\n        }\n\n        return {\n            year: resYear,\n            dayOfYear: resDayOfYear\n        };\n    }\n\n    function weekOfYear(mom, dow, doy) {\n        var weekOffset = firstWeekOffset(mom.year(), dow, doy),\n            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,\n            resWeek, resYear;\n\n        if (week < 1) {\n            resYear = mom.year() - 1;\n            resWeek = week + weeksInYear(resYear, dow, doy);\n        } else if (week > weeksInYear(mom.year(), dow, doy)) {\n            resWeek = week - weeksInYear(mom.year(), dow, doy);\n            resYear = mom.year() + 1;\n        } else {\n            resYear = mom.year();\n            resWeek = week;\n        }\n\n        return {\n            week: resWeek,\n            year: resYear\n        };\n    }\n\n    function weeksInYear(year, dow, doy) {\n        var weekOffset = firstWeekOffset(year, dow, doy),\n            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);\n        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;\n    }\n\n    // FORMATTING\n\n    addFormatToken('w', ['ww', 2], 'wo', 'week');\n    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');\n\n    // ALIASES\n\n    addUnitAlias('week', 'w');\n    addUnitAlias('isoWeek', 'W');\n\n    // PRIORITIES\n\n    addUnitPriority('week', 5);\n    addUnitPriority('isoWeek', 5);\n\n    // PARSING\n\n    addRegexToken('w',  match1to2);\n    addRegexToken('ww', match1to2, match2);\n    addRegexToken('W',  match1to2);\n    addRegexToken('WW', match1to2, match2);\n\n    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {\n        week[token.substr(0, 1)] = toInt(input);\n    });\n\n    // HELPERS\n\n    // LOCALES\n\n    function localeWeek (mom) {\n        return weekOfYear(mom, this._week.dow, this._week.doy).week;\n    }\n\n    var defaultLocaleWeek = {\n        dow : 0, // Sunday is the first day of the week.\n        doy : 6  // The week that contains Jan 1st is the first week of the year.\n    };\n\n    function localeFirstDayOfWeek () {\n        return this._week.dow;\n    }\n\n    function localeFirstDayOfYear () {\n        return this._week.doy;\n    }\n\n    // MOMENTS\n\n    function getSetWeek (input) {\n        var week = this.localeData().week(this);\n        return input == null ? week : this.add((input - week) * 7, 'd');\n    }\n\n    function getSetISOWeek (input) {\n        var week = weekOfYear(this, 1, 4).week;\n        return input == null ? week : this.add((input - week) * 7, 'd');\n    }\n\n    // FORMATTING\n\n    addFormatToken('d', 0, 'do', 'day');\n\n    addFormatToken('dd', 0, 0, function (format) {\n        return this.localeData().weekdaysMin(this, format);\n    });\n\n    addFormatToken('ddd', 0, 0, function (format) {\n        return this.localeData().weekdaysShort(this, format);\n    });\n\n    addFormatToken('dddd', 0, 0, function (format) {\n        return this.localeData().weekdays(this, format);\n    });\n\n    addFormatToken('e', 0, 0, 'weekday');\n    addFormatToken('E', 0, 0, 'isoWeekday');\n\n    // ALIASES\n\n    addUnitAlias('day', 'd');\n    addUnitAlias('weekday', 'e');\n    addUnitAlias('isoWeekday', 'E');\n\n    // PRIORITY\n    addUnitPriority('day', 11);\n    addUnitPriority('weekday', 11);\n    addUnitPriority('isoWeekday', 11);\n\n    // PARSING\n\n    addRegexToken('d',    match1to2);\n    addRegexToken('e',    match1to2);\n    addRegexToken('E',    match1to2);\n    addRegexToken('dd',   function (isStrict, locale) {\n        return locale.weekdaysMinRegex(isStrict);\n    });\n    addRegexToken('ddd',   function (isStrict, locale) {\n        return locale.weekdaysShortRegex(isStrict);\n    });\n    addRegexToken('dddd',   function (isStrict, locale) {\n        return locale.weekdaysRegex(isStrict);\n    });\n\n    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {\n        var weekday = config._locale.weekdaysParse(input, token, config._strict);\n        // if we didn't get a weekday name, mark the date as invalid\n        if (weekday != null) {\n            week.d = weekday;\n        } else {\n            getParsingFlags(config).invalidWeekday = input;\n        }\n    });\n\n    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {\n        week[token] = toInt(input);\n    });\n\n    // HELPERS\n\n    function parseWeekday(input, locale) {\n        if (typeof input !== 'string') {\n            return input;\n        }\n\n        if (!isNaN(input)) {\n            return parseInt(input, 10);\n        }\n\n        input = locale.weekdaysParse(input);\n        if (typeof input === 'number') {\n            return input;\n        }\n\n        return null;\n    }\n\n    function parseIsoWeekday(input, locale) {\n        if (typeof input === 'string') {\n            return locale.weekdaysParse(input) % 7 || 7;\n        }\n        return isNaN(input) ? null : input;\n    }\n\n    // LOCALES\n\n    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');\n    function localeWeekdays (m, format) {\n        return isArray(this._weekdays) ? this._weekdays[m.day()] :\n            this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];\n    }\n\n    var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');\n    function localeWeekdaysShort (m) {\n        return this._weekdaysShort[m.day()];\n    }\n\n    var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');\n    function localeWeekdaysMin (m) {\n        return this._weekdaysMin[m.day()];\n    }\n\n    function day_of_week__handleStrictParse(weekdayName, format, strict) {\n        var i, ii, mom, llc = weekdayName.toLocaleLowerCase();\n        if (!this._weekdaysParse) {\n            this._weekdaysParse = [];\n            this._shortWeekdaysParse = [];\n            this._minWeekdaysParse = [];\n\n            for (i = 0; i < 7; ++i) {\n                mom = create_utc__createUTC([2000, 1]).day(i);\n                this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();\n                this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();\n                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();\n            }\n        }\n\n        if (strict) {\n            if (format === 'dddd') {\n                ii = indexOf.call(this._weekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else if (format === 'ddd') {\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        } else {\n            if (format === 'dddd') {\n                ii = indexOf.call(this._weekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else if (format === 'ddd') {\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._weekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._weekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        }\n    }\n\n    function localeWeekdaysParse (weekdayName, format, strict) {\n        var i, mom, regex;\n\n        if (this._weekdaysParseExact) {\n            return day_of_week__handleStrictParse.call(this, weekdayName, format, strict);\n        }\n\n        if (!this._weekdaysParse) {\n            this._weekdaysParse = [];\n            this._minWeekdaysParse = [];\n            this._shortWeekdaysParse = [];\n            this._fullWeekdaysParse = [];\n        }\n\n        for (i = 0; i < 7; i++) {\n            // make the regex if we don't have it already\n\n            mom = create_utc__createUTC([2000, 1]).day(i);\n            if (strict && !this._fullWeekdaysParse[i]) {\n                this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\\.?') + '$', 'i');\n                this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$', 'i');\n                this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$', 'i');\n            }\n            if (!this._weekdaysParse[i]) {\n                regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');\n                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');\n            }\n            // test the regex\n            if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {\n                return i;\n            } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {\n                return i;\n            } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {\n                return i;\n            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {\n                return i;\n            }\n        }\n    }\n\n    // MOMENTS\n\n    function getSetDayOfWeek (input) {\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();\n        if (input != null) {\n            input = parseWeekday(input, this.localeData());\n            return this.add(input - day, 'd');\n        } else {\n            return day;\n        }\n    }\n\n    function getSetLocaleDayOfWeek (input) {\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;\n        return input == null ? weekday : this.add(input - weekday, 'd');\n    }\n\n    function getSetISODayOfWeek (input) {\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n\n        // behaves the same as moment#day except\n        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)\n        // as a setter, sunday should belong to the previous week.\n\n        if (input != null) {\n            var weekday = parseIsoWeekday(input, this.localeData());\n            return this.day(this.day() % 7 ? weekday : weekday - 7);\n        } else {\n            return this.day() || 7;\n        }\n    }\n\n    var defaultWeekdaysRegex = matchWord;\n    function weekdaysRegex (isStrict) {\n        if (this._weekdaysParseExact) {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                computeWeekdaysParse.call(this);\n            }\n            if (isStrict) {\n                return this._weekdaysStrictRegex;\n            } else {\n                return this._weekdaysRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                this._weekdaysRegex = defaultWeekdaysRegex;\n            }\n            return this._weekdaysStrictRegex && isStrict ?\n                this._weekdaysStrictRegex : this._weekdaysRegex;\n        }\n    }\n\n    var defaultWeekdaysShortRegex = matchWord;\n    function weekdaysShortRegex (isStrict) {\n        if (this._weekdaysParseExact) {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                computeWeekdaysParse.call(this);\n            }\n            if (isStrict) {\n                return this._weekdaysShortStrictRegex;\n            } else {\n                return this._weekdaysShortRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_weekdaysShortRegex')) {\n                this._weekdaysShortRegex = defaultWeekdaysShortRegex;\n            }\n            return this._weekdaysShortStrictRegex && isStrict ?\n                this._weekdaysShortStrictRegex : this._weekdaysShortRegex;\n        }\n    }\n\n    var defaultWeekdaysMinRegex = matchWord;\n    function weekdaysMinRegex (isStrict) {\n        if (this._weekdaysParseExact) {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                computeWeekdaysParse.call(this);\n            }\n            if (isStrict) {\n                return this._weekdaysMinStrictRegex;\n            } else {\n                return this._weekdaysMinRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_weekdaysMinRegex')) {\n                this._weekdaysMinRegex = defaultWeekdaysMinRegex;\n            }\n            return this._weekdaysMinStrictRegex && isStrict ?\n                this._weekdaysMinStrictRegex : this._weekdaysMinRegex;\n        }\n    }\n\n\n    function computeWeekdaysParse () {\n        function cmpLenRev(a, b) {\n            return b.length - a.length;\n        }\n\n        var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],\n            i, mom, minp, shortp, longp;\n        for (i = 0; i < 7; i++) {\n            // make the regex if we don't have it already\n            mom = create_utc__createUTC([2000, 1]).day(i);\n            minp = this.weekdaysMin(mom, '');\n            shortp = this.weekdaysShort(mom, '');\n            longp = this.weekdays(mom, '');\n            minPieces.push(minp);\n            shortPieces.push(shortp);\n            longPieces.push(longp);\n            mixedPieces.push(minp);\n            mixedPieces.push(shortp);\n            mixedPieces.push(longp);\n        }\n        // Sorting makes sure if one weekday (or abbr) is a prefix of another it\n        // will match the longer piece.\n        minPieces.sort(cmpLenRev);\n        shortPieces.sort(cmpLenRev);\n        longPieces.sort(cmpLenRev);\n        mixedPieces.sort(cmpLenRev);\n        for (i = 0; i < 7; i++) {\n            shortPieces[i] = regexEscape(shortPieces[i]);\n            longPieces[i] = regexEscape(longPieces[i]);\n            mixedPieces[i] = regexEscape(mixedPieces[i]);\n        }\n\n        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');\n        this._weekdaysShortRegex = this._weekdaysRegex;\n        this._weekdaysMinRegex = this._weekdaysRegex;\n\n        this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');\n        this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');\n        this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');\n    }\n\n    // FORMATTING\n\n    function hFormat() {\n        return this.hours() % 12 || 12;\n    }\n\n    function kFormat() {\n        return this.hours() || 24;\n    }\n\n    addFormatToken('H', ['HH', 2], 0, 'hour');\n    addFormatToken('h', ['hh', 2], 0, hFormat);\n    addFormatToken('k', ['kk', 2], 0, kFormat);\n\n    addFormatToken('hmm', 0, 0, function () {\n        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);\n    });\n\n    addFormatToken('hmmss', 0, 0, function () {\n        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +\n            zeroFill(this.seconds(), 2);\n    });\n\n    addFormatToken('Hmm', 0, 0, function () {\n        return '' + this.hours() + zeroFill(this.minutes(), 2);\n    });\n\n    addFormatToken('Hmmss', 0, 0, function () {\n        return '' + this.hours() + zeroFill(this.minutes(), 2) +\n            zeroFill(this.seconds(), 2);\n    });\n\n    function meridiem (token, lowercase) {\n        addFormatToken(token, 0, 0, function () {\n            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);\n        });\n    }\n\n    meridiem('a', true);\n    meridiem('A', false);\n\n    // ALIASES\n\n    addUnitAlias('hour', 'h');\n\n    // PRIORITY\n    addUnitPriority('hour', 13);\n\n    // PARSING\n\n    function matchMeridiem (isStrict, locale) {\n        return locale._meridiemParse;\n    }\n\n    addRegexToken('a',  matchMeridiem);\n    addRegexToken('A',  matchMeridiem);\n    addRegexToken('H',  match1to2);\n    addRegexToken('h',  match1to2);\n    addRegexToken('HH', match1to2, match2);\n    addRegexToken('hh', match1to2, match2);\n\n    addRegexToken('hmm', match3to4);\n    addRegexToken('hmmss', match5to6);\n    addRegexToken('Hmm', match3to4);\n    addRegexToken('Hmmss', match5to6);\n\n    addParseToken(['H', 'HH'], HOUR);\n    addParseToken(['a', 'A'], function (input, array, config) {\n        config._isPm = config._locale.isPM(input);\n        config._meridiem = input;\n    });\n    addParseToken(['h', 'hh'], function (input, array, config) {\n        array[HOUR] = toInt(input);\n        getParsingFlags(config).bigHour = true;\n    });\n    addParseToken('hmm', function (input, array, config) {\n        var pos = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos));\n        array[MINUTE] = toInt(input.substr(pos));\n        getParsingFlags(config).bigHour = true;\n    });\n    addParseToken('hmmss', function (input, array, config) {\n        var pos1 = input.length - 4;\n        var pos2 = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos1));\n        array[MINUTE] = toInt(input.substr(pos1, 2));\n        array[SECOND] = toInt(input.substr(pos2));\n        getParsingFlags(config).bigHour = true;\n    });\n    addParseToken('Hmm', function (input, array, config) {\n        var pos = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos));\n        array[MINUTE] = toInt(input.substr(pos));\n    });\n    addParseToken('Hmmss', function (input, array, config) {\n        var pos1 = input.length - 4;\n        var pos2 = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos1));\n        array[MINUTE] = toInt(input.substr(pos1, 2));\n        array[SECOND] = toInt(input.substr(pos2));\n    });\n\n    // LOCALES\n\n    function localeIsPM (input) {\n        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays\n        // Using charAt should be more compatible.\n        return ((input + '').toLowerCase().charAt(0) === 'p');\n    }\n\n    var defaultLocaleMeridiemParse = /[ap]\\.?m?\\.?/i;\n    function localeMeridiem (hours, minutes, isLower) {\n        if (hours > 11) {\n            return isLower ? 'pm' : 'PM';\n        } else {\n            return isLower ? 'am' : 'AM';\n        }\n    }\n\n\n    // MOMENTS\n\n    // Setting the hour should keep the time, because the user explicitly\n    // specified which hour he wants. So trying to maintain the same hour (in\n    // a new timezone) makes sense. Adding/subtracting hours does not follow\n    // this rule.\n    var getSetHour = makeGetSet('Hours', true);\n\n    var baseConfig = {\n        calendar: defaultCalendar,\n        longDateFormat: defaultLongDateFormat,\n        invalidDate: defaultInvalidDate,\n        ordinal: defaultOrdinal,\n        ordinalParse: defaultOrdinalParse,\n        relativeTime: defaultRelativeTime,\n\n        months: defaultLocaleMonths,\n        monthsShort: defaultLocaleMonthsShort,\n\n        week: defaultLocaleWeek,\n\n        weekdays: defaultLocaleWeekdays,\n        weekdaysMin: defaultLocaleWeekdaysMin,\n        weekdaysShort: defaultLocaleWeekdaysShort,\n\n        meridiemParse: defaultLocaleMeridiemParse\n    };\n\n    // internal storage for locale config files\n    var locales = {};\n    var globalLocale;\n\n    function normalizeLocale(key) {\n        return key ? key.toLowerCase().replace('_', '-') : key;\n    }\n\n    // pick the locale from the array\n    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each\n    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root\n    function chooseLocale(names) {\n        var i = 0, j, next, locale, split;\n\n        while (i < names.length) {\n            split = normalizeLocale(names[i]).split('-');\n            j = split.length;\n            next = normalizeLocale(names[i + 1]);\n            next = next ? next.split('-') : null;\n            while (j > 0) {\n                locale = loadLocale(split.slice(0, j).join('-'));\n                if (locale) {\n                    return locale;\n                }\n                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {\n                    //the next array item is better than a shallower substring of this one\n                    break;\n                }\n                j--;\n            }\n            i++;\n        }\n        return null;\n    }\n\n    function loadLocale(name) {\n        var oldLocale = null;\n        // TODO: Find a better way to register and load all the locales in Node\n        if (!locales[name] && (typeof module !== 'undefined') &&\n                module && module.exports) {\n            try {\n                oldLocale = globalLocale._abbr;\n                require('./locale/' + name);\n                // because defineLocale currently also sets the global locale, we\n                // want to undo that for lazy loaded locales\n                locale_locales__getSetGlobalLocale(oldLocale);\n            } catch (e) { }\n        }\n        return locales[name];\n    }\n\n    // This function will load locale and then set the global locale.  If\n    // no arguments are passed in, it will simply return the current global\n    // locale key.\n    function locale_locales__getSetGlobalLocale (key, values) {\n        var data;\n        if (key) {\n            if (isUndefined(values)) {\n                data = locale_locales__getLocale(key);\n            }\n            else {\n                data = defineLocale(key, values);\n            }\n\n            if (data) {\n                // moment.duration._locale = moment._locale = data;\n                globalLocale = data;\n            }\n        }\n\n        return globalLocale._abbr;\n    }\n\n    function defineLocale (name, config) {\n        if (config !== null) {\n            var parentConfig = baseConfig;\n            config.abbr = name;\n            if (locales[name] != null) {\n                deprecateSimple('defineLocaleOverride',\n                        'use moment.updateLocale(localeName, config) to change ' +\n                        'an existing locale. moment.defineLocale(localeName, ' +\n                        'config) should only be used for creating a new locale ' +\n                        'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');\n                parentConfig = locales[name]._config;\n            } else if (config.parentLocale != null) {\n                if (locales[config.parentLocale] != null) {\n                    parentConfig = locales[config.parentLocale]._config;\n                } else {\n                    // treat as if there is no base config\n                    deprecateSimple('parentLocaleUndefined',\n                            'specified parentLocale is not defined yet. See http://momentjs.com/guides/#/warnings/parent-locale/');\n                }\n            }\n            locales[name] = new Locale(mergeConfigs(parentConfig, config));\n\n            // backwards compat for now: also set the locale\n            locale_locales__getSetGlobalLocale(name);\n\n            return locales[name];\n        } else {\n            // useful for testing\n            delete locales[name];\n            return null;\n        }\n    }\n\n    function updateLocale(name, config) {\n        if (config != null) {\n            var locale, parentConfig = baseConfig;\n            // MERGE\n            if (locales[name] != null) {\n                parentConfig = locales[name]._config;\n            }\n            config = mergeConfigs(parentConfig, config);\n            locale = new Locale(config);\n            locale.parentLocale = locales[name];\n            locales[name] = locale;\n\n            // backwards compat for now: also set the locale\n            locale_locales__getSetGlobalLocale(name);\n        } else {\n            // pass null for config to unupdate, useful for tests\n            if (locales[name] != null) {\n                if (locales[name].parentLocale != null) {\n                    locales[name] = locales[name].parentLocale;\n                } else if (locales[name] != null) {\n                    delete locales[name];\n                }\n            }\n        }\n        return locales[name];\n    }\n\n    // returns locale data\n    function locale_locales__getLocale (key) {\n        var locale;\n\n        if (key && key._locale && key._locale._abbr) {\n            key = key._locale._abbr;\n        }\n\n        if (!key) {\n            return globalLocale;\n        }\n\n        if (!isArray(key)) {\n            //short-circuit everything else\n            locale = loadLocale(key);\n            if (locale) {\n                return locale;\n            }\n            key = [key];\n        }\n\n        return chooseLocale(key);\n    }\n\n    function locale_locales__listLocales() {\n        return keys(locales);\n    }\n\n    function checkOverflow (m) {\n        var overflow;\n        var a = m._a;\n\n        if (a && getParsingFlags(m).overflow === -2) {\n            overflow =\n                a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :\n                a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :\n                a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :\n                a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :\n                a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :\n                a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :\n                -1;\n\n            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {\n                overflow = DATE;\n            }\n            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {\n                overflow = WEEK;\n            }\n            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {\n                overflow = WEEKDAY;\n            }\n\n            getParsingFlags(m).overflow = overflow;\n        }\n\n        return m;\n    }\n\n    // iso 8601 regex\n    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)\n    var extendedIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})-(?:\\d\\d-\\d\\d|W\\d\\d-\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?::\\d\\d(?::\\d\\d(?:[.,]\\d+)?)?)?)([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?/;\n    var basicIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})(?:\\d\\d\\d\\d|W\\d\\d\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?:\\d\\d(?:\\d\\d(?:[.,]\\d+)?)?)?)([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?/;\n\n    var tzRegex = /Z|[+-]\\d\\d(?::?\\d\\d)?/;\n\n    var isoDates = [\n        ['YYYYYY-MM-DD', /[+-]\\d{6}-\\d\\d-\\d\\d/],\n        ['YYYY-MM-DD', /\\d{4}-\\d\\d-\\d\\d/],\n        ['GGGG-[W]WW-E', /\\d{4}-W\\d\\d-\\d/],\n        ['GGGG-[W]WW', /\\d{4}-W\\d\\d/, false],\n        ['YYYY-DDD', /\\d{4}-\\d{3}/],\n        ['YYYY-MM', /\\d{4}-\\d\\d/, false],\n        ['YYYYYYMMDD', /[+-]\\d{10}/],\n        ['YYYYMMDD', /\\d{8}/],\n        // YYYYMM is NOT allowed by the standard\n        ['GGGG[W]WWE', /\\d{4}W\\d{3}/],\n        ['GGGG[W]WW', /\\d{4}W\\d{2}/, false],\n        ['YYYYDDD', /\\d{7}/]\n    ];\n\n    // iso time formats and regexes\n    var isoTimes = [\n        ['HH:mm:ss.SSSS', /\\d\\d:\\d\\d:\\d\\d\\.\\d+/],\n        ['HH:mm:ss,SSSS', /\\d\\d:\\d\\d:\\d\\d,\\d+/],\n        ['HH:mm:ss', /\\d\\d:\\d\\d:\\d\\d/],\n        ['HH:mm', /\\d\\d:\\d\\d/],\n        ['HHmmss.SSSS', /\\d\\d\\d\\d\\d\\d\\.\\d+/],\n        ['HHmmss,SSSS', /\\d\\d\\d\\d\\d\\d,\\d+/],\n        ['HHmmss', /\\d\\d\\d\\d\\d\\d/],\n        ['HHmm', /\\d\\d\\d\\d/],\n        ['HH', /\\d\\d/]\n    ];\n\n    var aspNetJsonRegex = /^\\/?Date\\((\\-?\\d+)/i;\n\n    // date from iso format\n    function configFromISO(config) {\n        var i, l,\n            string = config._i,\n            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),\n            allowTime, dateFormat, timeFormat, tzFormat;\n\n        if (match) {\n            getParsingFlags(config).iso = true;\n\n            for (i = 0, l = isoDates.length; i < l; i++) {\n                if (isoDates[i][1].exec(match[1])) {\n                    dateFormat = isoDates[i][0];\n                    allowTime = isoDates[i][2] !== false;\n                    break;\n                }\n            }\n            if (dateFormat == null) {\n                config._isValid = false;\n                return;\n            }\n            if (match[3]) {\n                for (i = 0, l = isoTimes.length; i < l; i++) {\n                    if (isoTimes[i][1].exec(match[3])) {\n                        // match[2] should be 'T' or space\n                        timeFormat = (match[2] || ' ') + isoTimes[i][0];\n                        break;\n                    }\n                }\n                if (timeFormat == null) {\n                    config._isValid = false;\n                    return;\n                }\n            }\n            if (!allowTime && timeFormat != null) {\n                config._isValid = false;\n                return;\n            }\n            if (match[4]) {\n                if (tzRegex.exec(match[4])) {\n                    tzFormat = 'Z';\n                } else {\n                    config._isValid = false;\n                    return;\n                }\n            }\n            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');\n            configFromStringAndFormat(config);\n        } else {\n            config._isValid = false;\n        }\n    }\n\n    // date from iso format or fallback\n    function configFromString(config) {\n        var matched = aspNetJsonRegex.exec(config._i);\n\n        if (matched !== null) {\n            config._d = new Date(+matched[1]);\n            return;\n        }\n\n        configFromISO(config);\n        if (config._isValid === false) {\n            delete config._isValid;\n            utils_hooks__hooks.createFromInputFallback(config);\n        }\n    }\n\n    utils_hooks__hooks.createFromInputFallback = deprecate(\n        'moment construction falls back to js Date. This is ' +\n        'discouraged and will be removed in upcoming major ' +\n        'release. Please refer to ' +\n        'http://momentjs.com/guides/#/warnings/js-date/ for more info.',\n        function (config) {\n            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));\n        }\n    );\n\n    // Pick the first defined of two or three arguments.\n    function defaults(a, b, c) {\n        if (a != null) {\n            return a;\n        }\n        if (b != null) {\n            return b;\n        }\n        return c;\n    }\n\n    function currentDateArray(config) {\n        // hooks is actually the exported moment object\n        var nowValue = new Date(utils_hooks__hooks.now());\n        if (config._useUTC) {\n            return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];\n        }\n        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];\n    }\n\n    // convert an array to a date.\n    // the array should mirror the parameters below\n    // note: all values past the year are optional and will default to the lowest possible value.\n    // [year, month, day , hour, minute, second, millisecond]\n    function configFromArray (config) {\n        var i, date, input = [], currentDate, yearToUse;\n\n        if (config._d) {\n            return;\n        }\n\n        currentDate = currentDateArray(config);\n\n        //compute day of the year from weeks and weekdays\n        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {\n            dayOfYearFromWeekInfo(config);\n        }\n\n        //if the day of the year is set, figure out what it is\n        if (config._dayOfYear) {\n            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);\n\n            if (config._dayOfYear > daysInYear(yearToUse)) {\n                getParsingFlags(config)._overflowDayOfYear = true;\n            }\n\n            date = createUTCDate(yearToUse, 0, config._dayOfYear);\n            config._a[MONTH] = date.getUTCMonth();\n            config._a[DATE] = date.getUTCDate();\n        }\n\n        // Default to current date.\n        // * if no year, month, day of month are given, default to today\n        // * if day of month is given, default month and year\n        // * if month is given, default only year\n        // * if year is given, don't default anything\n        for (i = 0; i < 3 && config._a[i] == null; ++i) {\n            config._a[i] = input[i] = currentDate[i];\n        }\n\n        // Zero out whatever was not defaulted, including time\n        for (; i < 7; i++) {\n            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];\n        }\n\n        // Check for 24:00:00.000\n        if (config._a[HOUR] === 24 &&\n                config._a[MINUTE] === 0 &&\n                config._a[SECOND] === 0 &&\n                config._a[MILLISECOND] === 0) {\n            config._nextDay = true;\n            config._a[HOUR] = 0;\n        }\n\n        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);\n        // Apply timezone offset from input. The actual utcOffset can be changed\n        // with parseZone.\n        if (config._tzm != null) {\n            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);\n        }\n\n        if (config._nextDay) {\n            config._a[HOUR] = 24;\n        }\n    }\n\n    function dayOfYearFromWeekInfo(config) {\n        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;\n\n        w = config._w;\n        if (w.GG != null || w.W != null || w.E != null) {\n            dow = 1;\n            doy = 4;\n\n            // TODO: We need to take the current isoWeekYear, but that depends on\n            // how we interpret now (local, utc, fixed offset). So create\n            // a now version of current config (take local/utc/offset flags, and\n            // create now).\n            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(local__createLocal(), 1, 4).year);\n            week = defaults(w.W, 1);\n            weekday = defaults(w.E, 1);\n            if (weekday < 1 || weekday > 7) {\n                weekdayOverflow = true;\n            }\n        } else {\n            dow = config._locale._week.dow;\n            doy = config._locale._week.doy;\n\n            weekYear = defaults(w.gg, config._a[YEAR], weekOfYear(local__createLocal(), dow, doy).year);\n            week = defaults(w.w, 1);\n\n            if (w.d != null) {\n                // weekday -- low day numbers are considered next week\n                weekday = w.d;\n                if (weekday < 0 || weekday > 6) {\n                    weekdayOverflow = true;\n                }\n            } else if (w.e != null) {\n                // local weekday -- counting starts from begining of week\n                weekday = w.e + dow;\n                if (w.e < 0 || w.e > 6) {\n                    weekdayOverflow = true;\n                }\n            } else {\n                // default to begining of week\n                weekday = dow;\n            }\n        }\n        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {\n            getParsingFlags(config)._overflowWeeks = true;\n        } else if (weekdayOverflow != null) {\n            getParsingFlags(config)._overflowWeekday = true;\n        } else {\n            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);\n            config._a[YEAR] = temp.year;\n            config._dayOfYear = temp.dayOfYear;\n        }\n    }\n\n    // constant that refers to the ISO standard\n    utils_hooks__hooks.ISO_8601 = function () {};\n\n    // date from string and format string\n    function configFromStringAndFormat(config) {\n        // TODO: Move this to another part of the creation flow to prevent circular deps\n        if (config._f === utils_hooks__hooks.ISO_8601) {\n            configFromISO(config);\n            return;\n        }\n\n        config._a = [];\n        getParsingFlags(config).empty = true;\n\n        // This array is used to make a Date, either with `new Date` or `Date.UTC`\n        var string = '' + config._i,\n            i, parsedInput, tokens, token, skipped,\n            stringLength = string.length,\n            totalParsedInputLength = 0;\n\n        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];\n\n        for (i = 0; i < tokens.length; i++) {\n            token = tokens[i];\n            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];\n            // console.log('token', token, 'parsedInput', parsedInput,\n            //         'regex', getParseRegexForToken(token, config));\n            if (parsedInput) {\n                skipped = string.substr(0, string.indexOf(parsedInput));\n                if (skipped.length > 0) {\n                    getParsingFlags(config).unusedInput.push(skipped);\n                }\n                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);\n                totalParsedInputLength += parsedInput.length;\n            }\n            // don't parse if it's not a known token\n            if (formatTokenFunctions[token]) {\n                if (parsedInput) {\n                    getParsingFlags(config).empty = false;\n                }\n                else {\n                    getParsingFlags(config).unusedTokens.push(token);\n                }\n                addTimeToArrayFromToken(token, parsedInput, config);\n            }\n            else if (config._strict && !parsedInput) {\n                getParsingFlags(config).unusedTokens.push(token);\n            }\n        }\n\n        // add remaining unparsed input length to the string\n        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;\n        if (string.length > 0) {\n            getParsingFlags(config).unusedInput.push(string);\n        }\n\n        // clear _12h flag if hour is <= 12\n        if (config._a[HOUR] <= 12 &&\n            getParsingFlags(config).bigHour === true &&\n            config._a[HOUR] > 0) {\n            getParsingFlags(config).bigHour = undefined;\n        }\n\n        getParsingFlags(config).parsedDateParts = config._a.slice(0);\n        getParsingFlags(config).meridiem = config._meridiem;\n        // handle meridiem\n        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);\n\n        configFromArray(config);\n        checkOverflow(config);\n    }\n\n\n    function meridiemFixWrap (locale, hour, meridiem) {\n        var isPm;\n\n        if (meridiem == null) {\n            // nothing to do\n            return hour;\n        }\n        if (locale.meridiemHour != null) {\n            return locale.meridiemHour(hour, meridiem);\n        } else if (locale.isPM != null) {\n            // Fallback\n            isPm = locale.isPM(meridiem);\n            if (isPm && hour < 12) {\n                hour += 12;\n            }\n            if (!isPm && hour === 12) {\n                hour = 0;\n            }\n            return hour;\n        } else {\n            // this is not supposed to happen\n            return hour;\n        }\n    }\n\n    // date from string and array of format strings\n    function configFromStringAndArray(config) {\n        var tempConfig,\n            bestMoment,\n\n            scoreToBeat,\n            i,\n            currentScore;\n\n        if (config._f.length === 0) {\n            getParsingFlags(config).invalidFormat = true;\n            config._d = new Date(NaN);\n            return;\n        }\n\n        for (i = 0; i < config._f.length; i++) {\n            currentScore = 0;\n            tempConfig = copyConfig({}, config);\n            if (config._useUTC != null) {\n                tempConfig._useUTC = config._useUTC;\n            }\n            tempConfig._f = config._f[i];\n            configFromStringAndFormat(tempConfig);\n\n            if (!valid__isValid(tempConfig)) {\n                continue;\n            }\n\n            // if there is any input that was not parsed add a penalty for that format\n            currentScore += getParsingFlags(tempConfig).charsLeftOver;\n\n            //or tokens\n            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;\n\n            getParsingFlags(tempConfig).score = currentScore;\n\n            if (scoreToBeat == null || currentScore < scoreToBeat) {\n                scoreToBeat = currentScore;\n                bestMoment = tempConfig;\n            }\n        }\n\n        extend(config, bestMoment || tempConfig);\n    }\n\n    function configFromObject(config) {\n        if (config._d) {\n            return;\n        }\n\n        var i = normalizeObjectUnits(config._i);\n        config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {\n            return obj && parseInt(obj, 10);\n        });\n\n        configFromArray(config);\n    }\n\n    function createFromConfig (config) {\n        var res = new Moment(checkOverflow(prepareConfig(config)));\n        if (res._nextDay) {\n            // Adding is smart enough around DST\n            res.add(1, 'd');\n            res._nextDay = undefined;\n        }\n\n        return res;\n    }\n\n    function prepareConfig (config) {\n        var input = config._i,\n            format = config._f;\n\n        config._locale = config._locale || locale_locales__getLocale(config._l);\n\n        if (input === null || (format === undefined && input === '')) {\n            return valid__createInvalid({nullInput: true});\n        }\n\n        if (typeof input === 'string') {\n            config._i = input = config._locale.preparse(input);\n        }\n\n        if (isMoment(input)) {\n            return new Moment(checkOverflow(input));\n        } else if (isArray(format)) {\n            configFromStringAndArray(config);\n        } else if (isDate(input)) {\n            config._d = input;\n        } else if (format) {\n            configFromStringAndFormat(config);\n        }  else {\n            configFromInput(config);\n        }\n\n        if (!valid__isValid(config)) {\n            config._d = null;\n        }\n\n        return config;\n    }\n\n    function configFromInput(config) {\n        var input = config._i;\n        if (input === undefined) {\n            config._d = new Date(utils_hooks__hooks.now());\n        } else if (isDate(input)) {\n            config._d = new Date(input.valueOf());\n        } else if (typeof input === 'string') {\n            configFromString(config);\n        } else if (isArray(input)) {\n            config._a = map(input.slice(0), function (obj) {\n                return parseInt(obj, 10);\n            });\n            configFromArray(config);\n        } else if (typeof(input) === 'object') {\n            configFromObject(config);\n        } else if (typeof(input) === 'number') {\n            // from milliseconds\n            config._d = new Date(input);\n        } else {\n            utils_hooks__hooks.createFromInputFallback(config);\n        }\n    }\n\n    function createLocalOrUTC (input, format, locale, strict, isUTC) {\n        var c = {};\n\n        if (typeof(locale) === 'boolean') {\n            strict = locale;\n            locale = undefined;\n        }\n\n        if ((isObject(input) && isObjectEmpty(input)) ||\n                (isArray(input) && input.length === 0)) {\n            input = undefined;\n        }\n        // object construction must be done this way.\n        // https://github.com/moment/moment/issues/1423\n        c._isAMomentObject = true;\n        c._useUTC = c._isUTC = isUTC;\n        c._l = locale;\n        c._i = input;\n        c._f = format;\n        c._strict = strict;\n\n        return createFromConfig(c);\n    }\n\n    function local__createLocal (input, format, locale, strict) {\n        return createLocalOrUTC(input, format, locale, strict, false);\n    }\n\n    var prototypeMin = deprecate(\n        'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',\n        function () {\n            var other = local__createLocal.apply(null, arguments);\n            if (this.isValid() && other.isValid()) {\n                return other < this ? this : other;\n            } else {\n                return valid__createInvalid();\n            }\n        }\n    );\n\n    var prototypeMax = deprecate(\n        'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',\n        function () {\n            var other = local__createLocal.apply(null, arguments);\n            if (this.isValid() && other.isValid()) {\n                return other > this ? this : other;\n            } else {\n                return valid__createInvalid();\n            }\n        }\n    );\n\n    // Pick a moment m from moments so that m[fn](other) is true for all\n    // other. This relies on the function fn to be transitive.\n    //\n    // moments should either be an array of moment objects or an array, whose\n    // first element is an array of moment objects.\n    function pickBy(fn, moments) {\n        var res, i;\n        if (moments.length === 1 && isArray(moments[0])) {\n            moments = moments[0];\n        }\n        if (!moments.length) {\n            return local__createLocal();\n        }\n        res = moments[0];\n        for (i = 1; i < moments.length; ++i) {\n            if (!moments[i].isValid() || moments[i][fn](res)) {\n                res = moments[i];\n            }\n        }\n        return res;\n    }\n\n    // TODO: Use [].sort instead?\n    function min () {\n        var args = [].slice.call(arguments, 0);\n\n        return pickBy('isBefore', args);\n    }\n\n    function max () {\n        var args = [].slice.call(arguments, 0);\n\n        return pickBy('isAfter', args);\n    }\n\n    var now = function () {\n        return Date.now ? Date.now() : +(new Date());\n    };\n\n    function Duration (duration) {\n        var normalizedInput = normalizeObjectUnits(duration),\n            years = normalizedInput.year || 0,\n            quarters = normalizedInput.quarter || 0,\n            months = normalizedInput.month || 0,\n            weeks = normalizedInput.week || 0,\n            days = normalizedInput.day || 0,\n            hours = normalizedInput.hour || 0,\n            minutes = normalizedInput.minute || 0,\n            seconds = normalizedInput.second || 0,\n            milliseconds = normalizedInput.millisecond || 0;\n\n        // representation for dateAddRemove\n        this._milliseconds = +milliseconds +\n            seconds * 1e3 + // 1000\n            minutes * 6e4 + // 1000 * 60\n            hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978\n        // Because of dateAddRemove treats 24 hours as different from a\n        // day when working around DST, we need to store them separately\n        this._days = +days +\n            weeks * 7;\n        // It is impossible translate months into days without knowing\n        // which months you are are talking about, so we have to store\n        // it separately.\n        this._months = +months +\n            quarters * 3 +\n            years * 12;\n\n        this._data = {};\n\n        this._locale = locale_locales__getLocale();\n\n        this._bubble();\n    }\n\n    function isDuration (obj) {\n        return obj instanceof Duration;\n    }\n\n    // FORMATTING\n\n    function offset (token, separator) {\n        addFormatToken(token, 0, 0, function () {\n            var offset = this.utcOffset();\n            var sign = '+';\n            if (offset < 0) {\n                offset = -offset;\n                sign = '-';\n            }\n            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);\n        });\n    }\n\n    offset('Z', ':');\n    offset('ZZ', '');\n\n    // PARSING\n\n    addRegexToken('Z',  matchShortOffset);\n    addRegexToken('ZZ', matchShortOffset);\n    addParseToken(['Z', 'ZZ'], function (input, array, config) {\n        config._useUTC = true;\n        config._tzm = offsetFromString(matchShortOffset, input);\n    });\n\n    // HELPERS\n\n    // timezone chunker\n    // '+10:00' > ['10',  '00']\n    // '-1530'  > ['-15', '30']\n    var chunkOffset = /([\\+\\-]|\\d\\d)/gi;\n\n    function offsetFromString(matcher, string) {\n        var matches = ((string || '').match(matcher) || []);\n        var chunk   = matches[matches.length - 1] || [];\n        var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];\n        var minutes = +(parts[1] * 60) + toInt(parts[2]);\n\n        return parts[0] === '+' ? minutes : -minutes;\n    }\n\n    // Return a moment from input, that is local/utc/zone equivalent to model.\n    function cloneWithOffset(input, model) {\n        var res, diff;\n        if (model._isUTC) {\n            res = model.clone();\n            diff = (isMoment(input) || isDate(input) ? input.valueOf() : local__createLocal(input).valueOf()) - res.valueOf();\n            // Use low-level api, because this fn is low-level api.\n            res._d.setTime(res._d.valueOf() + diff);\n            utils_hooks__hooks.updateOffset(res, false);\n            return res;\n        } else {\n            return local__createLocal(input).local();\n        }\n    }\n\n    function getDateOffset (m) {\n        // On Firefox.24 Date#getTimezoneOffset returns a floating point.\n        // https://github.com/moment/moment/pull/1871\n        return -Math.round(m._d.getTimezoneOffset() / 15) * 15;\n    }\n\n    // HOOKS\n\n    // This function will be called whenever a moment is mutated.\n    // It is intended to keep the offset in sync with the timezone.\n    utils_hooks__hooks.updateOffset = function () {};\n\n    // MOMENTS\n\n    // keepLocalTime = true means only change the timezone, without\n    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->\n    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset\n    // +0200, so we adjust the time as needed, to be valid.\n    //\n    // Keeping the time actually adds/subtracts (one hour)\n    // from the actual represented time. That is why we call updateOffset\n    // a second time. In case it wants us to change the offset again\n    // _changeInProgress == true case, then we have to adjust, because\n    // there is no such time in the given timezone.\n    function getSetOffset (input, keepLocalTime) {\n        var offset = this._offset || 0,\n            localAdjust;\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n        if (input != null) {\n            if (typeof input === 'string') {\n                input = offsetFromString(matchShortOffset, input);\n            } else if (Math.abs(input) < 16) {\n                input = input * 60;\n            }\n            if (!this._isUTC && keepLocalTime) {\n                localAdjust = getDateOffset(this);\n            }\n            this._offset = input;\n            this._isUTC = true;\n            if (localAdjust != null) {\n                this.add(localAdjust, 'm');\n            }\n            if (offset !== input) {\n                if (!keepLocalTime || this._changeInProgress) {\n                    add_subtract__addSubtract(this, create__createDuration(input - offset, 'm'), 1, false);\n                } else if (!this._changeInProgress) {\n                    this._changeInProgress = true;\n                    utils_hooks__hooks.updateOffset(this, true);\n                    this._changeInProgress = null;\n                }\n            }\n            return this;\n        } else {\n            return this._isUTC ? offset : getDateOffset(this);\n        }\n    }\n\n    function getSetZone (input, keepLocalTime) {\n        if (input != null) {\n            if (typeof input !== 'string') {\n                input = -input;\n            }\n\n            this.utcOffset(input, keepLocalTime);\n\n            return this;\n        } else {\n            return -this.utcOffset();\n        }\n    }\n\n    function setOffsetToUTC (keepLocalTime) {\n        return this.utcOffset(0, keepLocalTime);\n    }\n\n    function setOffsetToLocal (keepLocalTime) {\n        if (this._isUTC) {\n            this.utcOffset(0, keepLocalTime);\n            this._isUTC = false;\n\n            if (keepLocalTime) {\n                this.subtract(getDateOffset(this), 'm');\n            }\n        }\n        return this;\n    }\n\n    function setOffsetToParsedOffset () {\n        if (this._tzm) {\n            this.utcOffset(this._tzm);\n        } else if (typeof this._i === 'string') {\n            this.utcOffset(offsetFromString(matchOffset, this._i));\n        }\n        return this;\n    }\n\n    function hasAlignedHourOffset (input) {\n        if (!this.isValid()) {\n            return false;\n        }\n        input = input ? local__createLocal(input).utcOffset() : 0;\n\n        return (this.utcOffset() - input) % 60 === 0;\n    }\n\n    function isDaylightSavingTime () {\n        return (\n            this.utcOffset() > this.clone().month(0).utcOffset() ||\n            this.utcOffset() > this.clone().month(5).utcOffset()\n        );\n    }\n\n    function isDaylightSavingTimeShifted () {\n        if (!isUndefined(this._isDSTShifted)) {\n            return this._isDSTShifted;\n        }\n\n        var c = {};\n\n        copyConfig(c, this);\n        c = prepareConfig(c);\n\n        if (c._a) {\n            var other = c._isUTC ? create_utc__createUTC(c._a) : local__createLocal(c._a);\n            this._isDSTShifted = this.isValid() &&\n                compareArrays(c._a, other.toArray()) > 0;\n        } else {\n            this._isDSTShifted = false;\n        }\n\n        return this._isDSTShifted;\n    }\n\n    function isLocal () {\n        return this.isValid() ? !this._isUTC : false;\n    }\n\n    function isUtcOffset () {\n        return this.isValid() ? this._isUTC : false;\n    }\n\n    function isUtc () {\n        return this.isValid() ? this._isUTC && this._offset === 0 : false;\n    }\n\n    // ASP.NET json date format regex\n    var aspNetRegex = /^(\\-)?(?:(\\d*)[. ])?(\\d+)\\:(\\d+)(?:\\:(\\d+)\\.?(\\d{3})?\\d*)?$/;\n\n    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html\n    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere\n    // and further modified to allow for strings containing both week and day\n    var isoRegex = /^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$/;\n\n    function create__createDuration (input, key) {\n        var duration = input,\n            // matching against regexp is expensive, do it on demand\n            match = null,\n            sign,\n            ret,\n            diffRes;\n\n        if (isDuration(input)) {\n            duration = {\n                ms : input._milliseconds,\n                d  : input._days,\n                M  : input._months\n            };\n        } else if (typeof input === 'number') {\n            duration = {};\n            if (key) {\n                duration[key] = input;\n            } else {\n                duration.milliseconds = input;\n            }\n        } else if (!!(match = aspNetRegex.exec(input))) {\n            sign = (match[1] === '-') ? -1 : 1;\n            duration = {\n                y  : 0,\n                d  : toInt(match[DATE])        * sign,\n                h  : toInt(match[HOUR])        * sign,\n                m  : toInt(match[MINUTE])      * sign,\n                s  : toInt(match[SECOND])      * sign,\n                ms : toInt(match[MILLISECOND]) * sign\n            };\n        } else if (!!(match = isoRegex.exec(input))) {\n            sign = (match[1] === '-') ? -1 : 1;\n            duration = {\n                y : parseIso(match[2], sign),\n                M : parseIso(match[3], sign),\n                w : parseIso(match[4], sign),\n                d : parseIso(match[5], sign),\n                h : parseIso(match[6], sign),\n                m : parseIso(match[7], sign),\n                s : parseIso(match[8], sign)\n            };\n        } else if (duration == null) {// checks for null or undefined\n            duration = {};\n        } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {\n            diffRes = momentsDifference(local__createLocal(duration.from), local__createLocal(duration.to));\n\n            duration = {};\n            duration.ms = diffRes.milliseconds;\n            duration.M = diffRes.months;\n        }\n\n        ret = new Duration(duration);\n\n        if (isDuration(input) && hasOwnProp(input, '_locale')) {\n            ret._locale = input._locale;\n        }\n\n        return ret;\n    }\n\n    create__createDuration.fn = Duration.prototype;\n\n    function parseIso (inp, sign) {\n        // We'd normally use ~~inp for this, but unfortunately it also\n        // converts floats to ints.\n        // inp may be undefined, so careful calling replace on it.\n        var res = inp && parseFloat(inp.replace(',', '.'));\n        // apply sign while we're at it\n        return (isNaN(res) ? 0 : res) * sign;\n    }\n\n    function positiveMomentsDifference(base, other) {\n        var res = {milliseconds: 0, months: 0};\n\n        res.months = other.month() - base.month() +\n            (other.year() - base.year()) * 12;\n        if (base.clone().add(res.months, 'M').isAfter(other)) {\n            --res.months;\n        }\n\n        res.milliseconds = +other - +(base.clone().add(res.months, 'M'));\n\n        return res;\n    }\n\n    function momentsDifference(base, other) {\n        var res;\n        if (!(base.isValid() && other.isValid())) {\n            return {milliseconds: 0, months: 0};\n        }\n\n        other = cloneWithOffset(other, base);\n        if (base.isBefore(other)) {\n            res = positiveMomentsDifference(base, other);\n        } else {\n            res = positiveMomentsDifference(other, base);\n            res.milliseconds = -res.milliseconds;\n            res.months = -res.months;\n        }\n\n        return res;\n    }\n\n    function absRound (number) {\n        if (number < 0) {\n            return Math.round(-1 * number) * -1;\n        } else {\n            return Math.round(number);\n        }\n    }\n\n    // TODO: remove 'name' arg after deprecation is removed\n    function createAdder(direction, name) {\n        return function (val, period) {\n            var dur, tmp;\n            //invert the arguments, but complain about it\n            if (period !== null && !isNaN(+period)) {\n                deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +\n                'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');\n                tmp = val; val = period; period = tmp;\n            }\n\n            val = typeof val === 'string' ? +val : val;\n            dur = create__createDuration(val, period);\n            add_subtract__addSubtract(this, dur, direction);\n            return this;\n        };\n    }\n\n    function add_subtract__addSubtract (mom, duration, isAdding, updateOffset) {\n        var milliseconds = duration._milliseconds,\n            days = absRound(duration._days),\n            months = absRound(duration._months);\n\n        if (!mom.isValid()) {\n            // No op\n            return;\n        }\n\n        updateOffset = updateOffset == null ? true : updateOffset;\n\n        if (milliseconds) {\n            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);\n        }\n        if (days) {\n            get_set__set(mom, 'Date', get_set__get(mom, 'Date') + days * isAdding);\n        }\n        if (months) {\n            setMonth(mom, get_set__get(mom, 'Month') + months * isAdding);\n        }\n        if (updateOffset) {\n            utils_hooks__hooks.updateOffset(mom, days || months);\n        }\n    }\n\n    var add_subtract__add      = createAdder(1, 'add');\n    var add_subtract__subtract = createAdder(-1, 'subtract');\n\n    function getCalendarFormat(myMoment, now) {\n        var diff = myMoment.diff(now, 'days', true);\n        return diff < -6 ? 'sameElse' :\n                diff < -1 ? 'lastWeek' :\n                diff < 0 ? 'lastDay' :\n                diff < 1 ? 'sameDay' :\n                diff < 2 ? 'nextDay' :\n                diff < 7 ? 'nextWeek' : 'sameElse';\n    }\n\n    function moment_calendar__calendar (time, formats) {\n        // We want to compare the start of today, vs this.\n        // Getting start-of-today depends on whether we're local/utc/offset or not.\n        var now = time || local__createLocal(),\n            sod = cloneWithOffset(now, this).startOf('day'),\n            format = utils_hooks__hooks.calendarFormat(this, sod) || 'sameElse';\n\n        var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);\n\n        return this.format(output || this.localeData().calendar(format, this, local__createLocal(now)));\n    }\n\n    function clone () {\n        return new Moment(this);\n    }\n\n    function isAfter (input, units) {\n        var localInput = isMoment(input) ? input : local__createLocal(input);\n        if (!(this.isValid() && localInput.isValid())) {\n            return false;\n        }\n        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');\n        if (units === 'millisecond') {\n            return this.valueOf() > localInput.valueOf();\n        } else {\n            return localInput.valueOf() < this.clone().startOf(units).valueOf();\n        }\n    }\n\n    function isBefore (input, units) {\n        var localInput = isMoment(input) ? input : local__createLocal(input);\n        if (!(this.isValid() && localInput.isValid())) {\n            return false;\n        }\n        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');\n        if (units === 'millisecond') {\n            return this.valueOf() < localInput.valueOf();\n        } else {\n            return this.clone().endOf(units).valueOf() < localInput.valueOf();\n        }\n    }\n\n    function isBetween (from, to, units, inclusivity) {\n        inclusivity = inclusivity || '()';\n        return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) &&\n            (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units));\n    }\n\n    function isSame (input, units) {\n        var localInput = isMoment(input) ? input : local__createLocal(input),\n            inputMs;\n        if (!(this.isValid() && localInput.isValid())) {\n            return false;\n        }\n        units = normalizeUnits(units || 'millisecond');\n        if (units === 'millisecond') {\n            return this.valueOf() === localInput.valueOf();\n        } else {\n            inputMs = localInput.valueOf();\n            return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();\n        }\n    }\n\n    function isSameOrAfter (input, units) {\n        return this.isSame(input, units) || this.isAfter(input,units);\n    }\n\n    function isSameOrBefore (input, units) {\n        return this.isSame(input, units) || this.isBefore(input,units);\n    }\n\n    function diff (input, units, asFloat) {\n        var that,\n            zoneDelta,\n            delta, output;\n\n        if (!this.isValid()) {\n            return NaN;\n        }\n\n        that = cloneWithOffset(input, this);\n\n        if (!that.isValid()) {\n            return NaN;\n        }\n\n        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;\n\n        units = normalizeUnits(units);\n\n        if (units === 'year' || units === 'month' || units === 'quarter') {\n            output = monthDiff(this, that);\n            if (units === 'quarter') {\n                output = output / 3;\n            } else if (units === 'year') {\n                output = output / 12;\n            }\n        } else {\n            delta = this - that;\n            output = units === 'second' ? delta / 1e3 : // 1000\n                units === 'minute' ? delta / 6e4 : // 1000 * 60\n                units === 'hour' ? delta / 36e5 : // 1000 * 60 * 60\n                units === 'day' ? (delta - zoneDelta) / 864e5 : // 1000 * 60 * 60 * 24, negate dst\n                units === 'week' ? (delta - zoneDelta) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst\n                delta;\n        }\n        return asFloat ? output : absFloor(output);\n    }\n\n    function monthDiff (a, b) {\n        // difference in months\n        var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),\n            // b is in (anchor - 1 month, anchor + 1 month)\n            anchor = a.clone().add(wholeMonthDiff, 'months'),\n            anchor2, adjust;\n\n        if (b - anchor < 0) {\n            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');\n            // linear across the month\n            adjust = (b - anchor) / (anchor - anchor2);\n        } else {\n            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');\n            // linear across the month\n            adjust = (b - anchor) / (anchor2 - anchor);\n        }\n\n        //check for negative zero, return zero if negative zero\n        return -(wholeMonthDiff + adjust) || 0;\n    }\n\n    utils_hooks__hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';\n    utils_hooks__hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';\n\n    function toString () {\n        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');\n    }\n\n    function moment_format__toISOString () {\n        var m = this.clone().utc();\n        if (0 < m.year() && m.year() <= 9999) {\n            if (isFunction(Date.prototype.toISOString)) {\n                // native implementation is ~50x faster, use it when we can\n                return this.toDate().toISOString();\n            } else {\n                return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');\n            }\n        } else {\n            return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');\n        }\n    }\n\n    function format (inputString) {\n        if (!inputString) {\n            inputString = this.isUtc() ? utils_hooks__hooks.defaultFormatUtc : utils_hooks__hooks.defaultFormat;\n        }\n        var output = formatMoment(this, inputString);\n        return this.localeData().postformat(output);\n    }\n\n    function from (time, withoutSuffix) {\n        if (this.isValid() &&\n                ((isMoment(time) && time.isValid()) ||\n                 local__createLocal(time).isValid())) {\n            return create__createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);\n        } else {\n            return this.localeData().invalidDate();\n        }\n    }\n\n    function fromNow (withoutSuffix) {\n        return this.from(local__createLocal(), withoutSuffix);\n    }\n\n    function to (time, withoutSuffix) {\n        if (this.isValid() &&\n                ((isMoment(time) && time.isValid()) ||\n                 local__createLocal(time).isValid())) {\n            return create__createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);\n        } else {\n            return this.localeData().invalidDate();\n        }\n    }\n\n    function toNow (withoutSuffix) {\n        return this.to(local__createLocal(), withoutSuffix);\n    }\n\n    // If passed a locale key, it will set the locale for this\n    // instance.  Otherwise, it will return the locale configuration\n    // variables for this instance.\n    function locale (key) {\n        var newLocaleData;\n\n        if (key === undefined) {\n            return this._locale._abbr;\n        } else {\n            newLocaleData = locale_locales__getLocale(key);\n            if (newLocaleData != null) {\n                this._locale = newLocaleData;\n            }\n            return this;\n        }\n    }\n\n    var lang = deprecate(\n        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',\n        function (key) {\n            if (key === undefined) {\n                return this.localeData();\n            } else {\n                return this.locale(key);\n            }\n        }\n    );\n\n    function localeData () {\n        return this._locale;\n    }\n\n    function startOf (units) {\n        units = normalizeUnits(units);\n        // the following switch intentionally omits break keywords\n        // to utilize falling through the cases.\n        switch (units) {\n            case 'year':\n                this.month(0);\n                /* falls through */\n            case 'quarter':\n            case 'month':\n                this.date(1);\n                /* falls through */\n            case 'week':\n            case 'isoWeek':\n            case 'day':\n            case 'date':\n                this.hours(0);\n                /* falls through */\n            case 'hour':\n                this.minutes(0);\n                /* falls through */\n            case 'minute':\n                this.seconds(0);\n                /* falls through */\n            case 'second':\n                this.milliseconds(0);\n        }\n\n        // weeks are a special case\n        if (units === 'week') {\n            this.weekday(0);\n        }\n        if (units === 'isoWeek') {\n            this.isoWeekday(1);\n        }\n\n        // quarters are also special\n        if (units === 'quarter') {\n            this.month(Math.floor(this.month() / 3) * 3);\n        }\n\n        return this;\n    }\n\n    function endOf (units) {\n        units = normalizeUnits(units);\n        if (units === undefined || units === 'millisecond') {\n            return this;\n        }\n\n        // 'date' is an alias for 'day', so it should be considered as such.\n        if (units === 'date') {\n            units = 'day';\n        }\n\n        return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');\n    }\n\n    function to_type__valueOf () {\n        return this._d.valueOf() - ((this._offset || 0) * 60000);\n    }\n\n    function unix () {\n        return Math.floor(this.valueOf() / 1000);\n    }\n\n    function toDate () {\n        return new Date(this.valueOf());\n    }\n\n    function toArray () {\n        var m = this;\n        return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];\n    }\n\n    function toObject () {\n        var m = this;\n        return {\n            years: m.year(),\n            months: m.month(),\n            date: m.date(),\n            hours: m.hours(),\n            minutes: m.minutes(),\n            seconds: m.seconds(),\n            milliseconds: m.milliseconds()\n        };\n    }\n\n    function toJSON () {\n        // new Date(NaN).toJSON() === null\n        return this.isValid() ? this.toISOString() : null;\n    }\n\n    function moment_valid__isValid () {\n        return valid__isValid(this);\n    }\n\n    function parsingFlags () {\n        return extend({}, getParsingFlags(this));\n    }\n\n    function invalidAt () {\n        return getParsingFlags(this).overflow;\n    }\n\n    function creationData() {\n        return {\n            input: this._i,\n            format: this._f,\n            locale: this._locale,\n            isUTC: this._isUTC,\n            strict: this._strict\n        };\n    }\n\n    // FORMATTING\n\n    addFormatToken(0, ['gg', 2], 0, function () {\n        return this.weekYear() % 100;\n    });\n\n    addFormatToken(0, ['GG', 2], 0, function () {\n        return this.isoWeekYear() % 100;\n    });\n\n    function addWeekYearFormatToken (token, getter) {\n        addFormatToken(0, [token, token.length], 0, getter);\n    }\n\n    addWeekYearFormatToken('gggg',     'weekYear');\n    addWeekYearFormatToken('ggggg',    'weekYear');\n    addWeekYearFormatToken('GGGG',  'isoWeekYear');\n    addWeekYearFormatToken('GGGGG', 'isoWeekYear');\n\n    // ALIASES\n\n    addUnitAlias('weekYear', 'gg');\n    addUnitAlias('isoWeekYear', 'GG');\n\n    // PRIORITY\n\n    addUnitPriority('weekYear', 1);\n    addUnitPriority('isoWeekYear', 1);\n\n\n    // PARSING\n\n    addRegexToken('G',      matchSigned);\n    addRegexToken('g',      matchSigned);\n    addRegexToken('GG',     match1to2, match2);\n    addRegexToken('gg',     match1to2, match2);\n    addRegexToken('GGGG',   match1to4, match4);\n    addRegexToken('gggg',   match1to4, match4);\n    addRegexToken('GGGGG',  match1to6, match6);\n    addRegexToken('ggggg',  match1to6, match6);\n\n    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {\n        week[token.substr(0, 2)] = toInt(input);\n    });\n\n    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {\n        week[token] = utils_hooks__hooks.parseTwoDigitYear(input);\n    });\n\n    // MOMENTS\n\n    function getSetWeekYear (input) {\n        return getSetWeekYearHelper.call(this,\n                input,\n                this.week(),\n                this.weekday(),\n                this.localeData()._week.dow,\n                this.localeData()._week.doy);\n    }\n\n    function getSetISOWeekYear (input) {\n        return getSetWeekYearHelper.call(this,\n                input, this.isoWeek(), this.isoWeekday(), 1, 4);\n    }\n\n    function getISOWeeksInYear () {\n        return weeksInYear(this.year(), 1, 4);\n    }\n\n    function getWeeksInYear () {\n        var weekInfo = this.localeData()._week;\n        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);\n    }\n\n    function getSetWeekYearHelper(input, week, weekday, dow, doy) {\n        var weeksTarget;\n        if (input == null) {\n            return weekOfYear(this, dow, doy).year;\n        } else {\n            weeksTarget = weeksInYear(input, dow, doy);\n            if (week > weeksTarget) {\n                week = weeksTarget;\n            }\n            return setWeekAll.call(this, input, week, weekday, dow, doy);\n        }\n    }\n\n    function setWeekAll(weekYear, week, weekday, dow, doy) {\n        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),\n            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);\n\n        this.year(date.getUTCFullYear());\n        this.month(date.getUTCMonth());\n        this.date(date.getUTCDate());\n        return this;\n    }\n\n    // FORMATTING\n\n    addFormatToken('Q', 0, 'Qo', 'quarter');\n\n    // ALIASES\n\n    addUnitAlias('quarter', 'Q');\n\n    // PRIORITY\n\n    addUnitPriority('quarter', 7);\n\n    // PARSING\n\n    addRegexToken('Q', match1);\n    addParseToken('Q', function (input, array) {\n        array[MONTH] = (toInt(input) - 1) * 3;\n    });\n\n    // MOMENTS\n\n    function getSetQuarter (input) {\n        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);\n    }\n\n    // FORMATTING\n\n    addFormatToken('D', ['DD', 2], 'Do', 'date');\n\n    // ALIASES\n\n    addUnitAlias('date', 'D');\n\n    // PRIOROITY\n    addUnitPriority('date', 9);\n\n    // PARSING\n\n    addRegexToken('D',  match1to2);\n    addRegexToken('DD', match1to2, match2);\n    addRegexToken('Do', function (isStrict, locale) {\n        return isStrict ? locale._ordinalParse : locale._ordinalParseLenient;\n    });\n\n    addParseToken(['D', 'DD'], DATE);\n    addParseToken('Do', function (input, array) {\n        array[DATE] = toInt(input.match(match1to2)[0], 10);\n    });\n\n    // MOMENTS\n\n    var getSetDayOfMonth = makeGetSet('Date', true);\n\n    // FORMATTING\n\n    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');\n\n    // ALIASES\n\n    addUnitAlias('dayOfYear', 'DDD');\n\n    // PRIORITY\n    addUnitPriority('dayOfYear', 4);\n\n    // PARSING\n\n    addRegexToken('DDD',  match1to3);\n    addRegexToken('DDDD', match3);\n    addParseToken(['DDD', 'DDDD'], function (input, array, config) {\n        config._dayOfYear = toInt(input);\n    });\n\n    // HELPERS\n\n    // MOMENTS\n\n    function getSetDayOfYear (input) {\n        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;\n        return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');\n    }\n\n    // FORMATTING\n\n    addFormatToken('m', ['mm', 2], 0, 'minute');\n\n    // ALIASES\n\n    addUnitAlias('minute', 'm');\n\n    // PRIORITY\n\n    addUnitPriority('minute', 14);\n\n    // PARSING\n\n    addRegexToken('m',  match1to2);\n    addRegexToken('mm', match1to2, match2);\n    addParseToken(['m', 'mm'], MINUTE);\n\n    // MOMENTS\n\n    var getSetMinute = makeGetSet('Minutes', false);\n\n    // FORMATTING\n\n    addFormatToken('s', ['ss', 2], 0, 'second');\n\n    // ALIASES\n\n    addUnitAlias('second', 's');\n\n    // PRIORITY\n\n    addUnitPriority('second', 15);\n\n    // PARSING\n\n    addRegexToken('s',  match1to2);\n    addRegexToken('ss', match1to2, match2);\n    addParseToken(['s', 'ss'], SECOND);\n\n    // MOMENTS\n\n    var getSetSecond = makeGetSet('Seconds', false);\n\n    // FORMATTING\n\n    addFormatToken('S', 0, 0, function () {\n        return ~~(this.millisecond() / 100);\n    });\n\n    addFormatToken(0, ['SS', 2], 0, function () {\n        return ~~(this.millisecond() / 10);\n    });\n\n    addFormatToken(0, ['SSS', 3], 0, 'millisecond');\n    addFormatToken(0, ['SSSS', 4], 0, function () {\n        return this.millisecond() * 10;\n    });\n    addFormatToken(0, ['SSSSS', 5], 0, function () {\n        return this.millisecond() * 100;\n    });\n    addFormatToken(0, ['SSSSSS', 6], 0, function () {\n        return this.millisecond() * 1000;\n    });\n    addFormatToken(0, ['SSSSSSS', 7], 0, function () {\n        return this.millisecond() * 10000;\n    });\n    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {\n        return this.millisecond() * 100000;\n    });\n    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {\n        return this.millisecond() * 1000000;\n    });\n\n\n    // ALIASES\n\n    addUnitAlias('millisecond', 'ms');\n\n    // PRIORITY\n\n    addUnitPriority('millisecond', 16);\n\n    // PARSING\n\n    addRegexToken('S',    match1to3, match1);\n    addRegexToken('SS',   match1to3, match2);\n    addRegexToken('SSS',  match1to3, match3);\n\n    var token;\n    for (token = 'SSSS'; token.length <= 9; token += 'S') {\n        addRegexToken(token, matchUnsigned);\n    }\n\n    function parseMs(input, array) {\n        array[MILLISECOND] = toInt(('0.' + input) * 1000);\n    }\n\n    for (token = 'S'; token.length <= 9; token += 'S') {\n        addParseToken(token, parseMs);\n    }\n    // MOMENTS\n\n    var getSetMillisecond = makeGetSet('Milliseconds', false);\n\n    // FORMATTING\n\n    addFormatToken('z',  0, 0, 'zoneAbbr');\n    addFormatToken('zz', 0, 0, 'zoneName');\n\n    // MOMENTS\n\n    function getZoneAbbr () {\n        return this._isUTC ? 'UTC' : '';\n    }\n\n    function getZoneName () {\n        return this._isUTC ? 'Coordinated Universal Time' : '';\n    }\n\n    var momentPrototype__proto = Moment.prototype;\n\n    momentPrototype__proto.add               = add_subtract__add;\n    momentPrototype__proto.calendar          = moment_calendar__calendar;\n    momentPrototype__proto.clone             = clone;\n    momentPrototype__proto.diff              = diff;\n    momentPrototype__proto.endOf             = endOf;\n    momentPrototype__proto.format            = format;\n    momentPrototype__proto.from              = from;\n    momentPrototype__proto.fromNow           = fromNow;\n    momentPrototype__proto.to                = to;\n    momentPrototype__proto.toNow             = toNow;\n    momentPrototype__proto.get               = stringGet;\n    momentPrototype__proto.invalidAt         = invalidAt;\n    momentPrototype__proto.isAfter           = isAfter;\n    momentPrototype__proto.isBefore          = isBefore;\n    momentPrototype__proto.isBetween         = isBetween;\n    momentPrototype__proto.isSame            = isSame;\n    momentPrototype__proto.isSameOrAfter     = isSameOrAfter;\n    momentPrototype__proto.isSameOrBefore    = isSameOrBefore;\n    momentPrototype__proto.isValid           = moment_valid__isValid;\n    momentPrototype__proto.lang              = lang;\n    momentPrototype__proto.locale            = locale;\n    momentPrototype__proto.localeData        = localeData;\n    momentPrototype__proto.max               = prototypeMax;\n    momentPrototype__proto.min               = prototypeMin;\n    momentPrototype__proto.parsingFlags      = parsingFlags;\n    momentPrototype__proto.set               = stringSet;\n    momentPrototype__proto.startOf           = startOf;\n    momentPrototype__proto.subtract          = add_subtract__subtract;\n    momentPrototype__proto.toArray           = toArray;\n    momentPrototype__proto.toObject          = toObject;\n    momentPrototype__proto.toDate            = toDate;\n    momentPrototype__proto.toISOString       = moment_format__toISOString;\n    momentPrototype__proto.toJSON            = toJSON;\n    momentPrototype__proto.toString          = toString;\n    momentPrototype__proto.unix              = unix;\n    momentPrototype__proto.valueOf           = to_type__valueOf;\n    momentPrototype__proto.creationData      = creationData;\n\n    // Year\n    momentPrototype__proto.year       = getSetYear;\n    momentPrototype__proto.isLeapYear = getIsLeapYear;\n\n    // Week Year\n    momentPrototype__proto.weekYear    = getSetWeekYear;\n    momentPrototype__proto.isoWeekYear = getSetISOWeekYear;\n\n    // Quarter\n    momentPrototype__proto.quarter = momentPrototype__proto.quarters = getSetQuarter;\n\n    // Month\n    momentPrototype__proto.month       = getSetMonth;\n    momentPrototype__proto.daysInMonth = getDaysInMonth;\n\n    // Week\n    momentPrototype__proto.week           = momentPrototype__proto.weeks        = getSetWeek;\n    momentPrototype__proto.isoWeek        = momentPrototype__proto.isoWeeks     = getSetISOWeek;\n    momentPrototype__proto.weeksInYear    = getWeeksInYear;\n    momentPrototype__proto.isoWeeksInYear = getISOWeeksInYear;\n\n    // Day\n    momentPrototype__proto.date       = getSetDayOfMonth;\n    momentPrototype__proto.day        = momentPrototype__proto.days             = getSetDayOfWeek;\n    momentPrototype__proto.weekday    = getSetLocaleDayOfWeek;\n    momentPrototype__proto.isoWeekday = getSetISODayOfWeek;\n    momentPrototype__proto.dayOfYear  = getSetDayOfYear;\n\n    // Hour\n    momentPrototype__proto.hour = momentPrototype__proto.hours = getSetHour;\n\n    // Minute\n    momentPrototype__proto.minute = momentPrototype__proto.minutes = getSetMinute;\n\n    // Second\n    momentPrototype__proto.second = momentPrototype__proto.seconds = getSetSecond;\n\n    // Millisecond\n    momentPrototype__proto.millisecond = momentPrototype__proto.milliseconds = getSetMillisecond;\n\n    // Offset\n    momentPrototype__proto.utcOffset            = getSetOffset;\n    momentPrototype__proto.utc                  = setOffsetToUTC;\n    momentPrototype__proto.local                = setOffsetToLocal;\n    momentPrototype__proto.parseZone            = setOffsetToParsedOffset;\n    momentPrototype__proto.hasAlignedHourOffset = hasAlignedHourOffset;\n    momentPrototype__proto.isDST                = isDaylightSavingTime;\n    momentPrototype__proto.isLocal              = isLocal;\n    momentPrototype__proto.isUtcOffset          = isUtcOffset;\n    momentPrototype__proto.isUtc                = isUtc;\n    momentPrototype__proto.isUTC                = isUtc;\n\n    // Timezone\n    momentPrototype__proto.zoneAbbr = getZoneAbbr;\n    momentPrototype__proto.zoneName = getZoneName;\n\n    // Deprecations\n    momentPrototype__proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);\n    momentPrototype__proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);\n    momentPrototype__proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);\n    momentPrototype__proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);\n    momentPrototype__proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);\n\n    var momentPrototype = momentPrototype__proto;\n\n    function moment__createUnix (input) {\n        return local__createLocal(input * 1000);\n    }\n\n    function moment__createInZone () {\n        return local__createLocal.apply(null, arguments).parseZone();\n    }\n\n    function preParsePostFormat (string) {\n        return string;\n    }\n\n    var prototype__proto = Locale.prototype;\n\n    prototype__proto.calendar        = locale_calendar__calendar;\n    prototype__proto.longDateFormat  = longDateFormat;\n    prototype__proto.invalidDate     = invalidDate;\n    prototype__proto.ordinal         = ordinal;\n    prototype__proto.preparse        = preParsePostFormat;\n    prototype__proto.postformat      = preParsePostFormat;\n    prototype__proto.relativeTime    = relative__relativeTime;\n    prototype__proto.pastFuture      = pastFuture;\n    prototype__proto.set             = locale_set__set;\n\n    // Month\n    prototype__proto.months            =        localeMonths;\n    prototype__proto.monthsShort       =        localeMonthsShort;\n    prototype__proto.monthsParse       =        localeMonthsParse;\n    prototype__proto.monthsRegex       = monthsRegex;\n    prototype__proto.monthsShortRegex  = monthsShortRegex;\n\n    // Week\n    prototype__proto.week = localeWeek;\n    prototype__proto.firstDayOfYear = localeFirstDayOfYear;\n    prototype__proto.firstDayOfWeek = localeFirstDayOfWeek;\n\n    // Day of Week\n    prototype__proto.weekdays       =        localeWeekdays;\n    prototype__proto.weekdaysMin    =        localeWeekdaysMin;\n    prototype__proto.weekdaysShort  =        localeWeekdaysShort;\n    prototype__proto.weekdaysParse  =        localeWeekdaysParse;\n\n    prototype__proto.weekdaysRegex       =        weekdaysRegex;\n    prototype__proto.weekdaysShortRegex  =        weekdaysShortRegex;\n    prototype__proto.weekdaysMinRegex    =        weekdaysMinRegex;\n\n    // Hours\n    prototype__proto.isPM = localeIsPM;\n    prototype__proto.meridiem = localeMeridiem;\n\n    function lists__get (format, index, field, setter) {\n        var locale = locale_locales__getLocale();\n        var utc = create_utc__createUTC().set(setter, index);\n        return locale[field](utc, format);\n    }\n\n    function listMonthsImpl (format, index, field) {\n        if (typeof format === 'number') {\n            index = format;\n            format = undefined;\n        }\n\n        format = format || '';\n\n        if (index != null) {\n            return lists__get(format, index, field, 'month');\n        }\n\n        var i;\n        var out = [];\n        for (i = 0; i < 12; i++) {\n            out[i] = lists__get(format, i, field, 'month');\n        }\n        return out;\n    }\n\n    // ()\n    // (5)\n    // (fmt, 5)\n    // (fmt)\n    // (true)\n    // (true, 5)\n    // (true, fmt, 5)\n    // (true, fmt)\n    function listWeekdaysImpl (localeSorted, format, index, field) {\n        if (typeof localeSorted === 'boolean') {\n            if (typeof format === 'number') {\n                index = format;\n                format = undefined;\n            }\n\n            format = format || '';\n        } else {\n            format = localeSorted;\n            index = format;\n            localeSorted = false;\n\n            if (typeof format === 'number') {\n                index = format;\n                format = undefined;\n            }\n\n            format = format || '';\n        }\n\n        var locale = locale_locales__getLocale(),\n            shift = localeSorted ? locale._week.dow : 0;\n\n        if (index != null) {\n            return lists__get(format, (index + shift) % 7, field, 'day');\n        }\n\n        var i;\n        var out = [];\n        for (i = 0; i < 7; i++) {\n            out[i] = lists__get(format, (i + shift) % 7, field, 'day');\n        }\n        return out;\n    }\n\n    function lists__listMonths (format, index) {\n        return listMonthsImpl(format, index, 'months');\n    }\n\n    function lists__listMonthsShort (format, index) {\n        return listMonthsImpl(format, index, 'monthsShort');\n    }\n\n    function lists__listWeekdays (localeSorted, format, index) {\n        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');\n    }\n\n    function lists__listWeekdaysShort (localeSorted, format, index) {\n        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');\n    }\n\n    function lists__listWeekdaysMin (localeSorted, format, index) {\n        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');\n    }\n\n    locale_locales__getSetGlobalLocale('en', {\n        ordinalParse: /\\d{1,2}(th|st|nd|rd)/,\n        ordinal : function (number) {\n            var b = number % 10,\n                output = (toInt(number % 100 / 10) === 1) ? 'th' :\n                (b === 1) ? 'st' :\n                (b === 2) ? 'nd' :\n                (b === 3) ? 'rd' : 'th';\n            return number + output;\n        }\n    });\n\n    // Side effect imports\n    utils_hooks__hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', locale_locales__getSetGlobalLocale);\n    utils_hooks__hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', locale_locales__getLocale);\n\n    var mathAbs = Math.abs;\n\n    function duration_abs__abs () {\n        var data           = this._data;\n\n        this._milliseconds = mathAbs(this._milliseconds);\n        this._days         = mathAbs(this._days);\n        this._months       = mathAbs(this._months);\n\n        data.milliseconds  = mathAbs(data.milliseconds);\n        data.seconds       = mathAbs(data.seconds);\n        data.minutes       = mathAbs(data.minutes);\n        data.hours         = mathAbs(data.hours);\n        data.months        = mathAbs(data.months);\n        data.years         = mathAbs(data.years);\n\n        return this;\n    }\n\n    function duration_add_subtract__addSubtract (duration, input, value, direction) {\n        var other = create__createDuration(input, value);\n\n        duration._milliseconds += direction * other._milliseconds;\n        duration._days         += direction * other._days;\n        duration._months       += direction * other._months;\n\n        return duration._bubble();\n    }\n\n    // supports only 2.0-style add(1, 's') or add(duration)\n    function duration_add_subtract__add (input, value) {\n        return duration_add_subtract__addSubtract(this, input, value, 1);\n    }\n\n    // supports only 2.0-style subtract(1, 's') or subtract(duration)\n    function duration_add_subtract__subtract (input, value) {\n        return duration_add_subtract__addSubtract(this, input, value, -1);\n    }\n\n    function absCeil (number) {\n        if (number < 0) {\n            return Math.floor(number);\n        } else {\n            return Math.ceil(number);\n        }\n    }\n\n    function bubble () {\n        var milliseconds = this._milliseconds;\n        var days         = this._days;\n        var months       = this._months;\n        var data         = this._data;\n        var seconds, minutes, hours, years, monthsFromDays;\n\n        // if we have a mix of positive and negative values, bubble down first\n        // check: https://github.com/moment/moment/issues/2166\n        if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||\n                (milliseconds <= 0 && days <= 0 && months <= 0))) {\n            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;\n            days = 0;\n            months = 0;\n        }\n\n        // The following code bubbles up values, see the tests for\n        // examples of what that means.\n        data.milliseconds = milliseconds % 1000;\n\n        seconds           = absFloor(milliseconds / 1000);\n        data.seconds      = seconds % 60;\n\n        minutes           = absFloor(seconds / 60);\n        data.minutes      = minutes % 60;\n\n        hours             = absFloor(minutes / 60);\n        data.hours        = hours % 24;\n\n        days += absFloor(hours / 24);\n\n        // convert days to months\n        monthsFromDays = absFloor(daysToMonths(days));\n        months += monthsFromDays;\n        days -= absCeil(monthsToDays(monthsFromDays));\n\n        // 12 months -> 1 year\n        years = absFloor(months / 12);\n        months %= 12;\n\n        data.days   = days;\n        data.months = months;\n        data.years  = years;\n\n        return this;\n    }\n\n    function daysToMonths (days) {\n        // 400 years have 146097 days (taking into account leap year rules)\n        // 400 years have 12 months === 4800\n        return days * 4800 / 146097;\n    }\n\n    function monthsToDays (months) {\n        // the reverse of daysToMonths\n        return months * 146097 / 4800;\n    }\n\n    function as (units) {\n        var days;\n        var months;\n        var milliseconds = this._milliseconds;\n\n        units = normalizeUnits(units);\n\n        if (units === 'month' || units === 'year') {\n            days   = this._days   + milliseconds / 864e5;\n            months = this._months + daysToMonths(days);\n            return units === 'month' ? months : months / 12;\n        } else {\n            // handle milliseconds separately because of floating point math errors (issue #1867)\n            days = this._days + Math.round(monthsToDays(this._months));\n            switch (units) {\n                case 'week'   : return days / 7     + milliseconds / 6048e5;\n                case 'day'    : return days         + milliseconds / 864e5;\n                case 'hour'   : return days * 24    + milliseconds / 36e5;\n                case 'minute' : return days * 1440  + milliseconds / 6e4;\n                case 'second' : return days * 86400 + milliseconds / 1000;\n                // Math.floor prevents floating point math errors here\n                case 'millisecond': return Math.floor(days * 864e5) + milliseconds;\n                default: throw new Error('Unknown unit ' + units);\n            }\n        }\n    }\n\n    // TODO: Use this.as('ms')?\n    function duration_as__valueOf () {\n        return (\n            this._milliseconds +\n            this._days * 864e5 +\n            (this._months % 12) * 2592e6 +\n            toInt(this._months / 12) * 31536e6\n        );\n    }\n\n    function makeAs (alias) {\n        return function () {\n            return this.as(alias);\n        };\n    }\n\n    var asMilliseconds = makeAs('ms');\n    var asSeconds      = makeAs('s');\n    var asMinutes      = makeAs('m');\n    var asHours        = makeAs('h');\n    var asDays         = makeAs('d');\n    var asWeeks        = makeAs('w');\n    var asMonths       = makeAs('M');\n    var asYears        = makeAs('y');\n\n    function duration_get__get (units) {\n        units = normalizeUnits(units);\n        return this[units + 's']();\n    }\n\n    function makeGetter(name) {\n        return function () {\n            return this._data[name];\n        };\n    }\n\n    var milliseconds = makeGetter('milliseconds');\n    var seconds      = makeGetter('seconds');\n    var minutes      = makeGetter('minutes');\n    var hours        = makeGetter('hours');\n    var days         = makeGetter('days');\n    var months       = makeGetter('months');\n    var years        = makeGetter('years');\n\n    function weeks () {\n        return absFloor(this.days() / 7);\n    }\n\n    var round = Math.round;\n    var thresholds = {\n        s: 45,  // seconds to minute\n        m: 45,  // minutes to hour\n        h: 22,  // hours to day\n        d: 26,  // days to month\n        M: 11   // months to year\n    };\n\n    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize\n    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {\n        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);\n    }\n\n    function duration_humanize__relativeTime (posNegDuration, withoutSuffix, locale) {\n        var duration = create__createDuration(posNegDuration).abs();\n        var seconds  = round(duration.as('s'));\n        var minutes  = round(duration.as('m'));\n        var hours    = round(duration.as('h'));\n        var days     = round(duration.as('d'));\n        var months   = round(duration.as('M'));\n        var years    = round(duration.as('y'));\n\n        var a = seconds < thresholds.s && ['s', seconds]  ||\n                minutes <= 1           && ['m']           ||\n                minutes < thresholds.m && ['mm', minutes] ||\n                hours   <= 1           && ['h']           ||\n                hours   < thresholds.h && ['hh', hours]   ||\n                days    <= 1           && ['d']           ||\n                days    < thresholds.d && ['dd', days]    ||\n                months  <= 1           && ['M']           ||\n                months  < thresholds.M && ['MM', months]  ||\n                years   <= 1           && ['y']           || ['yy', years];\n\n        a[2] = withoutSuffix;\n        a[3] = +posNegDuration > 0;\n        a[4] = locale;\n        return substituteTimeAgo.apply(null, a);\n    }\n\n    // This function allows you to set the rounding function for relative time strings\n    function duration_humanize__getSetRelativeTimeRounding (roundingFunction) {\n        if (roundingFunction === undefined) {\n            return round;\n        }\n        if (typeof(roundingFunction) === 'function') {\n            round = roundingFunction;\n            return true;\n        }\n        return false;\n    }\n\n    // This function allows you to set a threshold for relative time strings\n    function duration_humanize__getSetRelativeTimeThreshold (threshold, limit) {\n        if (thresholds[threshold] === undefined) {\n            return false;\n        }\n        if (limit === undefined) {\n            return thresholds[threshold];\n        }\n        thresholds[threshold] = limit;\n        return true;\n    }\n\n    function humanize (withSuffix) {\n        var locale = this.localeData();\n        var output = duration_humanize__relativeTime(this, !withSuffix, locale);\n\n        if (withSuffix) {\n            output = locale.pastFuture(+this, output);\n        }\n\n        return locale.postformat(output);\n    }\n\n    var iso_string__abs = Math.abs;\n\n    function iso_string__toISOString() {\n        // for ISO strings we do not use the normal bubbling rules:\n        //  * milliseconds bubble up until they become hours\n        //  * days do not bubble at all\n        //  * months bubble up until they become years\n        // This is because there is no context-free conversion between hours and days\n        // (think of clock changes)\n        // and also not between days and months (28-31 days per month)\n        var seconds = iso_string__abs(this._milliseconds) / 1000;\n        var days         = iso_string__abs(this._days);\n        var months       = iso_string__abs(this._months);\n        var minutes, hours, years;\n\n        // 3600 seconds -> 60 minutes -> 1 hour\n        minutes           = absFloor(seconds / 60);\n        hours             = absFloor(minutes / 60);\n        seconds %= 60;\n        minutes %= 60;\n\n        // 12 months -> 1 year\n        years  = absFloor(months / 12);\n        months %= 12;\n\n\n        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js\n        var Y = years;\n        var M = months;\n        var D = days;\n        var h = hours;\n        var m = minutes;\n        var s = seconds;\n        var total = this.asSeconds();\n\n        if (!total) {\n            // this is the same as C#'s (Noda) and python (isodate)...\n            // but not other JS (goog.date)\n            return 'P0D';\n        }\n\n        return (total < 0 ? '-' : '') +\n            'P' +\n            (Y ? Y + 'Y' : '') +\n            (M ? M + 'M' : '') +\n            (D ? D + 'D' : '') +\n            ((h || m || s) ? 'T' : '') +\n            (h ? h + 'H' : '') +\n            (m ? m + 'M' : '') +\n            (s ? s + 'S' : '');\n    }\n\n    var duration_prototype__proto = Duration.prototype;\n\n    duration_prototype__proto.abs            = duration_abs__abs;\n    duration_prototype__proto.add            = duration_add_subtract__add;\n    duration_prototype__proto.subtract       = duration_add_subtract__subtract;\n    duration_prototype__proto.as             = as;\n    duration_prototype__proto.asMilliseconds = asMilliseconds;\n    duration_prototype__proto.asSeconds      = asSeconds;\n    duration_prototype__proto.asMinutes      = asMinutes;\n    duration_prototype__proto.asHours        = asHours;\n    duration_prototype__proto.asDays         = asDays;\n    duration_prototype__proto.asWeeks        = asWeeks;\n    duration_prototype__proto.asMonths       = asMonths;\n    duration_prototype__proto.asYears        = asYears;\n    duration_prototype__proto.valueOf        = duration_as__valueOf;\n    duration_prototype__proto._bubble        = bubble;\n    duration_prototype__proto.get            = duration_get__get;\n    duration_prototype__proto.milliseconds   = milliseconds;\n    duration_prototype__proto.seconds        = seconds;\n    duration_prototype__proto.minutes        = minutes;\n    duration_prototype__proto.hours          = hours;\n    duration_prototype__proto.days           = days;\n    duration_prototype__proto.weeks          = weeks;\n    duration_prototype__proto.months         = months;\n    duration_prototype__proto.years          = years;\n    duration_prototype__proto.humanize       = humanize;\n    duration_prototype__proto.toISOString    = iso_string__toISOString;\n    duration_prototype__proto.toString       = iso_string__toISOString;\n    duration_prototype__proto.toJSON         = iso_string__toISOString;\n    duration_prototype__proto.locale         = locale;\n    duration_prototype__proto.localeData     = localeData;\n\n    // Deprecations\n    duration_prototype__proto.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', iso_string__toISOString);\n    duration_prototype__proto.lang = lang;\n\n    // Side effect imports\n\n    // FORMATTING\n\n    addFormatToken('X', 0, 0, 'unix');\n    addFormatToken('x', 0, 0, 'valueOf');\n\n    // PARSING\n\n    addRegexToken('x', matchSigned);\n    addRegexToken('X', matchTimestamp);\n    addParseToken('X', function (input, array, config) {\n        config._d = new Date(parseFloat(input, 10) * 1000);\n    });\n    addParseToken('x', function (input, array, config) {\n        config._d = new Date(toInt(input));\n    });\n\n    // Side effect imports\n\n\n    utils_hooks__hooks.version = '2.14.1';\n\n    setHookCallback(local__createLocal);\n\n    utils_hooks__hooks.fn                    = momentPrototype;\n    utils_hooks__hooks.min                   = min;\n    utils_hooks__hooks.max                   = max;\n    utils_hooks__hooks.now                   = now;\n    utils_hooks__hooks.utc                   = create_utc__createUTC;\n    utils_hooks__hooks.unix                  = moment__createUnix;\n    utils_hooks__hooks.months                = lists__listMonths;\n    utils_hooks__hooks.isDate                = isDate;\n    utils_hooks__hooks.locale                = locale_locales__getSetGlobalLocale;\n    utils_hooks__hooks.invalid               = valid__createInvalid;\n    utils_hooks__hooks.duration              = create__createDuration;\n    utils_hooks__hooks.isMoment              = isMoment;\n    utils_hooks__hooks.weekdays              = lists__listWeekdays;\n    utils_hooks__hooks.parseZone             = moment__createInZone;\n    utils_hooks__hooks.localeData            = locale_locales__getLocale;\n    utils_hooks__hooks.isDuration            = isDuration;\n    utils_hooks__hooks.monthsShort           = lists__listMonthsShort;\n    utils_hooks__hooks.weekdaysMin           = lists__listWeekdaysMin;\n    utils_hooks__hooks.defineLocale          = defineLocale;\n    utils_hooks__hooks.updateLocale          = updateLocale;\n    utils_hooks__hooks.locales               = locale_locales__listLocales;\n    utils_hooks__hooks.weekdaysShort         = lists__listWeekdaysShort;\n    utils_hooks__hooks.normalizeUnits        = normalizeUnits;\n    utils_hooks__hooks.relativeTimeRounding = duration_humanize__getSetRelativeTimeRounding;\n    utils_hooks__hooks.relativeTimeThreshold = duration_humanize__getSetRelativeTimeThreshold;\n    utils_hooks__hooks.calendarFormat        = getCalendarFormat;\n    utils_hooks__hooks.prototype             = momentPrototype;\n\n    var _moment = utils_hooks__hooks;\n\n    return _moment;\n\n}));","// moment.js makes `moment` global on the window (or global) object, while Meteor expects a file-scoped global variable\nmoment = this.moment;\ntry {\n    delete this.moment;\n} catch (e) {\n}\n"]}}]