[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nECMAScript = Package.ecmascript.ECMAScript;\nReactMeteorData = Package['react-meteor-data'].ReactMeteorData;\nmoment = Package['momentjs:moment'].moment;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nmain = Package.webapp.main;\nWebAppInternals = Package.webapp.WebAppInternals;\n_ = Package.underscore._;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nmeteorInstall = Package.modules.meteorInstall;\nBuffer = Package.modules.Buffer;\nprocess = Package.modules.process;\nSymbol = Package['ecmascript-runtime'].Symbol;\nMap = Package['ecmascript-runtime'].Map;\nSet = Package['ecmascript-runtime'].Set;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nAccounts = Package['accounts-base'].Accounts;\nAutoupdate = Package.autoupdate.Autoupdate;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/packages/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"imports\":{\"api\":{\"questions.js\":[\"meteor/mongo\",function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////\n//                                                                        //\n// imports/api/questions.js                                               //\n//                                                                        //\n////////////////////////////////////////////////////////////////////////////\n                                                                          //\nmodule.export({Questions:function(){return Questions},QuestionComments:function(){return QuestionComments}});var Mongo;module.import('meteor/mongo',{\"Mongo\":function(v){Mongo=v}});\n                                                                          //\nvar Questions = new Mongo.Collection('questions');                        // 3\nvar QuestionComments = new Mongo.Collection('question_comments');         // 4\n                                                                          //\nQuestions.allow({                                                         // 6\n  update: function update(userId, doc, fieldNames, modifier) {            // 7\n    return false;                                                         // 8\n  },                                                                      // 9\n  insert: function insert(userId, doc) {                                  // 10\n    return false;                                                         // 11\n  },                                                                      // 12\n  remove: function remove(userId, doc) {                                  // 13\n    return false;                                                         // 14\n  }                                                                       // 15\n});                                                                       // 6\n                                                                          //\nMeteor.methods({                                                          // 18\n  \"questions.create\": function questionsCreate(text) {                    // 19\n    if (!this.userId) {                                                   // 20\n      throw new Meteor.Error('not-authorized');                           // 21\n    }                                                                     // 22\n    Questions.insert({                                                    // 23\n      text: text,                                                         // 24\n      userId: this.userId,                                                // 25\n      createdAt: new Date() });                                           // 26\n  },                                                                      // 28\n  // current time                                                         //\n  \"questions.like\": function questionsLike(questionId) {                  // 29\n    Questions.update({ _id: questionId }, {                               // 30\n      $inc: {                                                             // 31\n        likes: 1                                                          // 32\n      }                                                                   // 31\n    });                                                                   // 30\n  },                                                                      // 35\n  \"questions.solve\": function questionsSolve(questionId) {                // 36\n    Questions.update({ _id: questionId }, {                               // 37\n      $set: {                                                             // 38\n        solvedAt: new Date()                                              // 39\n      }                                                                   // 38\n    });                                                                   // 37\n  },                                                                      // 42\n  \"questions.comment\": function questionsComment(questionId, text) {      // 43\n    QuestionComments.insert({                                             // 44\n      questionId: questionId,                                             // 45\n      text: text,                                                         // 46\n      createdAt: new Date() });                                           // 47\n    // current time                                                       //\n    Questions.update({ _id: questionId }, {                               // 49\n      $inc: {                                                             // 50\n        commentsCount: 1                                                  // 51\n      }                                                                   // 50\n    });                                                                   // 49\n    // Questions.update({_id: questionId}, {                              //\n    // });                                                                //\n  }                                                                       // 56\n                                                                          //\n});                                                                       // 18\n                                                                          //\nif (Meteor.isServer) {                                                    // 60\n  Meteor.publishComposite(\"questions\", function () {                      // 61\n    return {                                                              // 62\n      find: function find() {                                             // 63\n        return Questions.find({}, {                                       // 64\n          fields: {                                                       // 65\n            userId: 1,                                                    // 66\n            text: 1,                                                      // 67\n            likes: 1,                                                     // 68\n            commentsCount: 1,                                             // 69\n            solvedAt: 1                                                   // 70\n          }                                                               // 65\n        });                                                               // 64\n      },                                                                  // 73\n      children: [{                                                        // 74\n        find: function find(question) {                                   // 76\n          return Meteor.users.find({ _id: question.userId }, {            // 77\n            fields: {                                                     // 78\n              profile: 1                                                  // 79\n            }                                                             // 78\n          });                                                             // 77\n        }                                                                 // 82\n      }]                                                                  // 75\n    };                                                                    // 62\n  });                                                                     // 86\n  Meteor.publishComposite(\"question\", function (questionId) {             // 87\n    return {                                                              // 88\n      find: function find() {                                             // 89\n        return Questions.find({ _id: questionId }, {});                   // 90\n      },                                                                  // 91\n      children: [{                                                        // 92\n        find: function find(question) {                                   // 94\n          return QuestionComments.find({ questionId: question._id }, {});\n        }                                                                 // 96\n      }]                                                                  // 93\n    };                                                                    // 88\n  });                                                                     // 100\n}                                                                         // 101\n////////////////////////////////////////////////////////////////////////////\n\n}]}},\"server\":{\"main.js\":[\"meteor/meteor\",\"../imports/api/questions.js\",function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////\n//                                                                        //\n// server/main.js                                                         //\n//                                                                        //\n////////////////////////////////////////////////////////////////////////////\n                                                                          //\nvar Meteor;module.import('meteor/meteor',{\"Meteor\":function(v){Meteor=v}});module.import('../imports/api/questions.js');\n                                                                          // 2\n                                                                          //\nMeteor.startup(function () {                                              // 4\n  // code to run on server at startup                                     //\n});                                                                       // 6\n////////////////////////////////////////////////////////////////////////////\n\n}]}},{\"extensions\":[\".js\",\".json\",\".jsx\"]});\nrequire(\"./server/main.js\");","servePath":"/app.js","sourceMap":{"version":3,"sources":["/imports/api/questions.js","/server/main.js"],"names":[],"mappings":";;;;;;;;AAAA,SAAS,KAAT,QAAsB,cAAtB;;AAEA,OAAO,IAAM,YAAY,IAAI,MAAM,UAAV,CAAqB,WAArB,CAAlB;AACP,OAAO,IAAM,mBAAmB,IAAI,MAAM,UAAV,CAAqB,mBAArB,CAAzB;;AAEP,UAAU,KAAV,CAAgB;AACd,UAAQ,gBAAS,MAAT,EAAiB,GAAjB,EAAsB,UAAtB,EAAkC,QAAlC,EAA4C;AAClD,WAAO,KAAP;AACD,GAHa;AAId,UAAQ,gBAAS,MAAT,EAAiB,GAAjB,EAAsB;AAC5B,WAAO,KAAP;AACD,GANa;AAOd,UAAQ,gBAAS,MAAT,EAAiB,GAAjB,EAAsB;AAC5B,WAAO,KAAP;AACD;AATa,CAAhB;;AAYA,OAAO,OAAP,CAAe;AACb,sBAAoB,yBAAS,IAAT,EAAe;AACjC,QAAI,CAAC,KAAK,MAAV,EAAkB;AAChB,YAAM,IAAI,OAAO,KAAX,CAAiB,gBAAjB,CAAN;AACD;AACD,cAAU,MAAV,CAAiB;AACf,gBADe;AAEf,cAAQ,KAAK,MAFE;AAGf,iBAAW,IAAI,IAAJ,EAHI,EAAjB;AAKD,GAVY;;AAWb,oBAAkB,uBAAS,UAAT,EAAqB;AACrC,cAAU,MAAV,CAAiB,EAAC,KAAK,UAAN,EAAjB,EAAoC;AAClC,YAAM;AACJ,eAAO;AADH;AAD4B,KAApC;AAKD,GAjBY;AAkBb,qBAAmB,wBAAS,UAAT,EAAqB;AACtC,cAAU,MAAV,CAAiB,EAAC,KAAK,UAAN,EAAjB,EAAoC;AAClC,YAAM;AACJ,kBAAU,IAAI,IAAJ;AADN;AAD4B,KAApC;AAKD,GAxBY;AAyBb,uBAAqB,0BAAS,UAAT,EAAqB,IAArB,EAA2B;AAC9C,qBAAiB,MAAjB,CAAwB;AACtB,4BADsB;AAEtB,gBAFsB;AAGtB,iBAAW,IAAI,IAAJ,EAHW,EAAxB;;AAKA,cAAU,MAAV,CAAiB,EAAC,KAAK,UAAN,EAAjB,EAAoC;AAClC,YAAM;AACJ,uBAAe;AADX;AAD4B,KAApC;;;AAOD;;AAtCY,CAAf;;AA0CA,IAAI,OAAO,QAAX,EAAqB;AACnB,SAAO,gBAAP,CAAwB,WAAxB,EAAqC,YAAY;AAC/C,WAAO;AACL,YAAM,gBAAW;AACf,eAAO,UAAU,IAAV,CAAe,EAAf,EAAmB;AACxB,kBAAQ;AACN,oBAAQ,CADF;AAEN,kBAAM,CAFA;AAGN,mBAAO,CAHD;AAIN,2BAAe,CAJT;AAKN,sBAAU;AALJ;AADgB,SAAnB,CAAP;AASD,OAXI;AAYL,gBAAU,CACR;AACE,cAAM,cAAS,QAAT,EAAmB;AACvB,iBAAO,OAAO,KAAP,CAAa,IAAb,CAAkB,EAAC,KAAK,SAAS,MAAf,EAAlB,EAA0C;AAC/C,oBAAQ;AACN,uBAAS;AADH;AADuC,WAA1C,CAAP;AAKD;AAPH,OADQ;AAZL,KAAP;AAwBD,GAzBD;AA0BA,SAAO,gBAAP,CAAwB,UAAxB,EAAoC,UAAU,UAAV,EAAsB;AACxD,WAAO;AACL,YAAM,gBAAW;AACf,eAAO,UAAU,IAAV,CAAe,EAAC,KAAK,UAAN,EAAf,EAAkC,EAAlC,CAAP;AACD,OAHI;AAIL,gBAAU,CACR;AACE,cAAM,cAAS,QAAT,EAAmB;AACvB,iBAAO,iBAAiB,IAAjB,CAAsB,EAAC,YAAY,SAAS,GAAtB,EAAtB,EAAkD,EAAlD,CAAP;AACD;AAHH,OADQ;AAJL,KAAP;AAYD,GAbD;AAcD,gF;;;;;;;;;;;ACpGD,SAAS,MAAT,QAAuB,eAAvB;AACA,OAAO,6BAAP;;AAEA,OAAO,OAAP,CAAe,YAAM;;AAEpB,CAFD,6E","file":"/app.js","sourcesContent":["import { Mongo } from 'meteor/mongo';\n\nexport const Questions = new Mongo.Collection('questions');\nexport const QuestionComments = new Mongo.Collection('question_comments');\n\nQuestions.allow({\n  update: function(userId, doc, fieldNames, modifier) {\n    return false;\n  },\n  insert: function(userId, doc) {\n    return false;\n  },\n  remove: function(userId, doc) {\n    return false;\n  }\n});\n\nMeteor.methods({\n  \"questions.create\": function(text) {\n    if (!this.userId) {\n      throw new Meteor.Error('not-authorized');\n    }\n    Questions.insert({\n      text,\n      userId: this.userId,\n      createdAt: new Date(), // current time\n    });\n  },\n  \"questions.like\": function(questionId) {\n    Questions.update({_id: questionId}, {\n      $inc: {\n        likes: 1\n      }\n    });\n  },\n  \"questions.solve\": function(questionId) {\n    Questions.update({_id: questionId}, {\n      $set: {\n        solvedAt: new Date()\n      }\n    });\n  },\n  \"questions.comment\": function(questionId, text) {\n    QuestionComments.insert({\n      questionId,\n      text,\n      createdAt: new Date(), // current time\n    });\n    Questions.update({_id: questionId}, {\n      $inc: {\n        commentsCount: 1\n      }\n    });\n    // Questions.update({_id: questionId}, {\n    // });\n  }\n\n});\n\nif (Meteor.isServer) {\n  Meteor.publishComposite(\"questions\", function () {\n    return {\n      find: function() {\n        return Questions.find({}, {\n          fields: {\n            userId: 1,\n            text: 1,\n            likes: 1,\n            commentsCount: 1,\n            solvedAt: 1\n          }\n        });\n      },\n      children: [\n        {\n          find: function(question) {\n            return Meteor.users.find({_id: question.userId}, {\n              fields: {\n                profile: 1\n              }\n            });\n          }\n        }\n      ]\n    }\n  });\n  Meteor.publishComposite(\"question\", function (questionId) {\n    return {\n      find: function() {\n        return Questions.find({_id: questionId}, {});\n      },\n      children: [\n        {\n          find: function(question) {\n            return QuestionComments.find({questionId: question._id}, {});\n          }\n        }\n      ]\n    }\n  });\n}\n","import { Meteor } from 'meteor/meteor';\nimport '../imports/api/questions.js';\n\nMeteor.startup(() => {\n  // code to run on server at startup\n});\n"]}}]