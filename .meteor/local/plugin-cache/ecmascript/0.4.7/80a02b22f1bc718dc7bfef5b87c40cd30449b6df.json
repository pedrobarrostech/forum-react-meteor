{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","classCallCheck"],"marked":[],"modules":{"imports":[{"source":"react","imported":["default","Component","PropTypes"],"specifiers":[{"kind":"named","imported":"default","local":"React"},{"kind":"named","imported":"Component","local":"Component"},{"kind":"named","imported":"PropTypes","local":"PropTypes"}]},{"source":"react-router","imported":["browserHistory"],"specifiers":[{"kind":"named","imported":"browserHistory","local":"browserHistory"}]},{"source":"meteor/react-meteor-data","imported":["createContainer"],"specifiers":[{"kind":"named","imported":"createContainer","local":"createContainer"}]},{"source":"../api/questions.js","imported":["Questions"],"specifiers":[{"kind":"named","imported":"Questions","local":"Questions"}]},{"source":"./QuestionItemComponent.jsx","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"QuestionItem"}]},{"source":"./QuestionFormComponent.jsx","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"QuestionForm"}]},{"source":"./LoadingComponent.jsx","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Loading"}]},{"source":"./FooterComponent.jsx","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Footer"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/ui/QuestionsListPage.jsx","filenameRelative":"/imports/ui/QuestionsListPage.jsx","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/ui/QuestionsListPage.jsx.map","sourceFileName":"/imports/ui/QuestionsListPage.jsx","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"QuestionsListPage"},"ignored":false,"code":"var _classCallCheck;module.import('babel-runtime/helpers/classCallCheck',{\"default\":function(v){_classCallCheck=v}});var _possibleConstructorReturn;module.import('babel-runtime/helpers/possibleConstructorReturn',{\"default\":function(v){_possibleConstructorReturn=v}});var _inherits;module.import('babel-runtime/helpers/inherits',{\"default\":function(v){_inherits=v}});var React,Component,PropTypes;module.import('react',{\"default\":function(v){React=v},\"Component\":function(v){Component=v},\"PropTypes\":function(v){PropTypes=v}});var browserHistory;module.import('react-router',{\"browserHistory\":function(v){browserHistory=v}});var createContainer;module.import('meteor/react-meteor-data',{\"createContainer\":function(v){createContainer=v}});var Questions;module.import('../api/questions.js',{\"Questions\":function(v){Questions=v}});var QuestionItem;module.import('./QuestionItemComponent.jsx',{\"default\":function(v){QuestionItem=v}});var QuestionForm;module.import('./QuestionFormComponent.jsx',{\"default\":function(v){QuestionForm=v}});var Loading;module.import('./LoadingComponent.jsx',{\"default\":function(v){Loading=v}});var Footer;module.import('./FooterComponent.jsx',{\"default\":function(v){Footer=v}});\n\n\n\n\n\n\n\n\n\n\n\nvar QuestionsListPage = function (_Component) {\n  _inherits(QuestionsListPage, _Component);\n\n  function QuestionsListPage() {\n    _classCallCheck(this, QuestionsListPage);\n\n    return _possibleConstructorReturn(this, _Component.apply(this, arguments));\n  }\n\n  QuestionsListPage.prototype.componentDidMount = function () {\n    function componentDidMount() {\n      if (!this.props.user) {\n        browserHistory.push('/login');\n      }\n    }\n\n    return componentDidMount;\n  }();\n\n  QuestionsListPage.prototype.componentDidUpdate = function () {\n    function componentDidUpdate() {\n      if (!this.props.user) {\n        browserHistory.push('/login');\n      }\n    }\n\n    return componentDidUpdate;\n  }();\n\n  QuestionsListPage.prototype.handleLike = function () {\n    function handleLike(questionId) {\n      Meteor.call('questions.like', questionId);\n    }\n\n    return handleLike;\n  }();\n\n  QuestionsListPage.prototype.handleSolve = function () {\n    function handleSolve(questionId) {\n      Meteor.call('questions.solve', questionId);\n    }\n\n    return handleSolve;\n  }();\n\n  QuestionsListPage.prototype.renderSolvedQuestions = function () {\n    function renderSolvedQuestions() {\n      var _this2 = this;\n\n      return this.props.solvedQuestions.map(function (question) {\n        return React.createElement(QuestionItem, {\n          key: question._id,\n          question: question,\n          handleLike: _this2.handleLike, handleSolve: _this2.handleSolve\n        });\n      });\n    }\n\n    return renderSolvedQuestions;\n  }();\n\n  QuestionsListPage.prototype.renderQuestions = function () {\n    function renderQuestions() {\n      var _this3 = this;\n\n      return this.props.openQuestions.map(function (question) {\n        return React.createElement(QuestionItem, {\n          user: _this3.props.users.find(function (user) {\n            return user._id == question.userId;\n          }),\n          key: question._id,\n          question: question,\n          handleLike: _this3.handleLike,\n          handleSolve: _this3.handleSolve\n        });\n      });\n    }\n\n    return renderQuestions;\n  }();\n\n  QuestionsListPage.prototype.renderSolvedQuestions = function () {\n    function renderSolvedQuestions() {\n      var _this4 = this;\n\n      return this.props.solvedQuestions.map(function (question) {\n        return React.createElement(QuestionItem, {\n          user: _this4.props.users.find(function (user) {\n            return user._id == question.userId;\n          }),\n          key: question._id, question: question,\n          handleLike: _this4.handleLike,\n          handleSolve: _this4.handleSolve\n        });\n      });\n    }\n\n    return renderSolvedQuestions;\n  }();\n\n  QuestionsListPage.prototype.renderLoading = function () {\n    function renderLoading() {\n      return React.createElement(Loading, null);\n    }\n\n    return renderLoading;\n  }();\n\n  QuestionsListPage.prototype.renderList = function () {\n    function renderList() {\n      if (this.props.loading) {\n        return this.renderLoading();\n      }\n      return React.createElement(\n        'div',\n        null,\n        React.createElement(\n          'h5',\n          null,\n          'Open Questions'\n        ),\n        React.createElement(\n          'table',\n          { className: 'centered' },\n          React.createElement(\n            'thead',\n            null,\n            React.createElement(\n              'tr',\n              null,\n              React.createElement(\n                'th',\n                { 'data-field': 'id' },\n                'Name'\n              ),\n              React.createElement(\n                'th',\n                { 'data-field': 'name' },\n                'Likes'\n              ),\n              React.createElement(\n                'th',\n                { 'data-field': 'price' },\n                'Solved?'\n              )\n            )\n          ),\n          React.createElement(\n            'tbody',\n            null,\n            this.renderQuestions()\n          )\n        ),\n        React.createElement(\n          'h5',\n          null,\n          'Closed Questions'\n        ),\n        React.createElement(\n          'table',\n          { className: 'centered' },\n          React.createElement(\n            'thead',\n            null,\n            React.createElement(\n              'tr',\n              null,\n              React.createElement(\n                'th',\n                { 'data-field': 'id' },\n                'Name'\n              ),\n              React.createElement(\n                'th',\n                { 'data-field': 'name' },\n                'Likes'\n              ),\n              React.createElement(\n                'th',\n                { 'data-field': 'price' },\n                'Solved?'\n              )\n            )\n          ),\n          React.createElement(\n            'tbody',\n            null,\n            this.renderSolvedQuestions()\n          )\n        )\n      );\n    }\n\n    return renderList;\n  }();\n\n  QuestionsListPage.prototype.render = function () {\n    function render() {\n      return React.createElement(\n        'div',\n        null,\n        React.createElement(\n          'div',\n          { className: 'section no-pad-bot', id: 'index-banner' },\n          React.createElement(\n            'div',\n            { className: 'container' },\n            React.createElement(\n              'h1',\n              { className: 'header center orange-text' },\n              'Questions?'\n            ),\n            React.createElement(QuestionForm, { placeholderName: 'Add a question ...',\n              repository: 'questions.create', formName: 'new-question' }),\n            this.renderList(),\n            React.createElement('br', null),\n            React.createElement('br', null)\n          )\n        ),\n        React.createElement(Footer, null)\n      );\n    }\n\n    return render;\n  }();\n\n  return QuestionsListPage;\n}(Component);\n/*\nQuestionsListPage.propTypes = {\n  solvedQuestions: PropTypes.array.isRequired,\n  openQuestions: PropTypes.array.isRequired\n\n};\n\n\nexport default class Container extends Component {\n  render(){\n    const questionsSubscriton = Meteor.subscribe('questions');\n    data = {\n      questions: Questions.find({},  {sort: {likes: -1 }}).fetch(),\n      loading: !questionsSubscriton.ready()\n    }\n\n    return (\n      <QuestionsListPage questions={data.questions} loading={data.loading} />\n    )\n  }\n}\n*/\n\n\nmodule.export(\"default\",exports.default=(createContainer(function () {\n  var questionsSubscription = Meteor.subscribe('questions');\n  return {\n    user: Meteor.user(),\n    openQuestions: Questions.find({ solvedAt: null }, { sort: { likes: -1 } }).fetch(),\n    solvedQuestions: Questions.find({ solvedAt: { $ne: null } }, { sort: { likes: -1 } }).fetch(),\n    users: Meteor.users.find().fetch(),\n    loading: !questionsSubscription.ready()\n  };\n}, QuestionsListPage)));","ast":null,"map":{"version":3,"sources":["/imports/ui/QuestionsListPage.jsx"],"names":[],"mappings":"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","file":"/imports/ui/QuestionsListPage.jsx.map","sourcesContent":["import React, { Component, PropTypes } from 'react';\nimport { browserHistory } from 'react-router';\nimport { createContainer } from 'meteor/react-meteor-data';\nimport { Questions } from '../api/questions.js';\nimport QuestionItem from './QuestionItemComponent.jsx';\nimport QuestionForm from './QuestionFormComponent.jsx';\nimport Loading from './LoadingComponent.jsx';\nimport Footer from './FooterComponent.jsx';\n\nclass QuestionsListPage extends Component {\n\n\n  componentDidMount() {\n    if (!this.props.user) {\n      browserHistory.push('/login');\n    }\n  }\n\n  componentDidUpdate() {\n    if (!this.props.user) {\n      browserHistory.push('/login');\n    }\n  }\n\n  handleLike(questionId) {\n    Meteor.call('questions.like', questionId);\n  }\n\n  handleSolve(questionId) {\n    Meteor.call('questions.solve', questionId);\n  }\n\n  renderSolvedQuestions() {\n    return this.props.solvedQuestions.map((question) => (\n      <QuestionItem\n        key={question._id}\n        question={question}\n        handleLike={this.handleLike} handleSolve={this.handleSolve}\n      />\n    ));\n  }\n\n  renderQuestions() {\n    return this.props.openQuestions.map((question) => (\n      <QuestionItem\n        user={this.props.users.find((user) => (user._id == question.userId))}\n        key={question._id}\n        question={question}\n        handleLike={this.handleLike}\n        handleSolve={this.handleSolve}\n      />\n    ));\n  }\n\n  renderSolvedQuestions() {\n    return this.props.solvedQuestions.map((question) => (\n      <QuestionItem\n        user={this.props.users.find((user) => (user._id == question.userId))}\n        key={question._id} question={question}\n        handleLike={this.handleLike}\n        handleSolve={this.handleSolve}\n      />\n    ));\n  }\n\n  renderLoading() {\n    return (\n      <Loading />\n    );\n  }\n\n  renderList() {\n    if (this.props.loading) {\n      return this.renderLoading();\n    }\n    return (\n      <div>\n        <h5>Open Questions</h5>\n        <table className=\"centered\">\n          <thead>\n            <tr>\n              <th data-field=\"id\">Name</th>\n              <th data-field=\"name\">Likes</th>\n              <th data-field=\"price\">Solved?</th>\n            </tr>\n          </thead>\n          <tbody>\n          {this.renderQuestions()}\n          </tbody>\n        </table>\n\n        <h5>Closed Questions</h5>\n        <table className=\"centered\">\n          <thead>\n            <tr>\n              <th data-field=\"id\">Name</th>\n              <th data-field=\"name\">Likes</th>\n              <th data-field=\"price\">Solved?</th>\n            </tr>\n          </thead>\n          <tbody>\n          {this.renderSolvedQuestions()}\n          </tbody>\n        </table>\n\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <div className='section no-pad-bot' id='index-banner'>\n          <div className='container'>\n            <h1 className='header center orange-text'>Questions?</h1>\n            <QuestionForm placeholderName='Add a question ...'\n              repository='questions.create' formName='new-question'/>\n           {this.renderList()}\n          <br/><br/>\n        </div>\n      </div>\n      <Footer />\n    </div>\n    );\n  }\n}\n/*\nQuestionsListPage.propTypes = {\n  solvedQuestions: PropTypes.array.isRequired,\n  openQuestions: PropTypes.array.isRequired\n\n};\n\n\nexport default class Container extends Component {\n  render(){\n    const questionsSubscriton = Meteor.subscribe('questions');\n    data = {\n      questions: Questions.find({},  {sort: {likes: -1 }}).fetch(),\n      loading: !questionsSubscriton.ready()\n    }\n\n    return (\n      <QuestionsListPage questions={data.questions} loading={data.loading} />\n    )\n  }\n}\n*/\nexport default createContainer(\n  () => {\n    const questionsSubscription = Meteor.subscribe('questions');\n    return {\n      user: Meteor.user(),\n      openQuestions: Questions.find({solvedAt: null}, {sort: {likes: -1}}).fetch(),\n      solvedQuestions: Questions.find({solvedAt: {$ne: null}}, {sort: {likes: -1}}).fetch(),\n      users: Meteor.users.find().fetch(),\n      loading: !questionsSubscription.ready()\n    };\n  },\n  QuestionsListPage);\n"]},"hash":"80a02b22f1bc718dc7bfef5b87c40cd30449b6df"}
