{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","classCallCheck"],"marked":[],"modules":{"imports":[{"source":"react","imported":["default","Component","PropTypes"],"specifiers":[{"kind":"named","imported":"default","local":"React"},{"kind":"named","imported":"Component","local":"Component"},{"kind":"named","imported":"PropTypes","local":"PropTypes"}]},{"source":"react-dom","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"ReactDOM"}]},{"source":"meteor/react-meteor-data","imported":["createContainer"],"specifiers":[{"kind":"named","imported":"createContainer","local":"createContainer"}]},{"source":"../api/questions.js","imported":["Questions","QuestionComments"],"specifiers":[{"kind":"named","imported":"Questions","local":"Questions"},{"kind":"named","imported":"QuestionComments","local":"QuestionComments"}]},{"source":"./LoadingComponent.jsx","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Loading"}]},{"source":"./CommentComponent.jsx","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Comment"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/ui/QuestionPage.jsx","filenameRelative":"/imports/ui/QuestionPage.jsx","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/ui/QuestionPage.jsx.map","sourceFileName":"/imports/ui/QuestionPage.jsx","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"QuestionPage"},"ignored":false,"code":"var _classCallCheck;module.import('babel-runtime/helpers/classCallCheck',{\"default\":function(v){_classCallCheck=v}});var _possibleConstructorReturn;module.import('babel-runtime/helpers/possibleConstructorReturn',{\"default\":function(v){_possibleConstructorReturn=v}});var _inherits;module.import('babel-runtime/helpers/inherits',{\"default\":function(v){_inherits=v}});var React,Component,PropTypes;module.import('react',{\"default\":function(v){React=v},\"Component\":function(v){Component=v},\"PropTypes\":function(v){PropTypes=v}});var ReactDOM;module.import('react-dom',{\"default\":function(v){ReactDOM=v}});var createContainer;module.import('meteor/react-meteor-data',{\"createContainer\":function(v){createContainer=v}});var Questions,QuestionComments;module.import('../api/questions.js',{\"Questions\":function(v){Questions=v},\"QuestionComments\":function(v){QuestionComments=v}});var Loading;module.import('./LoadingComponent.jsx',{\"default\":function(v){Loading=v}});var Comment;module.import('./CommentComponent.jsx',{\"default\":function(v){Comment=v}});\n\n\n\n\n\n\n\n\n\nvar QuestionPageComponent = function (_Component) {\n  _inherits(QuestionPageComponent, _Component);\n\n  function QuestionPageComponent() {\n    _classCallCheck(this, QuestionPageComponent);\n\n    return _possibleConstructorReturn(this, _Component.apply(this, arguments));\n  }\n\n  QuestionPageComponent.prototype.handleSubmit = function () {\n    function handleSubmit(event) {\n      event.preventDefault();\n      var text = ReactDOM.findDOMNode(this.refs.textInput).value.trim();\n      Meteor.call(\"questions.comment\", this.props.question._id, text);\n      ReactDOM.findDOMNode(this.refs.textInput).value = '';\n    }\n\n    return handleSubmit;\n  }();\n\n  QuestionPageComponent.prototype.renderComments = function () {\n    function renderComments() {\n      return this.props.comments.map(function (comment) {\n        return React.createElement(Comment, { key: comment._id, text: comment.text });\n      });\n    }\n\n    return renderComments;\n  }();\n\n  QuestionPageComponent.prototype.render = function () {\n    function render() {\n      if (this.props.loading) {\n        return React.createElement(Loading, null);\n      }\n      return React.createElement(\n        'div',\n        null,\n        React.createElement(\n          'div',\n          { className: 'container' },\n          React.createElement(\n            'h4',\n            null,\n            this.props.question.text\n          ),\n          React.createElement(\n            'p',\n            null,\n            moment(this.props.question.createdAt).fromNow()\n          ),\n          React.createElement('br', null),\n          React.createElement(\n            'h5',\n            null,\n            'Comments'\n          ),\n          React.createElement(\n            'div',\n            { className: 'form-group' },\n            this.renderComments(),\n            React.createElement(\n              'form',\n              { className: 'new-comment', onSubmit: this.handleSubmit.bind(this) },\n              React.createElement('input', {\n                className: 'form-control',\n                type: 'text',\n                ref: 'textInput',\n                placeholder: 'Adicione um comentário',\n                required: true\n              }),\n              React.createElement(\n                'button',\n                { className: 'btn-floating btn-large waves-effect waves-light red', type: 'submit' },\n                React.createElement(\n                  'i',\n                  { className: 'material-icons' },\n                  'add'\n                )\n              )\n            )\n          )\n        )\n      );\n    }\n\n    return render;\n  }();\n\n  return QuestionPageComponent;\n}(Component);\n\nmodule.export(\"default\",exports.default=(createContainer(function (_ref) {\n  var params = _ref.params;\n  var location = _ref.location;\n\n  var questionsSubscription = Meteor.subscribe(\"question\", params.questionId);\n  return {\n    loading: !questionsSubscription.ready(),\n    question: Questions.findOne({ _id: params.questionId }),\n    comments: QuestionComments.find({ questionId: params.questionId }, { sort: { createdAt: 1 } }).fetch()\n  };\n}, QuestionPage)));","ast":null,"map":{"version":3,"sources":["/imports/ui/QuestionPage.jsx"],"names":[],"mappings":";;;AAAA,OAAO,KAAP,IAAgB,SAAhB,EAA2B,SAA3B,QAA4C,OAA5C;AACA,OAAO,QAAP,MAAqB,WAArB;AACA,SAAS,eAAT,QAAgC,0BAAhC;AACA,SAAS,SAAT,EAAoB,gBAApB,QAA4C,qBAA5C;AACA,OAAO,OAAP,MAAoB,wBAApB;AACA,OAAO,OAAP,MAAoB,wBAApB;;IAEM,qB;;;;;;;;;kCAEJ,Y;0BAAa,K,EAAO;AAClB,YAAM,cAAN;AACA,UAAM,OAAO,SAAS,WAAT,CAAqB,KAAK,IAAL,CAAU,SAA/B,EAA0C,KAA1C,CAAgD,IAAhD,EAAb;AACA,aAAO,IAAP,CAAY,mBAAZ,EAAiC,KAAK,KAAL,CAAW,QAAX,CAAoB,GAArD,EAA0D,IAA1D;AACA,eAAS,WAAT,CAAqB,KAAK,IAAL,CAAU,SAA/B,EAA0C,KAA1C,GAAkD,EAAlD;AACD;;;;;kCAED,c;8BAAiB;AACf,aAAO,KAAK,KAAL,CAAW,QAAX,CAAoB,GAApB,CAAwB,UAAC,OAAD;AAAA,eAC7B,oBAAC,OAAD,IAAS,KAAK,QAAQ,GAAtB,EAA2B,MAAM,QAAQ,IAAzC,GAD6B;AAAA,OAAxB,CAAP;AAGD;;;;;kCAED,M;sBAAS;AACP,UAAI,KAAK,KAAL,CAAW,OAAf,EAAwB;AACtB,eAAQ,oBAAC,OAAD,OAAR;AACD;AACD,aACE;AAAA;AAAA;AACE;AAAA;AAAA,YAAK,WAAU,WAAf;AACE;AAAA;AAAA;AAAK,iBAAK,KAAL,CAAW,QAAX,CAAoB;AAAzB,WADF;AAEE;AAAA;AAAA;AAAI,mBAAO,KAAK,KAAL,CAAW,QAAX,CAAoB,SAA3B,EAAsC,OAAtC;AAAJ,WAFF;AAGE,yCAHF;AAIE;AAAA;AAAA;AAAA;AAAA,WAJF;AAKE;AAAA;AAAA,cAAK,WAAU,YAAf;AACG,iBAAK,cAAL,EADH;AAEE;AAAA;AAAA,gBAAM,WAAU,aAAhB,EAA8B,UAAU,KAAK,YAAL,CAAkB,IAAlB,CAAuB,IAAvB,CAAxC;AACE;AACE,2BAAU,cADZ;AAEE,sBAAK,MAFP;AAGE,qBAAI,WAHN;AAIE,6BAAY,wBAJd;AAKE;AALF,gBADF;AAQE;AAAA;AAAA,kBAAQ,WAAU,qDAAlB,EAAwE,MAAK,QAA7E;AACE;AAAA;AAAA,oBAAG,WAAU,gBAAb;AAAA;AAAA;AADF;AARF;AAFF;AALF;AADF,OADF;AAyBD;;;;;;EA5CiC,S;;AA+CpC,eAAe,gBACb,gBAA4B;AAAA,MAAxB,MAAwB,QAAxB,MAAwB;AAAA,MAAhB,QAAgB,QAAhB,QAAgB;;AAC1B,MAAM,wBAAwB,OAAO,SAAP,CAAiB,UAAjB,EAA6B,OAAO,UAApC,CAA9B;AACA,SAAO;AACL,aAAS,CAAC,sBAAsB,KAAtB,EADL;AAEL,cAAU,UAAU,OAAV,CAAkB,EAAC,KAAK,OAAO,UAAb,EAAlB,CAFL;AAGL,cAAU,iBAAiB,IAAjB,CAAsB,EAAC,YAAY,OAAO,UAApB,EAAtB,EAAuD,EAAC,MAAM,EAAC,WAAW,CAAZ,EAAP,EAAvD,EAA+E,KAA/E;AAHL,GAAP;AAKD,CARY,EASb,YATa,CAAf","file":"/imports/ui/QuestionPage.jsx.map","sourcesContent":["import React, { Component, PropTypes } from 'react';\nimport ReactDOM from 'react-dom';\nimport { createContainer } from 'meteor/react-meteor-data';\nimport { Questions, QuestionComments } from '../api/questions.js';\nimport Loading from './LoadingComponent.jsx';\nimport Comment from './CommentComponent.jsx';\n\nclass QuestionPageComponent extends Component {\n\n  handleSubmit(event) {\n    event.preventDefault();\n    const text = ReactDOM.findDOMNode(this.refs.textInput).value.trim();\n    Meteor.call(\"questions.comment\", this.props.question._id, text);\n    ReactDOM.findDOMNode(this.refs.textInput).value = '';\n  }\n\n  renderComments() {\n    return this.props.comments.map((comment) => (\n      <Comment key={comment._id} text={comment.text} />\n    ))\n  }\n\n  render() {\n    if (this.props.loading) {\n      return (<Loading />);\n    }\n    return (\n      <div>\n        <div className=\"container\">\n          <h4>{this.props.question.text}</h4>\n          <p>{moment(this.props.question.createdAt).fromNow()}</p>\n          <br />\n          <h5>Comments</h5>\n          <div className=\"form-group\">\n            {this.renderComments()}\n            <form className=\"new-comment\" onSubmit={this.handleSubmit.bind(this)} >\n              <input\n                className=\"form-control\"\n                type=\"text\"\n                ref=\"textInput\"\n                placeholder=\"Adicione um comentário\"\n                required\n              />\n              <button className=\"btn-floating btn-large waves-effect waves-light red\" type=\"submit\">\n                <i className=\"material-icons\">add</i>\n              </button>\n            </form>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default createContainer(\n  ( { params, location } ) => {\n    const questionsSubscription = Meteor.subscribe(\"question\", params.questionId)\n    return {\n      loading: !questionsSubscription.ready(),\n      question: Questions.findOne({_id: params.questionId}),\n      comments: QuestionComments.find({questionId: params.questionId}, {sort: {createdAt: 1}}).fetch()\n    };\n  },\n  QuestionPage);\n"]},"hash":"9652a70c97b8fba97e4747113df2bf961ea087f3"}
