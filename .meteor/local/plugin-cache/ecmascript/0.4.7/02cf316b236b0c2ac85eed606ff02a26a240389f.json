{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/mongo","imported":["Mongo"],"specifiers":[{"kind":"named","imported":"Mongo","local":"Mongo"}]}],"exports":{"exported":["Questions","QuestionComments"],"specifiers":[{"kind":"local","local":"Questions","exported":"Questions"},{"kind":"local","local":"QuestionComments","exported":"QuestionComments"}]}}},"options":{"filename":"/imports/api/questions.js","filenameRelative":"/imports/api/questions.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/api/questions.js.map","sourceFileName":"/imports/api/questions.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"questions"},"ignored":false,"code":"module.export({Questions:function(){return Questions},QuestionComments:function(){return QuestionComments}});var Mongo;module.import('meteor/mongo',{\"Mongo\":function(v){Mongo=v}});\n\nvar Questions = new Mongo.Collection('questions');\nvar QuestionComments = new Mongo.Collection('question_comments');\n\nQuestions.allow({\n  update: function () {\n    function update(userId, doc, fieldNames, modifier) {\n      return false;\n    }\n\n    return update;\n  }(),\n  insert: function () {\n    function insert(userId, doc) {\n      return false;\n    }\n\n    return insert;\n  }(),\n  remove: function () {\n    function remove(userId, doc) {\n      return false;\n    }\n\n    return remove;\n  }()\n});\n\nMeteor.methods({\n  'questions.create': function () {\n    function questionsCreate(text) {\n      if (!this.userId) {\n        throw new Meteor.Error('not-authorized');\n      }\n      Questions.insert({\n        text: text,\n        userId: this.userId,\n        createdAt: new Date() });\n    }\n\n    return questionsCreate;\n  }(),\n  // current time\n  'questions.like': function () {\n    function questionsLike(questionId) {\n      Questions.update({ _id: questionId }, {\n        $inc: {\n          likes: 1\n        }\n      });\n    }\n\n    return questionsLike;\n  }(),\n  'questions.solve': function () {\n    function questionsSolve(questionId) {\n      Questions.update({ _id: questionId }, {\n        $set: {\n          solvedAt: new Date()\n        }\n      });\n    }\n\n    return questionsSolve;\n  }(),\n  'questions.comment': function () {\n    function questionsComment(questionId, text) {\n      QuestionComments.insert({\n        questionId: questionId,\n        text: text,\n        createdAt: new Date() });\n      // current time\n      Questions.update({ _id: questionId }, {\n        $inc: {\n          commentsCount: 1\n        }\n      });\n      // Questions.update({_id: questionId}, {\n      // });\n    }\n\n    return questionsComment;\n  }()\n\n});\n\nif (Meteor.isServer) {\n  Meteor.publishComposite('questions', function () {\n    return {\n      find: function () {\n        function find() {\n          return Questions.find({}, {\n            fields: {\n              userId: 1,\n              text: 1,\n              likes: 1,\n              commentsCount: 1,\n              solvedAt: 1\n            }\n          });\n        }\n\n        return find;\n      }(),\n      children: [{\n        find: function () {\n          function find(question) {\n            return Meteor.users.find({ _id: question.userId }, {\n              fields: {\n                profile: 1\n              }\n            });\n          }\n\n          return find;\n        }()\n      }]\n    };\n  });\n  Meteor.publishComposite('question', function (questionId) {\n    return {\n      find: function () {\n        function find() {\n          return Questions.find({ _id: questionId }, {});\n        }\n\n        return find;\n      }(),\n      children: [{\n        find: function () {\n          function find(question) {\n            return QuestionComments.find({ questionId: question._id }, {});\n          }\n\n          return find;\n        }()\n      }]\n    };\n  });\n}","ast":null,"map":{"version":3,"sources":["/imports/api/questions.js"],"names":[],"mappings":"AAAA,SAAS,KAAT,QAAsB,cAAtB;;AAEA,OAAO,IAAM,YAAY,IAAI,MAAM,UAAV,CAAqB,WAArB,CAAlB;AACP,OAAO,IAAM,mBAAmB,IAAI,MAAM,UAAV,CAAqB,mBAArB,CAAzB;;AAEP,UAAU,KAAV,CAAgB;AACd;AAAQ,oBAAS,MAAT,EAAiB,GAAjB,EAAsB,UAAtB,EAAkC,QAAlC,EAA4C;AAClD,aAAO,KAAP;AACD;;AAFD;AAAA,KADc;AAId;AAAQ,oBAAS,MAAT,EAAiB,GAAjB,EAAsB;AAC5B,aAAO,KAAP;AACD;;AAFD;AAAA,KAJc;AAOd;AAAQ,oBAAS,MAAT,EAAiB,GAAjB,EAAsB;AAC5B,aAAO,KAAP;AACD;;AAFD;AAAA;AAPc,CAAhB;;AAYA,OAAO,OAAP,CAAe;AACb;AAAoB,6BAAS,IAAT,EAAe;AACjC,UAAI,CAAC,KAAK,MAAV,EAAkB;AAChB,cAAM,IAAI,OAAO,KAAX,CAAiB,gBAAjB,CAAN;AACD;AACD,gBAAU,MAAV,CAAiB;AACf,kBADe;AAEf,gBAAQ,KAAK,MAFE;AAGf,mBAAW,IAAI,IAAJ,EAHI,EAAjB;AAKD;;AATD;AAAA,KADa;;AAWb;AAAkB,2BAAS,UAAT,EAAqB;AACrC,gBAAU,MAAV,CAAiB,EAAE,KAAK,UAAP,EAAjB,EAAsC;AACpC,cAAM;AACJ,iBAAO;AADH;AAD8B,OAAtC;AAKD;;AAND;AAAA,KAXa;AAkBb;AAAmB,4BAAS,UAAT,EAAqB;AACtC,gBAAU,MAAV,CAAiB,EAAE,KAAK,UAAP,EAAjB,EAAsC;AACpC,cAAM;AACJ,oBAAU,IAAI,IAAJ;AADN;AAD8B,OAAtC;AAKD;;AAND;AAAA,KAlBa;AAyBb;AAAqB,8BAAS,UAAT,EAAqB,IAArB,EAA2B;AAC9C,uBAAiB,MAAjB,CAAwB;AACtB,8BADsB;AAEtB,kBAFsB;AAGtB,mBAAW,IAAI,IAAJ,EAHW,EAAxB;;AAKA,gBAAU,MAAV,CAAiB,EAAE,KAAK,UAAP,EAAjB,EAAsC;AACpC,cAAM;AACJ,yBAAe;AADX;AAD8B,OAAtC;;;AAOD;;AAbD;AAAA;;AAzBa,CAAf;;AA0CA,IAAI,OAAO,QAAX,EAAqB;AACnB,SAAO,gBAAP,CAAwB,WAAxB,EAAqC,YAAY;AAC/C,WAAO;AACL;AAAM,wBAAW;AACf,iBAAO,UAAU,IAAV,CAAe,EAAf,EAAmB;AACxB,oBAAQ;AACN,sBAAQ,CADF;AAEN,oBAAM,CAFA;AAGN,qBAAO,CAHD;AAIN,6BAAe,CAJT;AAKN,wBAAU;AALJ;AADgB,WAAnB,CAAP;AASD;;AAVD;AAAA,SADK;AAYL,gBAAU,CACR;AACE;AAAM,wBAAS,QAAT,EAAmB;AACvB,mBAAO,OAAO,KAAP,CAAa,IAAb,CAAkB,EAAE,KAAK,SAAS,MAAhB,EAAlB,EAA4C;AACjD,sBAAQ;AACN,yBAAS;AADH;AADyC,aAA5C,CAAP;AAKD;;AAND;AAAA;AADF,OADQ;AAZL,KAAP;AAwBD,GAzBD;AA0BA,SAAO,gBAAP,CAAwB,UAAxB,EAAoC,UAAU,UAAV,EAAsB;AACxD,WAAO;AACL;AAAM,wBAAW;AACf,iBAAO,UAAU,IAAV,CAAe,EAAE,KAAK,UAAP,EAAf,EAAoC,EAApC,CAAP;AACD;;AAFD;AAAA,SADK;AAIL,gBAAU,CACR;AACE;AAAM,wBAAS,QAAT,EAAmB;AACvB,mBAAO,iBAAiB,IAAjB,CAAsB,EAAE,YAAY,SAAS,GAAvB,EAAtB,EAAoD,EAApD,CAAP;AACD;;AAFD;AAAA;AADF,OADQ;AAJL,KAAP;AAYD,GAbD;AAcD","file":"/imports/api/questions.js.map","sourcesContent":["import { Mongo } from 'meteor/mongo';\n\nexport const Questions = new Mongo.Collection('questions');\nexport const QuestionComments = new Mongo.Collection('question_comments');\n\nQuestions.allow({\n  update: function(userId, doc, fieldNames, modifier) {\n    return false;\n  },\n  insert: function(userId, doc) {\n    return false;\n  },\n  remove: function(userId, doc) {\n    return false;\n  }\n});\n\nMeteor.methods({\n  'questions.create': function(text) {\n    if (!this.userId) {\n      throw new Meteor.Error('not-authorized');\n    }\n    Questions.insert({\n      text,\n      userId: this.userId,\n      createdAt: new Date(), // current time\n    });\n  },\n  'questions.like': function(questionId) {\n    Questions.update({ _id: questionId }, {\n      $inc: {\n        likes: 1\n      }\n    });\n  },\n  'questions.solve': function(questionId) {\n    Questions.update({ _id: questionId }, {\n      $set: {\n        solvedAt: new Date()\n      }\n    });\n  },\n  'questions.comment': function(questionId, text) {\n    QuestionComments.insert({\n      questionId,\n      text,\n      createdAt: new Date(), // current time\n    });\n    Questions.update({ _id: questionId }, {\n      $inc: {\n        commentsCount: 1\n      }\n    });\n    // Questions.update({_id: questionId}, {\n    // });\n  }\n\n});\n\nif (Meteor.isServer) {\n  Meteor.publishComposite('questions', function () {\n    return {\n      find: function() {\n        return Questions.find({}, {\n          fields: {\n            userId: 1,\n            text: 1,\n            likes: 1,\n            commentsCount: 1,\n            solvedAt: 1\n          }\n        });\n      },\n      children: [\n        {\n          find: function(question) {\n            return Meteor.users.find({ _id: question.userId }, {\n              fields: {\n                profile: 1\n              }\n            });\n          }\n        }\n      ]\n    };\n  });\n  Meteor.publishComposite('question', function (questionId) {\n    return {\n      find: function() {\n        return Questions.find({ _id: questionId }, {});\n      },\n      children: [\n        {\n          find: function(question) {\n            return QuestionComments.find({ questionId: question._id }, {});\n          }\n        }\n      ]\n    };\n  });\n}\n"]},"hash":"02cf316b236b0c2ac85eed606ff02a26a240389f"}
