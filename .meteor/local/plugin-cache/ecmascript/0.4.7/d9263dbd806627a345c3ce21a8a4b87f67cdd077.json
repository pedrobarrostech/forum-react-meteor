{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","classCallCheck"],"marked":[],"modules":{"imports":[{"source":"react","imported":["default","Component","PropTypes"],"specifiers":[{"kind":"named","imported":"default","local":"React"},{"kind":"named","imported":"Component","local":"Component"},{"kind":"named","imported":"PropTypes","local":"PropTypes"}]},{"source":"react-dom","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"ReactDOM"}]},{"source":"meteor/react-meteor-data","imported":["createContainer"],"specifiers":[{"kind":"named","imported":"createContainer","local":"createContainer"}]},{"source":"../api/questions.js","imported":["Questions","QuestionComments"],"specifiers":[{"kind":"named","imported":"Questions","local":"Questions"},{"kind":"named","imported":"QuestionComments","local":"QuestionComments"}]},{"source":"./LoadingComponent.jsx","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Loading"}]},{"source":"./CommentComponent.jsx","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Comment"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/ui/QuestionPage.jsx","filenameRelative":"/imports/ui/QuestionPage.jsx","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/ui/QuestionPage.jsx.map","sourceFileName":"/imports/ui/QuestionPage.jsx","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"QuestionPage"},"ignored":false,"code":"var _classCallCheck;module.import('babel-runtime/helpers/classCallCheck',{\"default\":function(v){_classCallCheck=v}});var _possibleConstructorReturn;module.import('babel-runtime/helpers/possibleConstructorReturn',{\"default\":function(v){_possibleConstructorReturn=v}});var _inherits;module.import('babel-runtime/helpers/inherits',{\"default\":function(v){_inherits=v}});var React,Component,PropTypes;module.import('react',{\"default\":function(v){React=v},\"Component\":function(v){Component=v},\"PropTypes\":function(v){PropTypes=v}});var ReactDOM;module.import('react-dom',{\"default\":function(v){ReactDOM=v}});var createContainer;module.import('meteor/react-meteor-data',{\"createContainer\":function(v){createContainer=v}});var Questions,QuestionComments;module.import('../api/questions.js',{\"Questions\":function(v){Questions=v},\"QuestionComments\":function(v){QuestionComments=v}});var Loading;module.import('./LoadingComponent.jsx',{\"default\":function(v){Loading=v}});var Comment;module.import('./CommentComponent.jsx',{\"default\":function(v){Comment=v}});\n\n\n\n\n\n\n\n\n\nvar QuestionPage = function (_Component) {\n  _inherits(QuestionPage, _Component);\n\n  function QuestionPage() {\n    _classCallCheck(this, QuestionPage);\n\n    return _possibleConstructorReturn(this, _Component.apply(this, arguments));\n  }\n\n  QuestionPage.prototype.handleSubmit = function handleSubmit(event) {\n    event.preventDefault();\n    var text = ReactDOM.findDOMNode(this.refs.textInput).value.trim();\n    Meteor.call(\"questions.comment\", this.props.question._id, text);\n    ReactDOM.findDOMNode(this.refs.textInput).value = '';\n  };\n\n  QuestionPage.prototype.renderComments = function renderComments() {\n    return this.props.comments.map(function (comment) {\n      return React.createElement(Comment, {\n        key: comment._id,\n        text: comment.text\n      });\n    });\n  };\n\n  QuestionPage.prototype.render = function render() {\n    if (this.props.loading) {\n      return React.createElement(Loading, null);\n    }\n    return React.createElement(\n      'div',\n      null,\n      React.createElement(\n        'div',\n        { className: 'container' },\n        React.createElement(\n          'h4',\n          null,\n          this.props.question.text\n        ),\n        React.createElement(\n          'p',\n          null,\n          moment(this.props.question.createdAt).fromNow()\n        ),\n        React.createElement('br', null),\n        React.createElement(\n          'h5',\n          null,\n          'Comments'\n        ),\n        React.createElement(\n          'div',\n          { className: 'form-group' },\n          this.renderComments(),\n          React.createElement(\n            'form',\n            { className: 'new-comment', onSubmit: this.handleSubmit.bind(this) },\n            React.createElement('input', {\n              className: 'form-control',\n              type: 'text',\n              ref: 'textInput',\n              placeholder: 'Adicione um comentário',\n              required: true\n            }),\n            React.createElement(\n              'button',\n              { className: 'btn-floating btn-large waves-effect waves-light red', type: 'submit' },\n              React.createElement(\n                'i',\n                { className: 'material-icons' },\n                'add'\n              )\n            )\n          )\n        )\n      )\n    );\n  };\n\n  return QuestionPage;\n}(Component);\n\nQuestionItemComponent.propTypes = propTypes;\n\nmodule.export(\"default\",exports.default=(QuestionItemComponent));\n\nmodule.export(\"default\",exports.default=(createContainer(function (_ref) {\n  var params = _ref.params;\n\n  var questionsSubscription = Meteor.subscribe(\"question\", params.questionId);\n  return {\n    loading: !questionsSubscription.ready(),\n    question: Questions.findOne({ _id: params.questionId }),\n    comments: QuestionComments.find({ questionId: params.questionId }, { sort: { createdAt: 1 } }).fetch()\n  };\n}, QuestionPage)));","ast":null,"map":{"version":3,"sources":["/imports/ui/QuestionPage.jsx"],"names":[],"mappings":";;;AAAA,OAAO,KAAP,IAAgB,SAAhB,EAA2B,SAA3B,QAA4C,OAA5C;AACA,OAAO,QAAP,MAAqB,WAArB;AACA,SAAS,eAAT,QAAgC,0BAAhC;AACA,SAAS,SAAT,EAAoB,gBAApB,QAA4C,qBAA5C;AACA,OAAO,OAAP,MAAoB,wBAApB;AACA,OAAO,OAAP,MAAoB,wBAApB;;IAEM,Y;;;;;;;;;yBAEJ,Y,yBAAa,K,EAAO;AAClB,UAAM,cAAN;AACA,QAAM,OAAO,SAAS,WAAT,CAAqB,KAAK,IAAL,CAAU,SAA/B,EAA0C,KAA1C,CAAgD,IAAhD,EAAb;AACA,WAAO,IAAP,CAAY,mBAAZ,EAAiC,KAAK,KAAL,CAAW,QAAX,CAAoB,GAArD,EAA0D,IAA1D;AACA,aAAS,WAAT,CAAqB,KAAK,IAAL,CAAU,SAA/B,EAA0C,KAA1C,GAAkD,EAAlD;AACD,G;;yBAED,c,6BAAiB;AACf,WAAO,KAAK,KAAL,CAAW,QAAX,CAAoB,GAApB,CAAwB,UAAC,OAAD;AAAA,aAC7B,oBAAC,OAAD;AACE,aAAK,QAAQ,GADf;AAEE,cAAM,QAAQ;AAFhB,QAD6B;AAAA,KAAxB,CAAP;AAMD,G;;yBAED,M,qBAAS;AACP,QAAI,KAAK,KAAL,CAAW,OAAf,EAAwB;AACtB,aAAQ,oBAAC,OAAD,OAAR;AACD;AACD,WACE;AAAA;AAAA;AACE;AAAA;AAAA,UAAK,WAAU,WAAf;AACE;AAAA;AAAA;AAAK,eAAK,KAAL,CAAW,QAAX,CAAoB;AAAzB,SADF;AAEE;AAAA;AAAA;AAAI,iBAAO,KAAK,KAAL,CAAW,QAAX,CAAoB,SAA3B,EAAsC,OAAtC;AAAJ,SAFF;AAGE,uCAHF;AAIE;AAAA;AAAA;AAAA;AAAA,SAJF;AAKE;AAAA;AAAA,YAAK,WAAU,YAAf;AACG,eAAK,cAAL,EADH;AAEE;AAAA;AAAA,cAAM,WAAU,aAAhB,EAA8B,UAAU,KAAK,YAAL,CAAkB,IAAlB,CAAuB,IAAvB,CAAxC;AACE;AACE,yBAAU,cADZ;AAEE,oBAAK,MAFP;AAGE,mBAAI,WAHN;AAIE,2BAAY,wBAJd;AAKE;AALF,cADF;AAQE;AAAA;AAAA,gBAAQ,WAAU,qDAAlB,EAAwE,MAAK,QAA7E;AACE;AAAA;AAAA,kBAAG,WAAU,gBAAb;AAAA;AAAA;AADF;AARF;AAFF;AALF;AADF,KADF;AAyBD,G;;;EA/CwB,S;;AAmD3B,sBAAsB,SAAtB,GAAkC,SAAlC;;AAEA,eAAe,qBAAf;;AAGA,eAAe,gBACb,gBAAgB;AAAA,MAAb,MAAa,QAAb,MAAa;;AACd,MAAM,wBAAwB,OAAO,SAAP,CAAiB,UAAjB,EAA6B,OAAO,UAApC,CAA9B;AACA,SAAO;AACL,aAAS,CAAC,sBAAsB,KAAtB,EADL;AAEL,cAAU,UAAU,OAAV,CAAkB,EAAE,KAAK,OAAO,UAAd,EAAlB,CAFL;AAGL,cAAU,iBAAiB,IAAjB,CAAsB,EAAE,YAAY,OAAO,UAArB,EAAtB,EACR,EAAE,MAAM,EAAE,WAAW,CAAb,EAAR,EADQ,EACoB,KADpB;AAHL,GAAP;AAMD,CATY,EASV,YATU,CAAf","file":"/imports/ui/QuestionPage.jsx.map","sourcesContent":["import React, { Component, PropTypes } from 'react';\nimport ReactDOM from 'react-dom';\nimport { createContainer } from 'meteor/react-meteor-data';\nimport { Questions, QuestionComments } from '../api/questions.js';\nimport Loading from './LoadingComponent.jsx';\nimport Comment from './CommentComponent.jsx';\n\nclass QuestionPage extends Component {\n\n  handleSubmit(event) {\n    event.preventDefault();\n    const text = ReactDOM.findDOMNode(this.refs.textInput).value.trim();\n    Meteor.call(\"questions.comment\", this.props.question._id, text);\n    ReactDOM.findDOMNode(this.refs.textInput).value = '';\n  }\n\n  renderComments() {\n    return this.props.comments.map((comment) => (\n      <Comment\n        key={comment._id}\n        text={comment.text}\n      />\n    ));\n  }\n\n  render() {\n    if (this.props.loading) {\n      return (<Loading />);\n    }\n    return (\n      <div>\n        <div className=\"container\">\n          <h4>{this.props.question.text}</h4>\n          <p>{moment(this.props.question.createdAt).fromNow()}</p>\n          <br />\n          <h5>Comments</h5>\n          <div className=\"form-group\">\n            {this.renderComments()}\n            <form className=\"new-comment\" onSubmit={this.handleSubmit.bind(this)} >\n              <input\n                className=\"form-control\"\n                type=\"text\"\n                ref=\"textInput\"\n                placeholder=\"Adicione um comentário\"\n                required\n              />\n              <button className=\"btn-floating btn-large waves-effect waves-light red\" type=\"submit\">\n                <i className=\"material-icons\">add</i>\n              </button>\n            </form>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n\nQuestionItemComponent.propTypes = propTypes;\n\nexport default QuestionItemComponent;\n\n\nexport default createContainer(\n  ({ params }) => {\n    const questionsSubscription = Meteor.subscribe(\"question\", params.questionId)\n    return {\n      loading: !questionsSubscription.ready(),\n      question: Questions.findOne({ _id: params.questionId }),\n      comments: QuestionComments.find({ questionId: params.questionId },\n        { sort: { createdAt: 1 } }).fetch()\n    };\n  }, QuestionPage);\n"]},"hash":"d9263dbd806627a345c3ce21a8a4b87f67cdd077"}
