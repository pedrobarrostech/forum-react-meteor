{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/mongo","imported":["Mongo"],"specifiers":[{"kind":"named","imported":"Mongo","local":"Mongo"}]}],"exports":{"exported":["Questions","QuestionComments"],"specifiers":[{"kind":"local","local":"Questions","exported":"Questions"},{"kind":"local","local":"QuestionComments","exported":"QuestionComments"}]}}},"options":{"filename":"/imports/api/questions.js","filenameRelative":"/imports/api/questions.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/api/questions.js.map","sourceFileName":"/imports/api/questions.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"questions"},"ignored":false,"code":"module.export({Questions:function(){return Questions},QuestionComments:function(){return QuestionComments}});var Mongo;module.import('meteor/mongo',{\"Mongo\":function(v){Mongo=v}});\n\nvar Questions = new Mongo.Collection('questions');\nvar QuestionComments = new Mongo.Collection('question_comments');\n\nQuestions.allow({\n  update: function update(userId, doc, fieldNames, modifier) {\n    return false;\n  },\n  insert: function insert(userId, doc) {\n    return false;\n  },\n  remove: function remove(userId, doc) {\n    return false;\n  }\n});\n\nMeteor.methods({\n  'questions.create': function questionsCreate(text) {\n    if (!this.userId) {\n      throw new Meteor.Error('not-authorized');\n    }\n    Questions.insert({\n      text: text,\n      userId: this.userId,\n      createdAt: new Date() });\n  },\n  // current time\n  'questions.like': function questionsLike(questionId) {\n    Questions.update({ _id: questionId }, {\n      $inc: {\n        likes: 1\n      }\n    });\n  },\n  'questions.solve': function questionsSolve(questionId) {\n    Questions.update({ _id: questionId }, {\n      $set: {\n        solvedAt: new Date()\n      }\n    });\n  },\n  'questions.comment': function questionsComment(questionId, text) {\n    QuestionComments.insert({\n      questionId: questionId,\n      text: text,\n      createdAt: new Date() });\n    // current time\n    Questions.update({ _id: questionId }, {\n      $inc: {\n        commentsCount: 1\n      }\n    });\n    // Questions.update({_id: questionId}, {\n    // });\n  }\n\n});\n\nif (Meteor.isServer) {\n  Meteor.publishComposite('questions', function () {\n    return {\n      find: function find() {\n        return Questions.find({}, {\n          fields: {\n            userId: 1,\n            text: 1,\n            likes: 1,\n            commentsCount: 1,\n            solvedAt: 1\n          }\n        });\n      },\n      children: [{\n        find: function find(question) {\n          return Meteor.users.find({ _id: question.userId }, {\n            fields: {\n              profile: 1\n            }\n          });\n        }\n      }]\n    };\n  });\n  Meteor.publishComposite('question', function (questionId) {\n    return {\n      find: function find() {\n        return Questions.find({ _id: questionId }, {});\n      },\n      children: [{\n        find: function find(question) {\n          return QuestionComments.find({ questionId: question._id }, {});\n        }\n      }]\n    };\n  });\n}","ast":null,"map":{"version":3,"sources":["/imports/api/questions.js"],"names":[],"mappings":"AAAA,SAAS,KAAT,QAAsB,cAAtB;;AAEA,OAAO,IAAM,YAAY,IAAI,MAAM,UAAV,CAAqB,WAArB,CAAlB;AACP,OAAO,IAAM,mBAAmB,IAAI,MAAM,UAAV,CAAqB,mBAArB,CAAzB;;AAEP,UAAU,KAAV,CAAgB;AACd,UAAQ,gBAAS,MAAT,EAAiB,GAAjB,EAAsB,UAAtB,EAAkC,QAAlC,EAA4C;AAClD,WAAO,KAAP;AACD,GAHa;AAId,UAAQ,gBAAS,MAAT,EAAiB,GAAjB,EAAsB;AAC5B,WAAO,KAAP;AACD,GANa;AAOd,UAAQ,gBAAS,MAAT,EAAiB,GAAjB,EAAsB;AAC5B,WAAO,KAAP;AACD;AATa,CAAhB;;AAYA,OAAO,OAAP,CAAe;AACb,sBAAoB,yBAAS,IAAT,EAAe;AACjC,QAAI,CAAC,KAAK,MAAV,EAAkB;AAChB,YAAM,IAAI,OAAO,KAAX,CAAiB,gBAAjB,CAAN;AACD;AACD,cAAU,MAAV,CAAiB;AACf,gBADe;AAEf,cAAQ,KAAK,MAFE;AAGf,iBAAW,IAAI,IAAJ,EAHI,EAAjB;AAKD,GAVY;;AAWb,oBAAkB,uBAAS,UAAT,EAAqB;AACrC,cAAU,MAAV,CAAiB,EAAE,KAAK,UAAP,EAAjB,EAAsC;AACpC,YAAM;AACJ,eAAO;AADH;AAD8B,KAAtC;AAKD,GAjBY;AAkBb,qBAAmB,wBAAS,UAAT,EAAqB;AACtC,cAAU,MAAV,CAAiB,EAAE,KAAK,UAAP,EAAjB,EAAsC;AACpC,YAAM;AACJ,kBAAU,IAAI,IAAJ;AADN;AAD8B,KAAtC;AAKD,GAxBY;AAyBb,uBAAqB,0BAAS,UAAT,EAAqB,IAArB,EAA2B;AAC9C,qBAAiB,MAAjB,CAAwB;AACtB,4BADsB;AAEtB,gBAFsB;AAGtB,iBAAW,IAAI,IAAJ,EAHW,EAAxB;;AAKA,cAAU,MAAV,CAAiB,EAAE,KAAK,UAAP,EAAjB,EAAsC;AACpC,YAAM;AACJ,uBAAe;AADX;AAD8B,KAAtC;;;AAOD;;AAtCY,CAAf;;AA0CA,IAAI,OAAO,QAAX,EAAqB;AACnB,SAAO,gBAAP,CAAwB,WAAxB,EAAqC,YAAY;AAC/C,WAAO;AACL,YAAM,gBAAW;AACf,eAAO,UAAU,IAAV,CAAe,EAAf,EAAmB;AACxB,kBAAQ;AACN,oBAAQ,CADF;AAEN,kBAAM,CAFA;AAGN,mBAAO,CAHD;AAIN,2BAAe,CAJT;AAKN,sBAAU;AALJ;AADgB,SAAnB,CAAP;AASD,OAXI;AAYL,gBAAU,CACR;AACE,cAAM,cAAS,QAAT,EAAmB;AACvB,iBAAO,OAAO,KAAP,CAAa,IAAb,CAAkB,EAAE,KAAK,SAAS,MAAhB,EAAlB,EAA4C;AACjD,oBAAQ;AACN,uBAAS;AADH;AADyC,WAA5C,CAAP;AAKD;AAPH,OADQ;AAZL,KAAP;AAwBD,GAzBD;AA0BA,SAAO,gBAAP,CAAwB,UAAxB,EAAoC,UAAU,UAAV,EAAsB;AACxD,WAAO;AACL,YAAM,gBAAW;AACf,eAAO,UAAU,IAAV,CAAe,EAAE,KAAK,UAAP,EAAf,EAAoC,EAApC,CAAP;AACD,OAHI;AAIL,gBAAU,CACR;AACE,cAAM,cAAS,QAAT,EAAmB;AACvB,iBAAO,iBAAiB,IAAjB,CAAsB,EAAE,YAAY,SAAS,GAAvB,EAAtB,EAAoD,EAApD,CAAP;AACD;AAHH,OADQ;AAJL,KAAP;AAYD,GAbD;AAcD","file":"/imports/api/questions.js.map","sourcesContent":["import { Mongo } from 'meteor/mongo';\n\nexport const Questions = new Mongo.Collection('questions');\nexport const QuestionComments = new Mongo.Collection('question_comments');\n\nQuestions.allow({\n  update: function(userId, doc, fieldNames, modifier) {\n    return false;\n  },\n  insert: function(userId, doc) {\n    return false;\n  },\n  remove: function(userId, doc) {\n    return false;\n  }\n});\n\nMeteor.methods({\n  'questions.create': function(text) {\n    if (!this.userId) {\n      throw new Meteor.Error('not-authorized');\n    }\n    Questions.insert({\n      text,\n      userId: this.userId,\n      createdAt: new Date(), // current time\n    });\n  },\n  'questions.like': function(questionId) {\n    Questions.update({ _id: questionId }, {\n      $inc: {\n        likes: 1\n      }\n    });\n  },\n  'questions.solve': function(questionId) {\n    Questions.update({ _id: questionId }, {\n      $set: {\n        solvedAt: new Date()\n      }\n    });\n  },\n  'questions.comment': function(questionId, text) {\n    QuestionComments.insert({\n      questionId,\n      text,\n      createdAt: new Date(), // current time\n    });\n    Questions.update({ _id: questionId }, {\n      $inc: {\n        commentsCount: 1\n      }\n    });\n    // Questions.update({_id: questionId}, {\n    // });\n  }\n\n});\n\nif (Meteor.isServer) {\n  Meteor.publishComposite('questions', function () {\n    return {\n      find: function() {\n        return Questions.find({}, {\n          fields: {\n            userId: 1,\n            text: 1,\n            likes: 1,\n            commentsCount: 1,\n            solvedAt: 1\n          }\n        });\n      },\n      children: [\n        {\n          find: function(question) {\n            return Meteor.users.find({ _id: question.userId }, {\n              fields: {\n                profile: 1\n              }\n            });\n          }\n        }\n      ]\n    };\n  });\n  Meteor.publishComposite('question', function (questionId) {\n    return {\n      find: function() {\n        return Questions.find({ _id: questionId }, {});\n      },\n      children: [\n        {\n          find: function(question) {\n            return QuestionComments.find({ questionId: question._id }, {});\n          }\n        }\n      ]\n    };\n  });\n}\n"]},"hash":"c009e2e511d881f3595d7bb629ee9bdff05a793e"}
